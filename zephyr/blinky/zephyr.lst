
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 10 00 20 f1 10 00 08 39 2a 00 08 c5 10 00 08     ... ....9*......
 8000010:	c5 10 00 08 c5 10 00 08 c5 10 00 08 00 00 00 00     ................
	...
 800002c:	d9 0d 00 08 c5 10 00 08 00 00 00 00 85 0d 00 08     ................
 800003c:	d5 1a 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000050:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000060:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000070:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000080:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000090:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000a0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000b0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000c0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000d0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000e0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 80000f0:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000100:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000110:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000120:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000130:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000140:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000150:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000160:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000170:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000180:	89 0e 00 08 89 0e 00 08 89 0e 00 08 89 0e 00 08     ................
 8000190:	89 0e 00 08 89 0e 00 08                             ........

Disassembly of section text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f000 f808 	bl	80001cc <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__udivmoddi4>:
 80001cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d0:	4686      	mov	lr, r0
 80001d2:	468c      	mov	ip, r1
 80001d4:	4608      	mov	r0, r1
 80001d6:	9e08      	ldr	r6, [sp, #32]
 80001d8:	4615      	mov	r5, r2
 80001da:	4674      	mov	r4, lr
 80001dc:	4619      	mov	r1, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 80c2 	bne.w	8000368 <__udivmoddi4+0x19c>
 80001e4:	4285      	cmp	r5, r0
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	d945      	bls.n	8000278 <__udivmoddi4+0xac>
 80001ec:	b14a      	cbz	r2, 8000202 <__udivmoddi4+0x36>
 80001ee:	f1c2 0320 	rsb	r3, r2, #32
 80001f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80001f6:	fa2e f303 	lsr.w	r3, lr, r3
 80001fa:	4095      	lsls	r5, r2
 80001fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000206:	b2a8      	uxth	r0, r5
 8000208:	fbbc f8fe 	udiv	r8, ip, lr
 800020c:	0c23      	lsrs	r3, r4, #16
 800020e:	fb0e cc18 	mls	ip, lr, r8, ip
 8000212:	fb08 f900 	mul.w	r9, r8, r0
 8000216:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800021a:	4599      	cmp	r9, r3
 800021c:	d928      	bls.n	8000270 <__udivmoddi4+0xa4>
 800021e:	18eb      	adds	r3, r5, r3
 8000220:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x64>
 8000226:	4599      	cmp	r9, r3
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x64>
 800022a:	f1a8 0702 	sub.w	r7, r8, #2
 800022e:	442b      	add	r3, r5
 8000230:	eba3 0309 	sub.w	r3, r3, r9
 8000234:	b2a4      	uxth	r4, r4
 8000236:	fbb3 fcfe 	udiv	ip, r3, lr
 800023a:	fb0e 331c 	mls	r3, lr, ip, r3
 800023e:	fb0c f000 	mul.w	r0, ip, r0
 8000242:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000246:	42a0      	cmp	r0, r4
 8000248:	d914      	bls.n	8000274 <__udivmoddi4+0xa8>
 800024a:	192c      	adds	r4, r5, r4
 800024c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000250:	d204      	bcs.n	800025c <__udivmoddi4+0x90>
 8000252:	42a0      	cmp	r0, r4
 8000254:	d902      	bls.n	800025c <__udivmoddi4+0x90>
 8000256:	f1ac 0302 	sub.w	r3, ip, #2
 800025a:	442c      	add	r4, r5
 800025c:	1a24      	subs	r4, r4, r0
 800025e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000262:	b11e      	cbz	r6, 800026c <__udivmoddi4+0xa0>
 8000264:	40d4      	lsrs	r4, r2
 8000266:	2300      	movs	r3, #0
 8000268:	6034      	str	r4, [r6, #0]
 800026a:	6073      	str	r3, [r6, #4]
 800026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000270:	4647      	mov	r7, r8
 8000272:	e7dd      	b.n	8000230 <__udivmoddi4+0x64>
 8000274:	4663      	mov	r3, ip
 8000276:	e7f1      	b.n	800025c <__udivmoddi4+0x90>
 8000278:	bb92      	cbnz	r2, 80002e0 <__udivmoddi4+0x114>
 800027a:	1b43      	subs	r3, r0, r5
 800027c:	2101      	movs	r1, #1
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	b2af      	uxth	r7, r5
 8000284:	fbb3 fcfe 	udiv	ip, r3, lr
 8000288:	0c20      	lsrs	r0, r4, #16
 800028a:	fb0e 331c 	mls	r3, lr, ip, r3
 800028e:	fb0c f807 	mul.w	r8, ip, r7
 8000292:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000296:	4598      	cmp	r8, r3
 8000298:	d962      	bls.n	8000360 <__udivmoddi4+0x194>
 800029a:	18eb      	adds	r3, r5, r3
 800029c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002a0:	d204      	bcs.n	80002ac <__udivmoddi4+0xe0>
 80002a2:	4598      	cmp	r8, r3
 80002a4:	d902      	bls.n	80002ac <__udivmoddi4+0xe0>
 80002a6:	f1ac 0002 	sub.w	r0, ip, #2
 80002aa:	442b      	add	r3, r5
 80002ac:	eba3 0308 	sub.w	r3, r3, r8
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b6:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ba:	fb0c f707 	mul.w	r7, ip, r7
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a7      	cmp	r7, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x198>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002cc:	d204      	bcs.n	80002d8 <__udivmoddi4+0x10c>
 80002ce:	42a7      	cmp	r7, r4
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x10c>
 80002d2:	f1ac 0302 	sub.w	r3, ip, #2
 80002d6:	442c      	add	r4, r5
 80002d8:	1be4      	subs	r4, r4, r7
 80002da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002de:	e7c0      	b.n	8000262 <__udivmoddi4+0x96>
 80002e0:	f1c2 0320 	rsb	r3, r2, #32
 80002e4:	fa20 f103 	lsr.w	r1, r0, r3
 80002e8:	4095      	lsls	r5, r2
 80002ea:	4090      	lsls	r0, r2
 80002ec:	fa2e f303 	lsr.w	r3, lr, r3
 80002f0:	4303      	orrs	r3, r0
 80002f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f6:	b2af      	uxth	r7, r5
 80002f8:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fc:	fb0e 101c 	mls	r0, lr, ip, r1
 8000300:	0c19      	lsrs	r1, r3, #16
 8000302:	fb0c f807 	mul.w	r8, ip, r7
 8000306:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800030a:	4588      	cmp	r8, r1
 800030c:	fa04 f402 	lsl.w	r4, r4, r2
 8000310:	d922      	bls.n	8000358 <__udivmoddi4+0x18c>
 8000312:	1869      	adds	r1, r5, r1
 8000314:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000318:	d204      	bcs.n	8000324 <__udivmoddi4+0x158>
 800031a:	4588      	cmp	r8, r1
 800031c:	d902      	bls.n	8000324 <__udivmoddi4+0x158>
 800031e:	f1ac 0002 	sub.w	r0, ip, #2
 8000322:	4429      	add	r1, r5
 8000324:	eba1 0108 	sub.w	r1, r1, r8
 8000328:	b29b      	uxth	r3, r3
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	fb0e 111c 	mls	r1, lr, ip, r1
 8000332:	fb0c f707 	mul.w	r7, ip, r7
 8000336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033a:	429f      	cmp	r7, r3
 800033c:	d90e      	bls.n	800035c <__udivmoddi4+0x190>
 800033e:	18eb      	adds	r3, r5, r3
 8000340:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000344:	d204      	bcs.n	8000350 <__udivmoddi4+0x184>
 8000346:	429f      	cmp	r7, r3
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x184>
 800034a:	f1ac 0102 	sub.w	r1, ip, #2
 800034e:	442b      	add	r3, r5
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000356:	e792      	b.n	800027e <__udivmoddi4+0xb2>
 8000358:	4660      	mov	r0, ip
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x158>
 800035c:	4661      	mov	r1, ip
 800035e:	e7f7      	b.n	8000350 <__udivmoddi4+0x184>
 8000360:	4660      	mov	r0, ip
 8000362:	e7a3      	b.n	80002ac <__udivmoddi4+0xe0>
 8000364:	4663      	mov	r3, ip
 8000366:	e7b7      	b.n	80002d8 <__udivmoddi4+0x10c>
 8000368:	4283      	cmp	r3, r0
 800036a:	d906      	bls.n	800037a <__udivmoddi4+0x1ae>
 800036c:	b916      	cbnz	r6, 8000374 <__udivmoddi4+0x1a8>
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e77b      	b.n	800026c <__udivmoddi4+0xa0>
 8000374:	e9c6 e000 	strd	lr, r0, [r6]
 8000378:	e7f9      	b.n	800036e <__udivmoddi4+0x1a2>
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	b98f      	cbnz	r7, 80003a4 <__udivmoddi4+0x1d8>
 8000380:	4283      	cmp	r3, r0
 8000382:	d301      	bcc.n	8000388 <__udivmoddi4+0x1bc>
 8000384:	4572      	cmp	r2, lr
 8000386:	d808      	bhi.n	800039a <__udivmoddi4+0x1ce>
 8000388:	ebbe 0402 	subs.w	r4, lr, r2
 800038c:	eb60 0303 	sbc.w	r3, r0, r3
 8000390:	2001      	movs	r0, #1
 8000392:	469c      	mov	ip, r3
 8000394:	b91e      	cbnz	r6, 800039e <__udivmoddi4+0x1d2>
 8000396:	2100      	movs	r1, #0
 8000398:	e768      	b.n	800026c <__udivmoddi4+0xa0>
 800039a:	4638      	mov	r0, r7
 800039c:	e7fa      	b.n	8000394 <__udivmoddi4+0x1c8>
 800039e:	e9c6 4c00 	strd	r4, ip, [r6]
 80003a2:	e7f8      	b.n	8000396 <__udivmoddi4+0x1ca>
 80003a4:	f1c7 0c20 	rsb	ip, r7, #32
 80003a8:	40bb      	lsls	r3, r7
 80003aa:	fa22 f40c 	lsr.w	r4, r2, ip
 80003ae:	431c      	orrs	r4, r3
 80003b0:	fa2e f10c 	lsr.w	r1, lr, ip
 80003b4:	fa20 f30c 	lsr.w	r3, r0, ip
 80003b8:	40b8      	lsls	r0, r7
 80003ba:	4301      	orrs	r1, r0
 80003bc:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c0:	fa0e f507 	lsl.w	r5, lr, r7
 80003c4:	fbb3 f8f9 	udiv	r8, r3, r9
 80003c8:	fa1f fe84 	uxth.w	lr, r4
 80003cc:	fb09 3018 	mls	r0, r9, r8, r3
 80003d0:	0c0b      	lsrs	r3, r1, #16
 80003d2:	fb08 fa0e 	mul.w	sl, r8, lr
 80003d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003da:	459a      	cmp	sl, r3
 80003dc:	fa02 f207 	lsl.w	r2, r2, r7
 80003e0:	d940      	bls.n	8000464 <__udivmoddi4+0x298>
 80003e2:	18e3      	adds	r3, r4, r3
 80003e4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003e8:	d204      	bcs.n	80003f4 <__udivmoddi4+0x228>
 80003ea:	459a      	cmp	sl, r3
 80003ec:	d902      	bls.n	80003f4 <__udivmoddi4+0x228>
 80003ee:	f1a8 0002 	sub.w	r0, r8, #2
 80003f2:	4423      	add	r3, r4
 80003f4:	eba3 030a 	sub.w	r3, r3, sl
 80003f8:	b289      	uxth	r1, r1
 80003fa:	fbb3 f8f9 	udiv	r8, r3, r9
 80003fe:	fb09 3318 	mls	r3, r9, r8, r3
 8000402:	fb08 fe0e 	mul.w	lr, r8, lr
 8000406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040a:	458e      	cmp	lr, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x29c>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x254>
 8000416:	458e      	cmp	lr, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x254>
 800041a:	f1a8 0302 	sub.w	r3, r8, #2
 800041e:	4421      	add	r1, r4
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	fba0 9802 	umull	r9, r8, r0, r2
 8000428:	eba1 010e 	sub.w	r1, r1, lr
 800042c:	4541      	cmp	r1, r8
 800042e:	46ce      	mov	lr, r9
 8000430:	4643      	mov	r3, r8
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x26e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x278>
 8000436:	454d      	cmp	r5, r9
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x278>
 800043a:	ebb9 0e02 	subs.w	lr, r9, r2
 800043e:	eb68 0304 	sbc.w	r3, r8, r4
 8000442:	3801      	subs	r0, #1
 8000444:	2e00      	cmp	r6, #0
 8000446:	d0a6      	beq.n	8000396 <__udivmoddi4+0x1ca>
 8000448:	ebb5 020e 	subs.w	r2, r5, lr
 800044c:	eb61 0103 	sbc.w	r1, r1, r3
 8000450:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	ea4c 0303 	orr.w	r3, ip, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	e9c6 3100 	strd	r3, r1, [r6]
 8000462:	e798      	b.n	8000396 <__udivmoddi4+0x1ca>
 8000464:	4640      	mov	r0, r8
 8000466:	e7c5      	b.n	80003f4 <__udivmoddi4+0x228>
 8000468:	4643      	mov	r3, r8
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x254>

0800046c <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
 800046c:	b538      	push	{r3, r4, r5, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800046e:	4c10      	ldr	r4, [pc, #64]	; (80004b0 <main+0x44>)
 8000470:	4620      	mov	r0, r4
 8000472:	f002 fed2 	bl	800321a <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&led)) {
 8000476:	b1d0      	cbz	r0, 80004ae <main+0x42>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8000478:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
 800047a:	68a5      	ldr	r5, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800047c:	6813      	ldr	r3, [r2, #0]
 800047e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000482:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
 8000484:	682b      	ldr	r3, [r5, #0]
 8000486:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800048a:	210d      	movs	r1, #13
 800048c:	4620      	mov	r0, r4
 800048e:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
 8000490:	2800      	cmp	r0, #0
 8000492:	db0c      	blt.n	80004ae <main+0x42>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
 8000494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000498:	696b      	ldr	r3, [r5, #20]
 800049a:	4620      	mov	r0, r4
 800049c:	4798      	blx	r3
		return;
	}

	while (1) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
 800049e:	2800      	cmp	r0, #0
 80004a0:	db05      	blt.n	80004ae <main+0x42>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80004a2:	2100      	movs	r1, #0
 80004a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80004a8:	f002 f864 	bl	8002574 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80004ac:	e7f2      	b.n	8000494 <main+0x28>
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
 80004ae:	bd38      	pop	{r3, r4, r5, pc}
 80004b0:	080034d8 	.word	0x080034d8

080004b4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80004b4:	4b01      	ldr	r3, [pc, #4]	; (80004bc <char_out+0x8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4718      	bx	r3
 80004ba:	bf00      	nop
 80004bc:	20000000 	.word	0x20000000

080004c0 <__printk_hook_install>:
	_char_out = fn;
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <__printk_hook_install+0x8>)
 80004c2:	6018      	str	r0, [r3, #0]
}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000

080004cc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80004cc:	b507      	push	{r0, r1, r2, lr}
 80004ce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80004d0:	2100      	movs	r1, #0
 80004d2:	4602      	mov	r2, r0
 80004d4:	9100      	str	r1, [sp, #0]
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <vprintk+0x18>)
 80004d8:	f000 f806 	bl	80004e8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80004dc:	b003      	add	sp, #12
 80004de:	f85d fb04 	ldr.w	pc, [sp], #4
 80004e2:	bf00      	nop
 80004e4:	080004b5 	.word	0x080004b5

080004e8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80004e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004ec:	4681      	mov	r9, r0
 80004ee:	b095      	sub	sp, #84	; 0x54
 80004f0:	468b      	mov	fp, r1
 80004f2:	4617      	mov	r7, r2
 80004f4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80004f6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80004f8:	7838      	ldrb	r0, [r7, #0]
 80004fa:	b908      	cbnz	r0, 8000500 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80004fc:	4628      	mov	r0, r5
 80004fe:	e358      	b.n	8000bb2 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000500:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000502:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000504:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 8000506:	d006      	beq.n	8000516 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000508:	4659      	mov	r1, fp
 800050a:	47c8      	blx	r9
 800050c:	2800      	cmp	r0, #0
 800050e:	f2c0 8350 	blt.w	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000512:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000514:	e1fb      	b.n	800090e <z_cbvprintf_impl+0x426>
		} state = {
 8000516:	2218      	movs	r2, #24
 8000518:	2100      	movs	r1, #0
 800051a:	a80e      	add	r0, sp, #56	; 0x38
 800051c:	f002 faae 	bl	8002a7c <memset>
	if (*sp == '%') {
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	2b25      	cmp	r3, #37	; 0x25
 8000524:	d07d      	beq.n	8000622 <z_cbvprintf_impl+0x13a>
 8000526:	2300      	movs	r3, #0
 8000528:	1c78      	adds	r0, r7, #1
 800052a:	4698      	mov	r8, r3
 800052c:	469e      	mov	lr, r3
 800052e:	469c      	mov	ip, r3
 8000530:	461e      	mov	r6, r3
 8000532:	4601      	mov	r1, r0
		switch (*sp) {
 8000534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000538:	2a2b      	cmp	r2, #43	; 0x2b
 800053a:	f000 80a1 	beq.w	8000680 <z_cbvprintf_impl+0x198>
 800053e:	f200 8098 	bhi.w	8000672 <z_cbvprintf_impl+0x18a>
 8000542:	2a20      	cmp	r2, #32
 8000544:	f000 809f 	beq.w	8000686 <z_cbvprintf_impl+0x19e>
 8000548:	2a23      	cmp	r2, #35	; 0x23
 800054a:	f000 809f 	beq.w	800068c <z_cbvprintf_impl+0x1a4>
 800054e:	b12b      	cbz	r3, 800055c <z_cbvprintf_impl+0x74>
 8000550:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000558:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800055c:	f1b8 0f00 	cmp.w	r8, #0
 8000560:	d005      	beq.n	800056e <z_cbvprintf_impl+0x86>
 8000562:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800056e:	f1be 0f00 	cmp.w	lr, #0
 8000572:	d005      	beq.n	8000580 <z_cbvprintf_impl+0x98>
 8000574:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000578:	f043 0310 	orr.w	r3, r3, #16
 800057c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000580:	f1bc 0f00 	cmp.w	ip, #0
 8000584:	d005      	beq.n	8000592 <z_cbvprintf_impl+0xaa>
 8000586:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000592:	b12e      	cbz	r6, 80005a0 <z_cbvprintf_impl+0xb8>
 8000594:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 80005a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005a4:	f003 0044 	and.w	r0, r3, #68	; 0x44
 80005a8:	2844      	cmp	r0, #68	; 0x44
 80005aa:	d103      	bne.n	80005b4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80005ac:	f36f 1386 	bfc	r3, #6, #1
 80005b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 80005b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80005b8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80005ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80005c2:	d17f      	bne.n	80006c4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 80005c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80005c8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 80005cc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80005ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	2a2e      	cmp	r2, #46	; 0x2e
 80005d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80005da:	bf0c      	ite	eq
 80005dc:	2101      	moveq	r1, #1
 80005de:	2100      	movne	r1, #0
 80005e0:	f361 0241 	bfi	r2, r1, #1, #1
 80005e4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 80005e8:	d178      	bne.n	80006dc <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 80005ea:	785a      	ldrb	r2, [r3, #1]
 80005ec:	2a2a      	cmp	r2, #42	; 0x2a
 80005ee:	d06e      	beq.n	80006ce <z_cbvprintf_impl+0x1e6>
	++sp;
 80005f0:	3301      	adds	r3, #1
	size_t val = 0;
 80005f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80005f4:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80005f8:	4619      	mov	r1, r3
 80005fa:	f811 0b01 	ldrb.w	r0, [r1], #1
 80005fe:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000602:	2e09      	cmp	r6, #9
 8000604:	f240 8095 	bls.w	8000732 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000608:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 800060c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 800060e:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000612:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000616:	460a      	mov	r2, r1
 8000618:	f360 0241 	bfi	r2, r0, #1, #1
 800061c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000620:	e05c      	b.n	80006dc <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000622:	1cba      	adds	r2, r7, #2
 8000624:	9203      	str	r2, [sp, #12]
 8000626:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 800062a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800062e:	07da      	lsls	r2, r3, #31
 8000630:	f140 812e 	bpl.w	8000890 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000634:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000638:	f1b8 0f00 	cmp.w	r8, #0
 800063c:	da07      	bge.n	800064e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 800063e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000642:	f042 0204 	orr.w	r2, r2, #4
 8000646:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 800064a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 800064e:	075e      	lsls	r6, r3, #29
 8000650:	f140 8127 	bpl.w	80008a2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000654:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000658:	f1ba 0f00 	cmp.w	sl, #0
 800065c:	f280 8126 	bge.w	80008ac <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000660:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000664:	f36f 0341 	bfc	r3, #1, #1
 8000668:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 800066c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000670:	e11c      	b.n	80008ac <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 8000672:	2a2d      	cmp	r2, #45	; 0x2d
 8000674:	d00d      	beq.n	8000692 <z_cbvprintf_impl+0x1aa>
 8000676:	2a30      	cmp	r2, #48	; 0x30
 8000678:	f47f af69 	bne.w	800054e <z_cbvprintf_impl+0x66>
 800067c:	2301      	movs	r3, #1
	} while (loop);
 800067e:	e758      	b.n	8000532 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e755      	b.n	8000532 <z_cbvprintf_impl+0x4a>
 8000686:	f04f 0e01 	mov.w	lr, #1
 800068a:	e752      	b.n	8000532 <z_cbvprintf_impl+0x4a>
 800068c:	f04f 0801 	mov.w	r8, #1
 8000690:	e74f      	b.n	8000532 <z_cbvprintf_impl+0x4a>
 8000692:	2601      	movs	r6, #1
 8000694:	e74d      	b.n	8000532 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 8000696:	fb0e 6202 	mla	r2, lr, r2, r6
 800069a:	3a30      	subs	r2, #48	; 0x30
 800069c:	4603      	mov	r3, r0
 800069e:	4618      	mov	r0, r3
 80006a0:	f810 6b01 	ldrb.w	r6, [r0], #1
 80006a4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006a8:	f1bc 0f09 	cmp.w	ip, #9
 80006ac:	d9f3      	bls.n	8000696 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 80006ae:	4299      	cmp	r1, r3
 80006b0:	d08f      	beq.n	80005d2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80006b2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 80006b6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80006b8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80006ba:	f362 0141 	bfi	r1, r2, #1, #1
 80006be:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80006c2:	e786      	b.n	80005d2 <z_cbvprintf_impl+0xea>
 80006c4:	460b      	mov	r3, r1
	size_t val = 0;
 80006c6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80006c8:	f04f 0e0a 	mov.w	lr, #10
 80006cc:	e7e7      	b.n	800069e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 80006ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80006d2:	f042 0204 	orr.w	r2, r2, #4
 80006d6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80006da:	3302      	adds	r3, #2
	switch (*sp) {
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	2a6c      	cmp	r2, #108	; 0x6c
 80006e0:	d047      	beq.n	8000772 <z_cbvprintf_impl+0x28a>
 80006e2:	d82b      	bhi.n	800073c <z_cbvprintf_impl+0x254>
 80006e4:	2a68      	cmp	r2, #104	; 0x68
 80006e6:	d031      	beq.n	800074c <z_cbvprintf_impl+0x264>
 80006e8:	2a6a      	cmp	r2, #106	; 0x6a
 80006ea:	d04b      	beq.n	8000784 <z_cbvprintf_impl+0x29c>
 80006ec:	2a4c      	cmp	r2, #76	; 0x4c
 80006ee:	d051      	beq.n	8000794 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 80006f0:	461a      	mov	r2, r3
 80006f2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80006f6:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 80006f8:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 80006fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 80006fe:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 8000702:	f200 80be 	bhi.w	8000882 <z_cbvprintf_impl+0x39a>
 8000706:	2b6d      	cmp	r3, #109	; 0x6d
 8000708:	d851      	bhi.n	80007ae <z_cbvprintf_impl+0x2c6>
 800070a:	2b69      	cmp	r3, #105	; 0x69
 800070c:	f200 80b9 	bhi.w	8000882 <z_cbvprintf_impl+0x39a>
 8000710:	2b57      	cmp	r3, #87	; 0x57
 8000712:	d867      	bhi.n	80007e4 <z_cbvprintf_impl+0x2fc>
 8000714:	2b41      	cmp	r3, #65	; 0x41
 8000716:	d003      	beq.n	8000720 <z_cbvprintf_impl+0x238>
 8000718:	3b45      	subs	r3, #69	; 0x45
 800071a:	2b02      	cmp	r3, #2
 800071c:	f200 80b1 	bhi.w	8000882 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000720:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000724:	2204      	movs	r2, #4
 8000726:	f362 0302 	bfi	r3, r2, #0, #3
 800072a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 800072e:	2301      	movs	r3, #1
			break;
 8000730:	e073      	b.n	800081a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 8000732:	fb0c 0202 	mla	r2, ip, r2, r0
 8000736:	3a30      	subs	r2, #48	; 0x30
 8000738:	460b      	mov	r3, r1
 800073a:	e75d      	b.n	80005f8 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 800073c:	2a74      	cmp	r2, #116	; 0x74
 800073e:	d025      	beq.n	800078c <z_cbvprintf_impl+0x2a4>
 8000740:	2a7a      	cmp	r2, #122	; 0x7a
 8000742:	d1d5      	bne.n	80006f0 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8000744:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000748:	2106      	movs	r1, #6
 800074a:	e00c      	b.n	8000766 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 800074c:	785a      	ldrb	r2, [r3, #1]
 800074e:	2a68      	cmp	r2, #104	; 0x68
 8000750:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000754:	d106      	bne.n	8000764 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 8000756:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000758:	f361 02c6 	bfi	r2, r1, #3, #4
 800075c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8000760:	3302      	adds	r3, #2
 8000762:	e7c5      	b.n	80006f0 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 8000764:	2102      	movs	r1, #2
 8000766:	f361 02c6 	bfi	r2, r1, #3, #4
 800076a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 800076e:	3301      	adds	r3, #1
 8000770:	e7be      	b.n	80006f0 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 8000772:	785a      	ldrb	r2, [r3, #1]
 8000774:	2a6c      	cmp	r2, #108	; 0x6c
 8000776:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800077a:	d101      	bne.n	8000780 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 800077c:	2104      	movs	r1, #4
 800077e:	e7eb      	b.n	8000758 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 8000780:	2103      	movs	r1, #3
 8000782:	e7f0      	b.n	8000766 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 8000784:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000788:	2105      	movs	r1, #5
 800078a:	e7ec      	b.n	8000766 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 800078c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000790:	2107      	movs	r1, #7
 8000792:	e7e8      	b.n	8000766 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 8000794:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8000798:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800079c:	f022 0202 	bic.w	r2, r2, #2
 80007a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007a4:	f042 0202 	orr.w	r2, r2, #2
 80007a8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80007ac:	e7df      	b.n	800076e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80007ae:	3b6e      	subs	r3, #110	; 0x6e
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	2301      	movs	r3, #1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	f240 4182 	movw	r1, #1154	; 0x482
 80007ba:	420b      	tst	r3, r1
 80007bc:	d137      	bne.n	800082e <z_cbvprintf_impl+0x346>
 80007be:	f013 0f24 	tst.w	r3, #36	; 0x24
 80007c2:	d151      	bne.n	8000868 <z_cbvprintf_impl+0x380>
 80007c4:	07d8      	lsls	r0, r3, #31
 80007c6:	d55c      	bpl.n	8000882 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80007c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80007cc:	2103      	movs	r1, #3
 80007ce:	f361 0302 	bfi	r3, r1, #0, #3
 80007d2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007d6:	f002 0378 	and.w	r3, r2, #120	; 0x78
 80007da:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80007de:	424b      	negs	r3, r1
 80007e0:	414b      	adcs	r3, r1
 80007e2:	e01a      	b.n	800081a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 80007e4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 80007e8:	b2c9      	uxtb	r1, r1
 80007ea:	2001      	movs	r0, #1
 80007ec:	fa00 f101 	lsl.w	r1, r0, r1
 80007f0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80007f4:	d194      	bne.n	8000720 <z_cbvprintf_impl+0x238>
 80007f6:	f640 0601 	movw	r6, #2049	; 0x801
 80007fa:	4231      	tst	r1, r6
 80007fc:	d11d      	bne.n	800083a <z_cbvprintf_impl+0x352>
 80007fe:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8000802:	d03e      	beq.n	8000882 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8000804:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000808:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800080c:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000810:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 8000812:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000816:	d034      	beq.n	8000882 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000818:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 800081a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800081e:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000822:	430b      	orrs	r3, r1
 8000824:	f363 0241 	bfi	r2, r3, #1, #1
 8000828:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 800082c:	e6fd      	b.n	800062a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 800082e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000832:	2102      	movs	r1, #2
 8000834:	f361 0302 	bfi	r3, r1, #0, #3
 8000838:	e7e8      	b.n	800080c <z_cbvprintf_impl+0x324>
 800083a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 800083e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000840:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000844:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000848:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800084a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 800084e:	bf02      	ittt	eq
 8000850:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000854:	f041 0101 	orreq.w	r1, r1, #1
 8000858:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	d1db      	bne.n	8000818 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000860:	1e13      	subs	r3, r2, #0
 8000862:	bf18      	it	ne
 8000864:	2301      	movne	r3, #1
 8000866:	e7d8      	b.n	800081a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000868:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800086c:	2103      	movs	r1, #3
 800086e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000872:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000876:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	e7cb      	b.n	800081a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 8000882:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 800088e:	e7c3      	b.n	8000818 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 8000890:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8000894:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000896:	bfb4      	ite	lt
 8000898:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 800089c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 80008a0:	e6d5      	b.n	800064e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80008a2:	0798      	lsls	r0, r3, #30
 80008a4:	f57f aee2 	bpl.w	800066c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80008a8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 80008ac:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 80008b0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80008b2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80008b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 80008ba:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80008be:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80008c0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80008c4:	d133      	bne.n	800092e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 80008c6:	1ecb      	subs	r3, r1, #3
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d804      	bhi.n	80008d6 <z_cbvprintf_impl+0x3ee>
 80008cc:	e8df f003 	tbb	[pc, r3]
 80008d0:	21464621 	.word	0x21464621
 80008d4:	21          	.byte	0x21
 80008d5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80008d6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80008d8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 80008da:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80008de:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80008e2:	d11c      	bne.n	800091e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 80008e4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 80008e8:	17da      	asrs	r2, r3, #31
 80008ea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 80008ee:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80008f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80008f4:	f013 0603 	ands.w	r6, r3, #3
 80008f8:	d050      	beq.n	800099c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 80008fa:	9b03      	ldr	r3, [sp, #12]
 80008fc:	463a      	mov	r2, r7
 80008fe:	4659      	mov	r1, fp
 8000900:	4648      	mov	r0, r9
 8000902:	f002 f875 	bl	80029f0 <outs>
 8000906:	2800      	cmp	r0, #0
 8000908:	f2c0 8153 	blt.w	8000bb2 <z_cbvprintf_impl+0x6ca>
 800090c:	4405      	add	r5, r0
			continue;
 800090e:	9f03      	ldr	r7, [sp, #12]
 8000910:	e5f2      	b.n	80004f8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000912:	f854 3b04 	ldr.w	r3, [r4], #4
 8000916:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000918:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800091c:	e7e8      	b.n	80008f0 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 800091e:	2902      	cmp	r1, #2
 8000920:	d1e5      	bne.n	80008ee <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000922:	b21a      	sxth	r2, r3
 8000924:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000928:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800092c:	e7df      	b.n	80008ee <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 800092e:	2b02      	cmp	r3, #2
 8000930:	d124      	bne.n	800097c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000932:	1ecb      	subs	r3, r1, #3
 8000934:	2b04      	cmp	r3, #4
 8000936:	d804      	bhi.n	8000942 <z_cbvprintf_impl+0x45a>
 8000938:	e8df f003 	tbb	[pc, r3]
 800093c:	18101018 	.word	0x18101018
 8000940:	18          	.byte	0x18
 8000941:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000942:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8000944:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000948:	f04f 0200 	mov.w	r2, #0
 800094c:	d014      	beq.n	8000978 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 800094e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000950:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000954:	d1cc      	bne.n	80008f0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000956:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000958:	930e      	str	r3, [sp, #56]	; 0x38
 800095a:	e7c9      	b.n	80008f0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 800095c:	3407      	adds	r4, #7
 800095e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000962:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000966:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 800096a:	e7c1      	b.n	80008f0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 800096c:	f854 3b04 	ldr.w	r3, [r4], #4
 8000970:	930e      	str	r3, [sp, #56]	; 0x38
 8000972:	2300      	movs	r3, #0
 8000974:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000976:	e7bb      	b.n	80008f0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000978:	b2db      	uxtb	r3, r3
 800097a:	e7cd      	b.n	8000918 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 800097c:	2b04      	cmp	r3, #4
 800097e:	d108      	bne.n	8000992 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000980:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000982:	f024 0407 	bic.w	r4, r4, #7
 8000986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800098a:	3408      	adds	r4, #8
 800098c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000990:	e7ae      	b.n	80008f0 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000992:	2b03      	cmp	r3, #3
 8000994:	d1ac      	bne.n	80008f0 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000996:	f854 3b04 	ldr.w	r3, [r4], #4
 800099a:	e7dd      	b.n	8000958 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 800099c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 80009a0:	2878      	cmp	r0, #120	; 0x78
 80009a2:	d8b4      	bhi.n	800090e <z_cbvprintf_impl+0x426>
 80009a4:	2862      	cmp	r0, #98	; 0x62
 80009a6:	d81c      	bhi.n	80009e2 <z_cbvprintf_impl+0x4fa>
 80009a8:	2825      	cmp	r0, #37	; 0x25
 80009aa:	f43f adad 	beq.w	8000508 <z_cbvprintf_impl+0x20>
 80009ae:	2858      	cmp	r0, #88	; 0x58
 80009b0:	d1ad      	bne.n	800090e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80009b2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80009bc:	ab08      	add	r3, sp, #32
 80009be:	aa10      	add	r2, sp, #64	; 0x40
 80009c0:	f001 ffd0 	bl	8002964 <encode_uint>
			if (precision >= 0) {
 80009c4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 80009c8:	4607      	mov	r7, r0
			if (precision >= 0) {
 80009ca:	f280 809a 	bge.w	8000b02 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d09d      	beq.n	800090e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 80009d2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80009d6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 80009d8:	2e00      	cmp	r6, #0
 80009da:	f000 80c1 	beq.w	8000b60 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 80009de:	3001      	adds	r0, #1
 80009e0:	e0be      	b.n	8000b60 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 80009e2:	3863      	subs	r0, #99	; 0x63
 80009e4:	2815      	cmp	r0, #21
 80009e6:	d892      	bhi.n	800090e <z_cbvprintf_impl+0x426>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <z_cbvprintf_impl+0x508>)
 80009ea:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000ac5 	.word	0x08000ac5
 80009f4:	08000ad7 	.word	0x08000ad7
 80009f8:	0800090f 	.word	0x0800090f
 80009fc:	0800090f 	.word	0x0800090f
 8000a00:	0800090f 	.word	0x0800090f
 8000a04:	0800090f 	.word	0x0800090f
 8000a08:	08000ad7 	.word	0x08000ad7
 8000a0c:	0800090f 	.word	0x0800090f
 8000a10:	0800090f 	.word	0x0800090f
 8000a14:	0800090f 	.word	0x0800090f
 8000a18:	0800090f 	.word	0x0800090f
 8000a1c:	08000b65 	.word	0x08000b65
 8000a20:	08000afd 	.word	0x08000afd
 8000a24:	08000b23 	.word	0x08000b23
 8000a28:	0800090f 	.word	0x0800090f
 8000a2c:	0800090f 	.word	0x0800090f
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	0800090f 	.word	0x0800090f
 8000a38:	08000afd 	.word	0x08000afd
 8000a3c:	0800090f 	.word	0x0800090f
 8000a40:	0800090f 	.word	0x0800090f
 8000a44:	08000afd 	.word	0x08000afd
			if (precision >= 0) {
 8000a48:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000a4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000a4e:	db35      	blt.n	8000abc <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000a50:	4651      	mov	r1, sl
 8000a52:	4638      	mov	r0, r7
 8000a54:	f001 fffe 	bl	8002a54 <strnlen>
			bpe = bps + len;
 8000a58:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000a5c:	2f00      	cmp	r7, #0
 8000a5e:	f43f af56 	beq.w	800090e <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000a62:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000a64:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000a68:	f013 0210 	ands.w	r2, r3, #16
 8000a6c:	9205      	str	r2, [sp, #20]
 8000a6e:	f000 8093 	beq.w	8000b98 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8000a72:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000a74:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000a78:	bf48      	it	mi
 8000a7a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000a7c:	9204      	str	r2, [sp, #16]
 8000a7e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000a80:	bf48      	it	mi
 8000a82:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000a84:	f1b8 0f00 	cmp.w	r8, #0
 8000a88:	f340 80a0 	ble.w	8000bcc <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
 8000a8c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000a90:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000a94:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000a98:	0750      	lsls	r0, r2, #29
 8000a9a:	9306      	str	r3, [sp, #24]
 8000a9c:	f100 8096 	bmi.w	8000bcc <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
 8000aa0:	0651      	lsls	r1, r2, #25
 8000aa2:	f140 8089 	bpl.w	8000bb8 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8000aa6:	b13e      	cbz	r6, 8000ab8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000aa8:	4659      	mov	r1, fp
 8000aaa:	4630      	mov	r0, r6
 8000aac:	47c8      	blx	r9
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	db7f      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000ab2:	9b06      	ldr	r3, [sp, #24]
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	461e      	mov	r6, r3
					pad = '0';
 8000ab8:	2230      	movs	r2, #48	; 0x30
 8000aba:	e07e      	b.n	8000bba <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8000abc:	4638      	mov	r0, r7
 8000abe:	f001 ffc2 	bl	8002a46 <strlen>
 8000ac2:	e7c9      	b.n	8000a58 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000ac6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000aca:	2600      	movs	r6, #0
			bps = buf;
 8000acc:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000ace:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e7c6      	b.n	8000a64 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000ad6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000ad8:	bf5c      	itt	pl
 8000ada:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000ade:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000ae0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000ae4:	bf48      	it	mi
 8000ae6:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f6bf af62 	bge.w	80009b2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000aee:	4252      	negs	r2, r2
 8000af0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000af8:	262d      	movs	r6, #45	; 0x2d
 8000afa:	e75a      	b.n	80009b2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000afc:	2600      	movs	r6, #0
 8000afe:	e758      	b.n	80009b2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000b00:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000b02:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000b06:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b0a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000b0c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b10:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000b12:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000b16:	f67f af5a 	bls.w	80009ce <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8000b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8000b20:	e755      	b.n	80009ce <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000b22:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000b24:	b390      	cbz	r0, 8000b8c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b26:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	aa10      	add	r2, sp, #64	; 0x40
 8000b2e:	ab08      	add	r3, sp, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	f001 ff17 	bl	8002964 <encode_uint>
				conv->altform_0c = true;
 8000b36:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000b3a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000b3e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000b42:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000b46:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b4a:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000b4c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000b50:	dad6      	bge.n	8000b00 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000b52:	2800      	cmp	r0, #0
 8000b54:	f43f aedb 	beq.w	800090e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000b58:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b5c:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000b5e:	2600      	movs	r6, #0
 8000b60:	469a      	mov	sl, r3
 8000b62:	e77f      	b.n	8000a64 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000b66:	2907      	cmp	r1, #7
 8000b68:	f63f aed1 	bhi.w	800090e <z_cbvprintf_impl+0x426>
 8000b6c:	e8df f001 	tbb	[pc, r1]
 8000b70:	0c06040c 	.word	0x0c06040c
 8000b74:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000b78:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000b7a:	e6c8      	b.n	800090e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000b7c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000b7e:	e6c6      	b.n	800090e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000b80:	17ea      	asrs	r2, r5, #31
 8000b82:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000b86:	e6c2      	b.n	800090e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000b88:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000b8a:	e6c0      	b.n	800090e <z_cbvprintf_impl+0x426>
 8000b8c:	4f2e      	ldr	r7, [pc, #184]	; (8000c48 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000b8e:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000b90:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000b94:	2005      	movs	r0, #5
 8000b96:	e765      	b.n	8000a64 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000b98:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000b9a:	bf48      	it	mi
 8000b9c:	3001      	addmi	r0, #1
 8000b9e:	e769      	b.n	8000a74 <z_cbvprintf_impl+0x58c>
 8000ba0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	9206      	str	r2, [sp, #24]
 8000ba6:	4659      	mov	r1, fp
 8000ba8:	47c8      	blx	r9
 8000baa:	2800      	cmp	r0, #0
 8000bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000bb0:	da04      	bge.n	8000bbc <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 8000bb2:	b015      	add	sp, #84	; 0x54
 8000bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000bb8:	2220      	movs	r2, #32
					pad = '0';
 8000bba:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bc4:	dcec      	bgt.n	8000ba0 <z_cbvprintf_impl+0x6b8>
 8000bc6:	4445      	add	r5, r8
 8000bc8:	1a6d      	subs	r5, r5, r1
 8000bca:	4698      	mov	r8, r3
		if (sign != 0) {
 8000bcc:	b12e      	cbz	r6, 8000bda <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
 8000bce:	4659      	mov	r1, fp
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	47c8      	blx	r9
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	dbec      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000bd8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000bda:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000bde:	06da      	lsls	r2, r3, #27
 8000be0:	d401      	bmi.n	8000be6 <z_cbvprintf_impl+0x6fe>
 8000be2:	071b      	lsls	r3, r3, #28
 8000be4:	d505      	bpl.n	8000bf2 <z_cbvprintf_impl+0x70a>
				OUTC('0');
 8000be6:	4659      	mov	r1, fp
 8000be8:	2030      	movs	r0, #48	; 0x30
 8000bea:	47c8      	blx	r9
 8000bec:	2800      	cmp	r0, #0
 8000bee:	dbe0      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000bf0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000bf2:	9b05      	ldr	r3, [sp, #20]
 8000bf4:	b133      	cbz	r3, 8000c04 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
 8000bf6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000bfa:	4659      	mov	r1, fp
 8000bfc:	47c8      	blx	r9
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	dbd7      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000c02:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c04:	9e04      	ldr	r6, [sp, #16]
 8000c06:	442e      	add	r6, r5
 8000c08:	e005      	b.n	8000c16 <z_cbvprintf_impl+0x72e>
				OUTC('0');
 8000c0a:	4659      	mov	r1, fp
 8000c0c:	2030      	movs	r0, #48	; 0x30
 8000c0e:	47c8      	blx	r9
 8000c10:	2800      	cmp	r0, #0
 8000c12:	dbce      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000c14:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c16:	1b73      	subs	r3, r6, r5
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dcf6      	bgt.n	8000c0a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	463a      	mov	r2, r7
 8000c20:	4659      	mov	r1, fp
 8000c22:	4648      	mov	r0, r9
 8000c24:	f001 fee4 	bl	80029f0 <outs>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	dbc2      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000c2c:	4405      	add	r5, r0
		while (width > 0) {
 8000c2e:	44a8      	add	r8, r5
 8000c30:	eba8 0305 	sub.w	r3, r8, r5
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f77f ae6a 	ble.w	800090e <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000c3a:	4659      	mov	r1, fp
 8000c3c:	2020      	movs	r0, #32
 8000c3e:	47c8      	blx	r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	dbb6      	blt.n	8000bb2 <z_cbvprintf_impl+0x6ca>
 8000c44:	3501      	adds	r5, #1
			--width;
 8000c46:	e7f3      	b.n	8000c30 <z_cbvprintf_impl+0x748>
 8000c48:	08003aab 	.word	0x08003aab

08000c4c <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <st_stm32f4_init+0x34>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c54:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c5c:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000c5e:	f04f 0210 	mov.w	r2, #16
 8000c62:	f3ef 8311 	mrs	r3, BASEPRI
 8000c66:	f382 8812 	msr	BASEPRI_MAX, r2
 8000c6a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000c6e:	f383 8811 	msr	BASEPRI, r3
 8000c72:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <st_stm32f4_init+0x38>)
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <st_stm32f4_init+0x3c>)
 8000c7a:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	4770      	bx	lr
 8000c80:	40023c00 	.word	0x40023c00
 8000c84:	2000003c 	.word	0x2000003c
 8000c88:	00f42400 	.word	0x00f42400

08000c8c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000c8c:	4901      	ldr	r1, [pc, #4]	; (8000c94 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000c8e:	2210      	movs	r2, #16
	str	r2, [r1]
 8000c90:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000c92:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000c94:	e000ed10 	.word	0xe000ed10

08000c98 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000c98:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000c9a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000c9c:	f380 8811 	msr	BASEPRI, r0
	isb
 8000ca0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000ca4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000ca8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000caa:	b662      	cpsie	i
	isb
 8000cac:	f3bf 8f6f 	isb	sy

	bx	lr
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000cb4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	db07      	blt.n	8000cca <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <arch_irq_enable+0x18>)
 8000cbc:	0941      	lsrs	r1, r0, #5
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f000 001f 	and.w	r0, r0, #31
 8000cc4:	4083      	lsls	r3, r0
 8000cc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000cd0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	bfa8      	it	ge
 8000cd6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000cda:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	bfb8      	it	lt
 8000ce0:	4b06      	ldrlt	r3, [pc, #24]	; (8000cfc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000ce6:	bfac      	ite	ge
 8000ce8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	bfb4      	ite	lt
 8000cf4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed14 	.word	0xe000ed14

08000d00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000d00:	bf30      	wfi
    b z_SysNmiOnReset
 8000d02:	f7ff bffd 	b.w	8000d00 <z_SysNmiOnReset>
 8000d06:	bf00      	nop

08000d08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000d0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <z_arm_prep_c+0x44>)
 8000d0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d12:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d28:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000d2c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d30:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000d34:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000d38:	f001 f8ae 	bl	8001e98 <z_bss_zero>
	z_data_copy();
 8000d3c:	f001 fc98 	bl	8002670 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000d40:	f000 f9ca 	bl	80010d8 <z_arm_interrupt_init>
	z_cstart();
 8000d44:	f001 f8ec 	bl	8001f20 <z_cstart>
 8000d48:	08000000 	.word	0x08000000
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000d54:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d56:	6809      	ldr	r1, [r1, #0]
 8000d58:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d5a:	4909      	ldr	r1, [pc, #36]	; (8000d80 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000d5c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d5e:	684b      	ldr	r3, [r1, #4]
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	604b      	str	r3, [r1, #4]
 8000d66:	2300      	movs	r3, #0
 8000d68:	f383 8811 	msr	BASEPRI, r3
 8000d6c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000d70:	6893      	ldr	r3, [r2, #8]
}
 8000d72:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200002bc 	.word	0x200002bc
 8000d7c:	08003a78 	.word	0x08003a78
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000d84:	4912      	ldr	r1, [pc, #72]	; (8000dd0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000d86:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000d88:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000d8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000d8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000d92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000d96:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000d98:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000d9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000da0:	4f0c      	ldr	r7, [pc, #48]	; (8000dd4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000da2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000da6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000da8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000daa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000dac:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000dae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000db0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000db2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000db6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000db8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000dba:	f000 f9d1 	bl	8001160 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000dbe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000dc2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000dc6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000dca:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000dce:	4770      	bx	lr
    ldr r1, =_kernel
 8000dd0:	200002bc 	.word	0x200002bc
    ldr v4, =_SCS_ICSR
 8000dd4:	e000ed04 	.word	0xe000ed04

08000dd8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000dd8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000ddc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000dde:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000de2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000de6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000de8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000dec:	2902      	cmp	r1, #2
    beq _oops
 8000dee:	d0ff      	beq.n	8000df0 <_oops>

08000df0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000df0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000df2:	f001 fe19 	bl	8002a28 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000df6:	bd01      	pop	{r0, pc}

08000df8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000df8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000dfc:	9b00      	ldr	r3, [sp, #0]
 8000dfe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e0a:	9b02      	ldr	r3, [sp, #8]
 8000e0c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000e10:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e18:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000e1c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000e20:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000e22:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000e24:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000e26:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	08002951 	.word	0x08002951

08000e30 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <z_check_thread_stack_fail+0x28>)
{
 8000e32:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000e34:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000e36:	b170      	cbz	r0, 8000e56 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000e38:	f113 0f16 	cmn.w	r3, #22
 8000e3c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000e3e:	d005      	beq.n	8000e4c <z_check_thread_stack_fail+0x1c>
 8000e40:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d805      	bhi.n	8000e54 <z_check_thread_stack_fail+0x24>
 8000e48:	4283      	cmp	r3, r0
 8000e4a:	d203      	bcs.n	8000e54 <z_check_thread_stack_fail+0x24>
		return 0;
 8000e4c:	4281      	cmp	r1, r0
 8000e4e:	bf28      	it	cs
 8000e50:	2000      	movcs	r0, #0
 8000e52:	4770      	bx	lr
 8000e54:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8000e56:	4770      	bx	lr
 8000e58:	200002bc 	.word	0x200002bc

08000e5c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000e5c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <arch_switch_to_main_thread+0x28>)
 8000e60:	6098      	str	r0, [r3, #8]
{
 8000e62:	460d      	mov	r5, r1
 8000e64:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000e66:	f000 f97b 	bl	8001160 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f385 8809 	msr	PSP, r5
 8000e70:	2100      	movs	r1, #0
 8000e72:	b663      	cpsie	if
 8000e74:	f381 8811 	msr	BASEPRI, r1
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f001 fd66 	bl	8002950 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000e84:	200002bc 	.word	0x200002bc

08000e88 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000e88:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000e8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000e8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000e92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000e96:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000e98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000e9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000e9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000e9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000ea2:	4902      	ldr	r1, [pc, #8]	; (8000eac <_isr_wrapper+0x24>)
	bx r1
 8000ea4:	4708      	bx	r1
 8000ea6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000ea8:	08003568 	.word	0x08003568
	ldr r1, =z_arm_int_exit
 8000eac:	08000eb1 	.word	0x08000eb1

08000eb0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000eb2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000eb4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000eb6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000eb8:	d003      	beq.n	8000ec2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000eba:	4903      	ldr	r1, [pc, #12]	; (8000ec8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000ec0:	600a      	str	r2, [r1, #0]

08000ec2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000ec2:	4770      	bx	lr
	ldr r3, =_kernel
 8000ec4:	200002bc 	.word	0x200002bc
	ldr r1, =_SCS_ICSR
 8000ec8:	e000ed04 	.word	0xe000ed04

08000ecc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <mem_manage_fault+0x78>)
{
 8000ed0:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ed8:	0792      	lsls	r2, r2, #30
{
 8000eda:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000edc:	d522      	bpl.n	8000f24 <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8000ede:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ee2:	0614      	lsls	r4, r2, #24
 8000ee4:	d51e      	bpl.n	8000f24 <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8000ee6:	b119      	cbz	r1, 8000ef0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ef6:	4c13      	ldr	r4, [pc, #76]	; (8000f44 <mem_manage_fault+0x78>)
 8000ef8:	f012 0f10 	tst.w	r2, #16
 8000efc:	d115      	bne.n	8000f2a <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f00:	0799      	lsls	r1, r3, #30
 8000f02:	d412      	bmi.n	8000f2a <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8000f04:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f0a:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8000f0c:	bf42      	ittt	mi
 8000f0e:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8000f10:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 8000f14:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f16:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000f18:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000f1c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	702b      	strb	r3, [r5, #0]

	return reason;
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8000f24:	f06f 0015 	mvn.w	r0, #21
 8000f28:	e7e2      	b.n	8000ef0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8000f2a:	6863      	ldr	r3, [r4, #4]
 8000f2c:	051a      	lsls	r2, r3, #20
 8000f2e:	d5e9      	bpl.n	8000f04 <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8000f30:	4631      	mov	r1, r6
 8000f32:	f7ff ff7d 	bl	8000e30 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d0e4      	beq.n	8000f04 <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f3a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8000f3e:	2002      	movs	r0, #2
 8000f40:	e7e1      	b.n	8000f06 <mem_manage_fault+0x3a>
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <bus_fault.constprop.0+0x38>)
 8000f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f50:	0592      	lsls	r2, r2, #22
 8000f52:	d508      	bpl.n	8000f66 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f58:	0412      	lsls	r2, r2, #16
 8000f5a:	d504      	bpl.n	8000f66 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8000f5c:	b118      	cbz	r0, 8000f66 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6a:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8000f6e:	bf58      	it	pl
 8000f70:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f72:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8000f74:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f76:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000f7a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000f7c:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8000f84:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <z_arm_fault+0x12c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
{
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f92:	2600      	movs	r6, #0
 8000f94:	f386 8811 	msr	BASEPRI, r6
 8000f98:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8000f9c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8000fa0:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8000fa4:	d111      	bne.n	8000fca <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8000fa6:	f002 000c 	and.w	r0, r2, #12
 8000faa:	2808      	cmp	r0, #8
 8000fac:	d00d      	beq.n	8000fca <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8000fae:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8000fb0:	bf4c      	ite	mi
 8000fb2:	460d      	movmi	r5, r1
			*nested_exc = true;
 8000fb4:	2601      	movpl	r6, #1
	*recoverable = false;
 8000fb6:	2200      	movs	r2, #0
	switch (fault) {
 8000fb8:	3b03      	subs	r3, #3
	*recoverable = false;
 8000fba:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d84d      	bhi.n	800105e <z_arm_fault+0xda>
 8000fc2:	e8df f003 	tbb	[pc, r3]
 8000fc6:	6504      	.short	0x6504
 8000fc8:	6d69      	.short	0x6d69
		return NULL;
 8000fca:	4635      	mov	r5, r6
 8000fcc:	e7f3      	b.n	8000fb6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <z_arm_fault+0x12c>)
 8000fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd2:	0791      	lsls	r1, r2, #30
 8000fd4:	d443      	bmi.n	800105e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8000fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	db40      	blt.n	800105e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	0052      	lsls	r2, r2, #1
 8000fe0:	d53d      	bpl.n	800105e <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8000fe2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8000fe4:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8000fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fea:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ff0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8000ff4:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8000ff6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8000ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ffe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001004:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001008:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800100c:	4291      	cmp	r1, r2
 800100e:	d009      	beq.n	8001024 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	b142      	cbz	r2, 8001028 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001016:	f10d 0207 	add.w	r2, sp, #7
 800101a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800101c:	4628      	mov	r0, r5
 800101e:	f7ff ff55 	bl	8000ecc <mem_manage_fault>
 8001022:	e00a      	b.n	800103a <z_arm_fault+0xb6>
			reason = esf->basic.r0;
 8001024:	682c      	ldr	r4, [r5, #0]
 8001026:	e01b      	b.n	8001060 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800102a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800102e:	d006      	beq.n	800103e <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
 8001030:	f10d 0107 	add.w	r1, sp, #7
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff ff87 	bl	8000f48 <bus_fault.constprop.0>
 800103a:	4604      	mov	r4, r0
 800103c:	e010      	b.n	8001060 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 800103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001040:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001044:	d30b      	bcc.n	800105e <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800104a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800104e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001054:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001058:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
 800105e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001060:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001064:	b993      	cbnz	r3, 800108c <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001066:	2220      	movs	r2, #32
 8001068:	4629      	mov	r1, r5
 800106a:	a802      	add	r0, sp, #8
 800106c:	f001 fcfb 	bl	8002a66 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001072:	b1be      	cbz	r6, 80010a4 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001078:	b922      	cbnz	r2, 8001084 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800107a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800107e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001082:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001084:	a902      	add	r1, sp, #8
 8001086:	4620      	mov	r0, r4
 8001088:	f001 fccc 	bl	8002a24 <z_arm_fatal_error>
}
 800108c:	b00a      	add	sp, #40	; 0x28
 800108e:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8001090:	f10d 0207 	add.w	r2, sp, #7
 8001094:	2100      	movs	r1, #0
 8001096:	e7c1      	b.n	800101c <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
 8001098:	f10d 0107 	add.w	r1, sp, #7
 800109c:	2000      	movs	r0, #0
 800109e:	e7ca      	b.n	8001036 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <z_arm_fault+0x12c>)
 80010a2:	e7d0      	b.n	8001046 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	e7e9      	b.n	8001082 <z_arm_fault+0xfe>
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80010b4:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <z_arm_fault_init+0xc>)
 80010b6:	6953      	ldr	r3, [r2, #20]
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80010c4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80010c8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80010cc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80010ce:	4672      	mov	r2, lr
	bl z_arm_fault
 80010d0:	f7ff ff58 	bl	8000f84 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80010d4:	bd01      	pop	{r0, pc}
 80010d6:	bf00      	nop

080010d8 <z_arm_interrupt_init>:
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	2110      	movs	r1, #16
 80010de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80010e0:	3301      	adds	r3, #1
 80010e2:	2b56      	cmp	r3, #86	; 0x56
 80010e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80010e8:	d1f9      	bne.n	80010de <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80010f0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80010f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80010f6:	4808      	ldr	r0, [pc, #32]	; (8001118 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80010f8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 80010fc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80010fe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001102:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001106:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001108:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800110a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800110e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001112:	f7ff fdf9 	bl	8000d08 <z_arm_prep_c>
 8001116:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001118:	20000300 	.word	0x20000300

0800111c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <z_impl_k_thread_abort+0x24>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4283      	cmp	r3, r0
 8001122:	d10b      	bne.n	800113c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001124:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001128:	b143      	cbz	r3, 800113c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <z_impl_k_thread_abort+0x28>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001132:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800113c:	f001 ba38 	b.w	80025b0 <z_thread_abort>
 8001140:	200002bc 	.word	0x200002bc
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <z_arm_configure_static_mpu_regions+0xc>)
 800114a:	4a03      	ldr	r2, [pc, #12]	; (8001158 <z_arm_configure_static_mpu_regions+0x10>)
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <z_arm_configure_static_mpu_regions+0x14>)
 800114e:	2101      	movs	r1, #1
 8001150:	f000 b870 	b.w	8001234 <arm_core_mpu_configure_static_mpu_regions>
 8001154:	20020000 	.word	0x20020000
 8001158:	20000000 	.word	0x20000000
 800115c:	080038b4 	.word	0x080038b4

08001160 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001160:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001164:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8001166:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001170:	4618      	mov	r0, r3
 8001172:	2101      	movs	r1, #1
 8001174:	f000 b868 	b.w	8001248 <arm_core_mpu_configure_dynamic_mpu_regions>
 8001178:	20000168 	.word	0x20000168
 800117c:	150b0000 	.word	0x150b0000

08001180 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8001182:	4e20      	ldr	r6, [pc, #128]	; (8001204 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001184:	2500      	movs	r5, #0
 8001186:	428d      	cmp	r5, r1
 8001188:	da39      	bge.n	80011fe <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
 800118a:	6844      	ldr	r4, [r0, #4]
 800118c:	b374      	cbz	r4, 80011ec <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800118e:	b153      	cbz	r3, 80011a6 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8001190:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001194:	ea14 0f0c 	tst.w	r4, ip
 8001198:	d12f      	bne.n	80011fa <mpu_configure_regions+0x7a>
		&&
 800119a:	2c1f      	cmp	r4, #31
 800119c:	d92d      	bls.n	80011fa <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
 800119e:	6807      	ldr	r7, [r0, #0]
		&&
 80011a0:	ea1c 0f07 	tst.w	ip, r7
 80011a4:	d129      	bne.n	80011fa <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80011a6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80011a8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80011aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80011ae:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 80011b2:	d91e      	bls.n	80011f2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
 80011b4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80011b8:	d81d      	bhi.n	80011f6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80011ba:	3c01      	subs	r4, #1
 80011bc:	fab4 f484 	clz	r4, r4
 80011c0:	f1c4 041f 	rsb	r4, r4, #31
 80011c4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80011c6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80011ca:	ea4c 0c04 	orr.w	ip, ip, r4
 80011ce:	d814      	bhi.n	80011fa <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80011d0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 80011d4:	4314      	orrs	r4, r2
 80011d6:	f044 0410 	orr.w	r4, r4, #16
 80011da:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80011de:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80011e2:	f04c 0401 	orr.w	r4, ip, #1
 80011e6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 80011ea:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 80011ec:	3501      	adds	r5, #1
 80011ee:	300c      	adds	r0, #12
 80011f0:	e7c9      	b.n	8001186 <mpu_configure_regions+0x6>
		return REGION_32B;
 80011f2:	2408      	movs	r4, #8
 80011f4:	e7e7      	b.n	80011c6 <mpu_configure_regions+0x46>
		return REGION_4G;
 80011f6:	243e      	movs	r4, #62	; 0x3e
 80011f8:	e7e5      	b.n	80011c6 <mpu_configure_regions+0x46>
			return -EINVAL;
 80011fa:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
 80011fe:	4610      	mov	r0, r2
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <arm_core_mpu_enable+0x14>)
 800120a:	2205      	movs	r2, #5
 800120c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001214:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001220:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <arm_core_mpu_disable+0x10>)
 8001226:	2200      	movs	r2, #0
 8001228:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001234:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001236:	4c03      	ldr	r4, [pc, #12]	; (8001244 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001238:	2301      	movs	r3, #1
 800123a:	7822      	ldrb	r2, [r4, #0]
 800123c:	f7ff ffa0 	bl	8001180 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001240:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001242:	bd10      	pop	{r4, pc}
 8001244:	200002f0 	.word	0x200002f0

08001248 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8001248:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800124c:	2300      	movs	r3, #0
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	f7ff ff96 	bl	8001180 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001254:	f110 0f16 	cmn.w	r0, #22
 8001258:	d002      	beq.n	8001260 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800125c:	2807      	cmp	r0, #7
 800125e:	dd00      	ble.n	8001262 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001260:	bd08      	pop	{r3, pc}
 8001262:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001266:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800126a:	3001      	adds	r0, #1
 800126c:	e7f6      	b.n	800125c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800126e:	bf00      	nop
 8001270:	200002f0 	.word	0x200002f0
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001278:	4914      	ldr	r1, [pc, #80]	; (80012cc <z_arm_mpu_init+0x54>)
 800127a:	6808      	ldr	r0, [r1, #0]
 800127c:	2808      	cmp	r0, #8
{
 800127e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001280:	d821      	bhi.n	80012c6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001282:	f7ff ffcd 	bl	8001220 <arm_core_mpu_disable>
 8001286:	4c12      	ldr	r4, [pc, #72]	; (80012d0 <z_arm_mpu_init+0x58>)
 8001288:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800128a:	2200      	movs	r2, #0
 800128c:	4290      	cmp	r0, r2
 800128e:	f101 010c 	add.w	r1, r1, #12
 8001292:	d105      	bne.n	80012a0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <z_arm_mpu_init+0x5c>)
 8001296:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001298:	f7ff ffb6 	bl	8001208 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012a4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80012a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80012ac:	4313      	orrs	r3, r2
 80012ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80012b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012c2:	3201      	adds	r2, #1
 80012c4:	e7e2      	b.n	800128c <z_arm_mpu_init+0x14>
		return -1;
 80012c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ca:	e7e8      	b.n	800129e <z_arm_mpu_init+0x26>
 80012cc:	080038c0 	.word	0x080038c0
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	200002f0 	.word	0x200002f0

080012d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80012d8:	4b01      	ldr	r3, [pc, #4]	; (80012e0 <__stdout_hook_install+0x8>)
 80012da:	6018      	str	r0, [r3, #0]
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004

080012e4 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80012e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80012e8:	4f0d      	ldr	r7, [pc, #52]	; (8001320 <__stm32_exti_isr.isra.0+0x3c>)
 80012ea:	4604      	mov	r4, r0
 80012ec:	460e      	mov	r6, r1
 80012ee:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80012f0:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80012f4:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80012f8:	42b4      	cmp	r4, r6
 80012fa:	db01      	blt.n	8001300 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 80012fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001300:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001302:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001306:	ea33 0202 	bics.w	r2, r3, r2
 800130a:	d107      	bne.n	800131c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800130c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800130e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8001312:	b11b      	cbz	r3, 800131c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001314:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001318:	4620      	mov	r0, r4
 800131a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800131c:	3401      	adds	r4, #1
 800131e:	e7eb      	b.n	80012f8 <__stm32_exti_isr.isra.0+0x14>
 8001320:	40013c00 	.word	0x40013c00

08001324 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001326:	2301      	movs	r3, #1
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	4083      	lsls	r3, r0
 800132c:	430b      	orrs	r3, r1
 800132e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <stm32_exti_enable+0x18>)
 8001332:	5618      	ldrsb	r0, [r3, r0]
 8001334:	f7ff bcbe 	b.w	8000cb4 <arch_irq_enable>
 8001338:	40013c00 	.word	0x40013c00
 800133c:	08003ae2 	.word	0x08003ae2

08001340 <stm32_exti_disable>:
	if (line < 32) {
 8001340:	281f      	cmp	r0, #31
 8001342:	dc06      	bgt.n	8001352 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001346:	2201      	movs	r2, #1
 8001348:	680b      	ldr	r3, [r1, #0]
 800134a:	4082      	lsls	r2, r0
 800134c:	ea23 0302 	bic.w	r3, r3, r2
 8001350:	600b      	str	r3, [r1, #0]
}
 8001352:	4770      	bx	lr
 8001354:	40013c00 	.word	0x40013c00

08001358 <stm32_exti_trigger>:
	switch (trigger) {
 8001358:	2903      	cmp	r1, #3
 800135a:	d82a      	bhi.n	80013b2 <stm32_exti_trigger+0x5a>
 800135c:	e8df f001 	tbb	[pc, r1]
 8001360:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8001366:	2201      	movs	r2, #1
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	4082      	lsls	r2, r0
 800136c:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001370:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	ea21 0202 	bic.w	r2, r1, r2
 8001378:	60da      	str	r2, [r3, #12]
}
 800137a:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800137e:	2201      	movs	r2, #1
 8001380:	6899      	ldr	r1, [r3, #8]
 8001382:	4082      	lsls	r2, r0
 8001384:	4311      	orrs	r1, r2
 8001386:	e7f3      	b.n	8001370 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800138a:	2201      	movs	r2, #1
 800138c:	68d9      	ldr	r1, [r3, #12]
 800138e:	4082      	lsls	r2, r0
 8001390:	4311      	orrs	r1, r2
 8001392:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	ea21 0202 	bic.w	r2, r1, r2
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800139e:	2301      	movs	r3, #1
 80013a0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <stm32_exti_trigger+0x5c>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	4302      	orrs	r2, r0
 80013aa:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4310      	orrs	r0, r2
 80013b0:	60d8      	str	r0, [r3, #12]
}
 80013b2:	4770      	bx	lr
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80013b8:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <stm32_exti_set_callback+0x20>)
{
 80013bc:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80013be:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80013c2:	b928      	cbnz	r0, 80013d0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80013c4:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80013c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80013cc:	605a      	str	r2, [r3, #4]

	return 0;
}
 80013ce:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80013d0:	f06f 000f 	mvn.w	r0, #15
 80013d4:	e7fb      	b.n	80013ce <stm32_exti_set_callback+0x16>
 80013d6:	bf00      	nop
 80013d8:	20000174 	.word	0x20000174

080013dc <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <stm32_exti_unset_callback+0x10>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80013e4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80013e8:	605a      	str	r2, [r3, #4]
}
 80013ea:	4770      	bx	lr
 80013ec:	20000174 	.word	0x20000174

080013f0 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80013f0:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <stm32_clock_control_get_subsys_rate+0x84>)
 80013f4:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80013f6:	680b      	ldr	r3, [r1, #0]
 80013f8:	2b44      	cmp	r3, #68	; 0x44
{
 80013fa:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80013fc:	d828      	bhi.n	8001450 <stm32_clock_control_get_subsys_rate+0x60>
 80013fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001400:	d805      	bhi.n	800140e <stm32_clock_control_get_subsys_rate+0x1e>
 8001402:	3b01      	subs	r3, #1
 8001404:	2b05      	cmp	r3, #5
 8001406:	d90d      	bls.n	8001424 <stm32_clock_control_get_subsys_rate+0x34>
 8001408:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800140c:	e01f      	b.n	800144e <stm32_clock_control_get_subsys_rate+0x5e>
 800140e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001412:	2201      	movs	r2, #1
 8001414:	408a      	lsls	r2, r1
 8001416:	4918      	ldr	r1, [pc, #96]	; (8001478 <stm32_clock_control_get_subsys_rate+0x88>)
 8001418:	420a      	tst	r2, r1
 800141a:	d116      	bne.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	d1f3      	bne.n	8001408 <stm32_clock_control_get_subsys_rate+0x18>
	return clock / prescaler;
 8001420:	0840      	lsrs	r0, r0, #1
	case STM32_CLOCK_BUS_APB1:
#if defined(STM32_CLOCK_BUS_APB1_2)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
		break;
 8001422:	e012      	b.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
	switch (pclken->bus) {
 8001424:	2b05      	cmp	r3, #5
 8001426:	d8ef      	bhi.n	8001408 <stm32_clock_control_get_subsys_rate+0x18>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <stm32_clock_control_get_subsys_rate+0x40>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001457 	.word	0x08001457
 8001434:	08001463 	.word	0x08001463
 8001438:	08001409 	.word	0x08001409
 800143c:	08001449 	.word	0x08001449
 8001440:	0800146f 	.word	0x0800146f
 8001444:	0800144b 	.word	0x0800144b
 8001448:	2000      	movs	r0, #0
		*rate = STM32_LSE_FREQ;
		break;
#endif
#if defined(STM32_SRC_LSI)
	case STM32_SRC_LSI:
		*rate = STM32_LSI_FREQ;
 800144a:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800144c:	2000      	movs	r0, #0
}
 800144e:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 8001450:	2ba8      	cmp	r3, #168	; 0xa8
 8001452:	d0fa      	beq.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
 8001454:	e7d8      	b.n	8001408 <stm32_clock_control_get_subsys_rate+0x18>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8001456:	f000 f897 	bl	8001588 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	4358      	muls	r0, r3
 800145e:	08c0      	lsrs	r0, r0, #3
		break;
 8001460:	e7f3      	b.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8001462:	f000 f891 	bl	8001588 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	4358      	muls	r0, r3
 800146a:	0900      	lsrs	r0, r0, #4
		break;
 800146c:	e7ed      	b.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
		break;
 800146e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001472:	e7ea      	b.n	800144a <stm32_clock_control_get_subsys_rate+0x5a>
 8001474:	2000003c 	.word	0x2000003c
 8001478:	00100111 	.word	0x00100111

0800147c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800147c:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800147e:	4c3e      	ldr	r4, [pc, #248]	; (8001578 <stm32_clock_control_init+0xfc>)
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001480:	f000 f898 	bl	80015b4 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001484:	f000 fc18 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001488:	68a3      	ldr	r3, [r4, #8]
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <stm32_clock_control_init+0x100>)
 800148c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	fa20 f503 	lsr.w	r5, r0, r3

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001496:	483a      	ldr	r0, [pc, #232]	; (8001580 <stm32_clock_control_init+0x104>)
 8001498:	4285      	cmp	r5, r0
 800149a:	d201      	bcs.n	80014a0 <stm32_clock_control_init+0x24>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800149c:	f000 fc3a 	bl	8001d14 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80014b0:	4b31      	ldr	r3, [pc, #196]	; (8001578 <stm32_clock_control_init+0xfc>)
 80014b2:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80014b4:	0396      	lsls	r6, r2, #14
 80014b6:	d5fc      	bpl.n	80014b2 <stm32_clock_control_init+0x36>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80014b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	675a      	str	r2, [r3, #116]	; 0x74
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80014c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while (LL_RCC_LSI_IsReady() != 1) {
 80014c2:	0794      	lsls	r4, r2, #30
 80014c4:	d5fc      	bpl.n	80014c0 <stm32_clock_control_init+0x44>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80014cc:	2a08      	cmp	r2, #8
 80014ce:	d117      	bne.n	8001500 <stm32_clock_control_init+0x84>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014d6:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014d8:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80014da:	0790      	lsls	r0, r2, #30
 80014dc:	d407      	bmi.n	80014ee <stm32_clock_control_init+0x72>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <stm32_clock_control_init+0xfc>)
 80014e8:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80014ea:	0799      	lsls	r1, r3, #30
 80014ec:	d5fc      	bpl.n	80014e8 <stm32_clock_control_init+0x6c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <stm32_clock_control_init+0xfc>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	f022 0203 	bic.w	r2, r2, #3
 80014f6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014f8:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80014fa:	f012 0f0c 	tst.w	r2, #12
 80014fe:	d1fb      	bne.n	80014f8 <stm32_clock_control_init+0x7c>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001500:	4c1d      	ldr	r4, [pc, #116]	; (8001578 <stm32_clock_control_init+0xfc>)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001508:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001510:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800151c:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 800151e:	f000 f837 	bl	8001590 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001528:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800152a:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	d5fc      	bpl.n	800152a <stm32_clock_control_init+0xae>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001530:	68a3      	ldr	r3, [r4, #8]
 8001532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001536:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001538:	68a3      	ldr	r3, [r4, #8]
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001544:	4c0c      	ldr	r4, [pc, #48]	; (8001578 <stm32_clock_control_init+0xfc>)
 8001546:	68a3      	ldr	r3, [r4, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800154c:	2b08      	cmp	r3, #8
 800154e:	d1fa      	bne.n	8001546 <stm32_clock_control_init+0xca>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001550:	4e0b      	ldr	r6, [pc, #44]	; (8001580 <stm32_clock_control_init+0x104>)
 8001552:	42b5      	cmp	r5, r6
 8001554:	d302      	bcc.n	800155c <stm32_clock_control_init+0xe0>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001556:	4630      	mov	r0, r6
 8001558:	f000 fbdc 	bl	8001d14 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <stm32_clock_control_init+0x108>)
 800155e:	601e      	str	r6, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001560:	68a3      	ldr	r3, [r4, #8]
 8001562:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800156c:	68a3      	ldr	r3, [r4, #8]
 800156e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001572:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001574:	2000      	movs	r0, #0
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	08003ba2 	.word	0x08003ba2
 8001580:	05b8d800 	.word	0x05b8d800
 8001584:	2000003c 	.word	0x2000003c

08001588 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 8001588:	4800      	ldr	r0, [pc, #0]	; (800158c <get_pllsrc_frequency+0x4>)
 800158a:	4770      	bx	lr
 800158c:	007a1200 	.word	0x007a1200

08001590 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <config_pll_sysclock+0x18>)
 8001592:	4906      	ldr	r1, [pc, #24]	; (80015ac <config_pll_sysclock+0x1c>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4011      	ands	r1, r2
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <config_pll_sysclock+0x20>)
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80015a4:	605a      	str	r2, [r3, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 80015a6:	4770      	bx	lr
 80015a8:	40023800 	.word	0x40023800
 80015ac:	ffbf8000 	.word	0xffbf8000
 80015b0:	00401804 	.word	0x00401804

080015b4 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <config_enable_default_clocks+0x1c>)
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80015c0:	b082      	sub	sp, #8
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015c8:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80015ca:	b002      	add	sp, #8
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80015d4:	b508      	push	{r3, lr}
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <uart_console_init+0x20>)
 80015d8:	f001 fe1f 	bl	800321a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 80015dc:	b138      	cbz	r0, 80015ee <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <uart_console_init+0x24>)
 80015e0:	f7ff fe7a 	bl	80012d8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <uart_console_init+0x24>)
 80015e6:	f7fe ff6b 	bl	80004c0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80015ea:	2000      	movs	r0, #0
}
 80015ec:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80015ee:	f06f 0012 	mvn.w	r0, #18
 80015f2:	e7fb      	b.n	80015ec <uart_console_init+0x18>
 80015f4:	08003550 	.word	0x08003550
 80015f8:	080015fd 	.word	0x080015fd

080015fc <console_out>:
	if ('\n' == c) {
 80015fc:	280a      	cmp	r0, #10
{
 80015fe:	b538      	push	{r3, r4, r5, lr}
 8001600:	4d07      	ldr	r5, [pc, #28]	; (8001620 <console_out+0x24>)
 8001602:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001604:	d104      	bne.n	8001610 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001606:	68ab      	ldr	r3, [r5, #8]
 8001608:	210d      	movs	r1, #13
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4628      	mov	r0, r5
 800160e:	4798      	blx	r3
 8001610:	68ab      	ldr	r3, [r5, #8]
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <console_out+0x24>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	b2e1      	uxtb	r1, r4
 8001618:	4798      	blx	r3
}
 800161a:	4620      	mov	r0, r4
 800161c:	bd38      	pop	{r3, r4, r5, pc}
 800161e:	bf00      	nop
 8001620:	08003550 	.word	0x08003550

08001624 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001624:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001626:	6903      	ldr	r3, [r0, #16]
{
 8001628:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 800162a:	6058      	str	r0, [r3, #4]
 800162c:	4d08      	ldr	r5, [pc, #32]	; (8001650 <gpio_stm32_init+0x2c>)
 800162e:	4628      	mov	r0, r5
 8001630:	f001 fdf3 	bl	800321a <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001634:	b140      	cbz	r0, 8001648 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8001636:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001638:	68ab      	ldr	r3, [r5, #8]
 800163a:	310c      	adds	r1, #12
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4628      	mov	r0, r5
 8001640:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001642:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001646:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001648:	f06f 0012 	mvn.w	r0, #18
 800164c:	e7fb      	b.n	8001646 <gpio_stm32_init+0x22>
 800164e:	bf00      	nop
 8001650:	08003448 	.word	0x08003448

08001654 <gpio_stm32_pin_interrupt_configure>:
{
 8001654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001656:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001658:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800165c:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800165e:	6902      	ldr	r2, [r0, #16]
{
 8001660:	460c      	mov	r4, r1
 8001662:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001664:	d124      	bne.n	80016b0 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001666:	f001 0203 	and.w	r2, r1, #3
 800166a:	3204      	adds	r2, #4
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	230f      	movs	r3, #15
 8001670:	4093      	lsls	r3, r2
 8001672:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4933      	ldr	r1, [pc, #204]	; (8001748 <gpio_stm32_pin_interrupt_configure+0xf4>)
 800167a:	3202      	adds	r2, #2
 800167c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001680:	0c19      	lsrs	r1, r3, #16
 8001682:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800168a:	fab2 f282 	clz	r2, r2
 800168e:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001690:	68b2      	ldr	r2, [r6, #8]
 8001692:	429a      	cmp	r2, r3
 8001694:	d109      	bne.n	80016aa <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fe52 	bl	8001340 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fe9d 	bl	80013dc <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80016a2:	2100      	movs	r1, #0
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fe57 	bl	8001358 <stm32_exti_trigger>
	int err = 0;
 80016aa:	2000      	movs	r0, #0
}
 80016ac:	b003      	add	sp, #12
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80016b0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80016b4:	d041      	beq.n	800173a <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80016b6:	4925      	ldr	r1, [pc, #148]	; (800174c <gpio_stm32_pin_interrupt_configure+0xf8>)
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fe7d 	bl	80013b8 <stm32_exti_set_callback>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d13e      	bne.n	8001740 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 80016c4:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 80016c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ca:	466b      	mov	r3, sp
 80016cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80016d0:	4820      	ldr	r0, [pc, #128]	; (8001754 <gpio_stm32_pin_interrupt_configure+0x100>)
 80016d2:	6882      	ldr	r2, [r0, #8]
 80016d4:	4619      	mov	r1, r3
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4790      	blx	r2
	if (ret != 0) {
 80016da:	b9c0      	cbnz	r0, 800170e <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80016dc:	f004 0303 	and.w	r3, r4, #3
 80016e0:	3304      	adds	r3, #4
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	409a      	lsls	r2, r3
 80016e8:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016ec:	b2d3      	uxtb	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016f4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80016f8:	0c11      	lsrs	r1, r2, #16
 80016fa:	6898      	ldr	r0, [r3, #8]
 80016fc:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	4096      	lsls	r6, r2
 800170a:	4306      	orrs	r6, r0
 800170c:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800170e:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001712:	d00e      	beq.n	8001732 <gpio_stm32_pin_interrupt_configure+0xde>
 8001714:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001718:	d00d      	beq.n	8001736 <gpio_stm32_pin_interrupt_configure+0xe2>
 800171a:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800171e:	4259      	negs	r1, r3
 8001720:	4159      	adcs	r1, r3
 8001722:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fe17 	bl	8001358 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fdfa 	bl	8001324 <stm32_exti_enable>
 8001730:	e7bb      	b.n	80016aa <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001732:	2101      	movs	r1, #1
 8001734:	e7f6      	b.n	8001724 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8001736:	2103      	movs	r1, #3
 8001738:	e7f4      	b.n	8001724 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 800173a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800173e:	e7b5      	b.n	80016ac <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001740:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001744:	e7b2      	b.n	80016ac <gpio_stm32_pin_interrupt_configure+0x58>
 8001746:	bf00      	nop
 8001748:	40013800 	.word	0x40013800
 800174c:	08002e05 	.word	0x08002e05
 8001750:	080038ac 	.word	0x080038ac
 8001754:	08003448 	.word	0x08003448

08001758 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 8001758:	6842      	ldr	r2, [r0, #4]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 800175a:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800175c:	f101 0314 	add.w	r3, r1, #20
 8001760:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001764:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001768:	f101 0c14 	add.w	ip, r1, #20
 800176c:	e84c 3000 	strex	r0, r3, [ip]
 8001770:	2800      	cmp	r0, #0
 8001772:	d1f3      	bne.n	800175c <uart_stm32_irq_err_enable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <uart_stm32_irq_err_enable+0x58>)
 8001778:	428b      	cmp	r3, r1
 800177a:	d007      	beq.n	800178c <uart_stm32_irq_err_enable+0x34>
 800177c:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8001780:	428b      	cmp	r3, r1
 8001782:	d003      	beq.n	800178c <uart_stm32_irq_err_enable+0x34>
 8001784:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8001788:	428b      	cmp	r3, r1
 800178a:	d103      	bne.n	8001794 <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800178c:	6919      	ldr	r1, [r3, #16]
 800178e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001792:	6119      	str	r1, [r3, #16]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
 8001794:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001796:	f102 030c 	add.w	r3, r2, #12
 800179a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a2:	f102 000c 	add.w	r0, r2, #12
 80017a6:	e840 3100 	strex	r1, r3, [r0]
 80017aa:	2900      	cmp	r1, #0
 80017ac:	d1f3      	bne.n	8001796 <uart_stm32_irq_err_enable+0x3e>
}
 80017ae:	4770      	bx	lr
 80017b0:	40011000 	.word	0x40011000

080017b4 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 80017b4:	6842      	ldr	r2, [r0, #4]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 80017b6:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017b8:	f101 0314 	add.w	r3, r1, #20
 80017bc:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80017c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c4:	f101 0c14 	add.w	ip, r1, #20
 80017c8:	e84c 3000 	strex	r0, r3, [ip]
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d1f3      	bne.n	80017b8 <uart_stm32_irq_err_disable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <uart_stm32_irq_err_disable+0x58>)
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d007      	beq.n	80017e8 <uart_stm32_irq_err_disable+0x34>
 80017d8:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80017dc:	428b      	cmp	r3, r1
 80017de:	d003      	beq.n	80017e8 <uart_stm32_irq_err_disable+0x34>
 80017e0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d103      	bne.n	80017f0 <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80017ee:	6119      	str	r1, [r3, #16]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
 80017f0:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f2:	f102 030c 	add.w	r3, r2, #12
 80017f6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80017fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017fe:	f102 000c 	add.w	r0, r2, #12
 8001802:	e840 3100 	strex	r1, r3, [r0]
 8001806:	2900      	cmp	r1, #0
 8001808:	d1f3      	bne.n	80017f2 <uart_stm32_irq_err_disable+0x3e>
}
 800180a:	4770      	bx	lr
 800180c:	40011000 	.word	0x40011000

08001810 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8001812:	6907      	ldr	r7, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8001814:	6844      	ldr	r4, [r0, #4]
{
 8001816:	4606      	mov	r6, r0
	data->clock = clk;
 8001818:	483a      	ldr	r0, [pc, #232]	; (8001904 <uart_stm32_init+0xf4>)
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	f001 fcfd 	bl	800321a <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8001820:	b920      	cbnz	r0, 800182c <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8001822:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001826:	4628      	mov	r0, r5
 8001828:	b003      	add	sp, #12
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	6861      	ldr	r1, [r4, #4]
 8001830:	6883      	ldr	r3, [r0, #8]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4798      	blx	r3
	if (err != 0) {
 8001836:	4605      	mov	r5, r0
 8001838:	2800      	cmp	r0, #0
 800183a:	d1f4      	bne.n	8001826 <uart_stm32_init+0x16>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800183c:	4601      	mov	r1, r0
 800183e:	aa01      	add	r2, sp, #4
 8001840:	69a0      	ldr	r0, [r4, #24]
 8001842:	f001 fc9c 	bl	800317e <pinctrl_lookup_state>
	if (ret < 0) {
 8001846:	2800      	cmp	r0, #0
 8001848:	da01      	bge.n	800184e <uart_stm32_init+0x3e>
 800184a:	4605      	mov	r5, r0
 800184c:	e7eb      	b.n	8001826 <uart_stm32_init+0x16>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800184e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001850:	462a      	mov	r2, r5
 8001852:	7919      	ldrb	r1, [r3, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f000 f9ed 	bl	8001c34 <pinctrl_configure_pins>
	if (err < 0) {
 800185a:	2800      	cmp	r0, #0
 800185c:	dbf5      	blt.n	800184a <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 800185e:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001860:	68d3      	ldr	r3, [r2, #12]
 8001862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001866:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f001 fcd6 	bl	800321a <z_device_is_ready>
 800186e:	2800      	cmp	r0, #0
 8001870:	d0d7      	beq.n	8001822 <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8001872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001876:	6883      	ldr	r3, [r0, #8]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	b103      	cbz	r3, 800187e <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 800187c:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 800187e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001880:	f101 030c 	add.w	r3, r1, #12
 8001884:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001888:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188c:	f101 000c 	add.w	r0, r1, #12
 8001890:	e840 3200 	strex	r2, r3, [r0]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d1f3      	bne.n	8001880 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 8001898:	6923      	ldr	r3, [r4, #16]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d02d      	beq.n	80018fa <uart_stm32_init+0xea>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800189e:	2b01      	cmp	r3, #1
 80018a0:	bf12      	itee	ne
 80018a2:	2000      	movne	r0, #0
 80018a4:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 80018a8:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 80018ac:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80018ae:	68cb      	ldr	r3, [r1, #12]
 80018b0:	4310      	orrs	r0, r2
 80018b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018b6:	4303      	orrs	r3, r0
 80018b8:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018ba:	690b      	ldr	r3, [r1, #16]
 80018bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c0:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 80018c2:	7b23      	ldrb	r3, [r4, #12]
 80018c4:	b12b      	cbz	r3, 80018d2 <uart_stm32_init+0xc2>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80018c6:	6873      	ldr	r3, [r6, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80018ca:	6953      	ldr	r3, [r2, #20]
 80018cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018d0:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	4630      	mov	r0, r6
 80018d6:	f001 fbe2 	bl	800309e <uart_stm32_set_baudrate>
	if (config->single_wire) {
 80018da:	7d23      	ldrb	r3, [r4, #20]
 80018dc:	b123      	cbz	r3, 80018e8 <uart_stm32_init+0xd8>
		LL_USART_EnableHalfDuplex(config->usart);
 80018de:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80018e0:	6953      	ldr	r3, [r2, #20]
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 80018e8:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018ea:	68d3      	ldr	r3, [r2, #12]
 80018ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018f0:	60d3      	str	r3, [r2, #12]
	config->irq_config_func(dev);
 80018f2:	69e3      	ldr	r3, [r4, #28]
 80018f4:	4630      	mov	r0, r6
 80018f6:	4798      	blx	r3
	return 0;
 80018f8:	e795      	b.n	8001826 <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80018fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80018fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001902:	e7d3      	b.n	80018ac <uart_stm32_init+0x9c>
 8001904:	08003448 	.word	0x08003448

08001908 <uart_stm32_configure>:
{
 8001908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800190c:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800190e:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001910:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8001912:	2b01      	cmp	r3, #1
{
 8001914:	460c      	mov	r4, r1
	switch (parity) {
 8001916:	d07d      	beq.n	8001a14 <uart_stm32_configure+0x10c>
 8001918:	1e9a      	subs	r2, r3, #2
 800191a:	4257      	negs	r7, r2
 800191c:	4157      	adcs	r7, r2
 800191e:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001920:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001922:	f894 8006 	ldrb.w	r8, [r4, #6]
 8001926:	2a02      	cmp	r2, #2
 8001928:	bf96      	itet	ls
 800192a:	494c      	ldrls	r1, [pc, #304]	; (8001a5c <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800192c:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8001930:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8001934:	f1b8 0f04 	cmp.w	r8, #4
 8001938:	d07b      	beq.n	8001a32 <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800193a:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 800193e:	2b00      	cmp	r3, #0
 8001940:	d16b      	bne.n	8001a1a <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001942:	f1be 0f01 	cmp.w	lr, #1
 8001946:	f022 0202 	bic.w	r2, r2, #2
 800194a:	d07f      	beq.n	8001a4c <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800194c:	2a00      	cmp	r2, #0
 800194e:	d070      	beq.n	8001a32 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001950:	f1b8 0f02 	cmp.w	r8, #2
 8001954:	d96d      	bls.n	8001a32 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8001956:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001958:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800195c:	f1be 0f00 	cmp.w	lr, #0
 8001960:	d00d      	beq.n	800197e <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <uart_stm32_configure+0x158>)
 8001964:	4590      	cmp	r8, r2
 8001966:	d007      	beq.n	8001978 <uart_stm32_configure+0x70>
 8001968:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800196c:	4590      	cmp	r8, r2
 800196e:	d003      	beq.n	8001978 <uart_stm32_configure+0x70>
 8001970:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001974:	4590      	cmp	r8, r2
 8001976:	d15c      	bne.n	8001a32 <uart_stm32_configure+0x12a>
 8001978:	f1be 0f01 	cmp.w	lr, #1
 800197c:	d159      	bne.n	8001a32 <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800197e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8001982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001986:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 800198a:	6842      	ldr	r2, [r0, #4]
 800198c:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001990:	f8de 200c 	ldr.w	r2, [lr, #12]
 8001994:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001998:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800199a:	bf1f      	itttt	ne
 800199c:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80019a0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80019a4:	433a      	orrne	r2, r7
 80019a6:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80019aa:	6842      	ldr	r2, [r0, #4]
 80019ac:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80019b4:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80019b6:	bf1f      	itttt	ne
 80019b8:	693a      	ldrne	r2, [r7, #16]
 80019ba:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 80019be:	ea42 020c 	orrne.w	r2, r2, ip
 80019c2:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 80019c4:	6842      	ldr	r2, [r0, #4]
 80019c6:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80019ce:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80019d0:	bf1f      	itttt	ne
 80019d2:	68fa      	ldrne	r2, [r7, #12]
 80019d4:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80019d8:	4313      	orrne	r3, r2
 80019da:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80019dc:	6843      	ldr	r3, [r0, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80019e0:	6953      	ldr	r3, [r2, #20]
 80019e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80019e6:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019e8:	bf1f      	itttt	ne
 80019ea:	6953      	ldrne	r3, [r2, #20]
 80019ec:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80019f0:	430b      	orrne	r3, r1
 80019f2:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 80019f4:	6821      	ldr	r1, [r4, #0]
 80019f6:	6833      	ldr	r3, [r6, #0]
 80019f8:	4299      	cmp	r1, r3
 80019fa:	d003      	beq.n	8001a04 <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80019fc:	f001 fb4f 	bl	800309e <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001a04:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a06:	68d3      	ldr	r3, [r2, #12]
 8001a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a0c:	60d3      	str	r3, [r2, #12]
	return 0;
 8001a0e:	2000      	movs	r0, #0
};
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8001a14:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8001a18:	e782      	b.n	8001920 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001a1a:	3b03      	subs	r3, #3
 8001a1c:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a20:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001a22:	d109      	bne.n	8001a38 <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d904      	bls.n	8001a32 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8001a28:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001a2c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8001a30:	d106      	bne.n	8001a40 <uart_stm32_configure+0x138>
		return -ENOTSUP;
 8001a32:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001a36:	e7eb      	b.n	8001a10 <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d9fa      	bls.n	8001a32 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	e7f5      	b.n	8001a2c <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001a40:	f1b8 0f02 	cmp.w	r8, #2
 8001a44:	d9f5      	bls.n	8001a32 <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	e785      	b.n	8001958 <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d0f0      	beq.n	8001a32 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001a50:	f1b8 0f02 	cmp.w	r8, #2
 8001a54:	d9ed      	bls.n	8001a32 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8001a56:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a5a:	e77d      	b.n	8001958 <uart_stm32_configure+0x50>
 8001a5c:	08003a94 	.word	0x08003a94
 8001a60:	40011000 	.word	0x40011000

08001a64 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8001a64:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a6a:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001a6c:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001a6e:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <elapsed+0x34>)
 8001a72:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001a76:	4909      	ldr	r1, [pc, #36]	; (8001a9c <elapsed+0x38>)
 8001a78:	d101      	bne.n	8001a7e <elapsed+0x1a>
	    || (val1 < val2)) {
 8001a7a:	4282      	cmp	r2, r0
 8001a7c:	d206      	bcs.n	8001a8c <elapsed+0x28>
		overflow_cyc += last_load;
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	680c      	ldr	r4, [r1, #0]
 8001a82:	4422      	add	r2, r4
 8001a84:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001a86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a8a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	680a      	ldr	r2, [r1, #0]
 8001a90:	4413      	add	r3, r2
}
 8001a92:	1a18      	subs	r0, r3, r0
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	bf00      	nop
 8001a98:	200002ac 	.word	0x200002ac
 8001a9c:	200002b8 	.word	0x200002b8

08001aa0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <sys_clock_driver_init+0x28>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <sys_clock_driver_init+0x2c>)
 8001aaa:	f242 527f 	movw	r2, #9599	; 0x257f
 8001aae:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <sys_clock_driver_init+0x30>)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001ab6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001aba:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001abc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	f042 0207 	orr.w	r2, r2, #7
 8001ac4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	200002b8 	.word	0x200002b8
 8001ad0:	200002ac 	.word	0x200002ac

08001ad4 <sys_clock_isr>:
{
 8001ad4:	b508      	push	{r3, lr}
	elapsed();
 8001ad6:	f7ff ffc5 	bl	8001a64 <elapsed>
	cycle_count += overflow_cyc;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <sys_clock_isr+0x38>)
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <sys_clock_isr+0x3c>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	4408      	add	r0, r1
 8001ae4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <sys_clock_isr+0x40>)
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001af2:	1ac0      	subs	r0, r0, r3
 8001af4:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001af8:	fb01 3300 	mla	r3, r1, r0, r3
 8001afc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001afe:	f000 fe9d 	bl	800283c <sys_clock_announce>
}
 8001b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001b06:	f7ff b9d3 	b.w	8000eb0 <z_arm_exc_exit>
 8001b0a:	bf00      	nop
 8001b0c:	200002ac 	.word	0x200002ac
 8001b10:	200002b4 	.word	0x200002b4
 8001b14:	200002b0 	.word	0x200002b0

08001b18 <sys_clock_set_timeout>:
{
 8001b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b1c:	4e31      	ldr	r6, [pc, #196]	; (8001be4 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001b1e:	2900      	cmp	r1, #0
 8001b20:	d054      	beq.n	8001bcc <sys_clock_set_timeout+0xb4>
 8001b22:	1c42      	adds	r2, r0, #1
 8001b24:	d10a      	bne.n	8001b3c <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001b26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b2a:	6913      	ldr	r3, [r2, #16]
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001b32:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b36:	6033      	str	r3, [r6, #0]
}
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8001b3c:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001b3e:	2801      	cmp	r0, #1
 8001b40:	dd4a      	ble.n	8001bd8 <sys_clock_set_timeout+0xc0>
 8001b42:	f240 68d2 	movw	r8, #1746	; 0x6d2
 8001b46:	4540      	cmp	r0, r8
 8001b48:	dc01      	bgt.n	8001b4e <sys_clock_set_timeout+0x36>
 8001b4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8001b4e:	f04f 0310 	mov.w	r3, #16
 8001b52:	f3ef 8411 	mrs	r4, BASEPRI
 8001b56:	f383 8812 	msr	BASEPRI_MAX, r3
 8001b5a:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001b5e:	f7ff ff81 	bl	8001a64 <elapsed>
	cycle_count += pending;
 8001b62:	4f21      	ldr	r7, [pc, #132]	; (8001be8 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001b64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001b68:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8001b6a:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <sys_clock_set_timeout+0xd4>)
 8001b74:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <sys_clock_set_timeout+0xd8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001b7a:	1ad1      	subs	r1, r2, r3
 8001b7c:	d42f      	bmi.n	8001bde <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 8001b7e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
		delay += unannounced;
 8001b82:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001b86:	f501 5115 	add.w	r1, r1, #9536	; 0x2540
		delay -= unannounced;
 8001b8a:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001b8c:	313f      	adds	r1, #63	; 0x3f
 8001b8e:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8001b92:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d920      	bls.n	8001bde <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8001b9c:	4915      	ldr	r1, [pc, #84]	; (8001bf4 <sys_clock_set_timeout+0xdc>)
 8001b9e:	428b      	cmp	r3, r1
 8001ba0:	bf28      	it	cs
 8001ba2:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8001ba4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8001ba8:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8001baa:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8001bac:	3b01      	subs	r3, #1
 8001bae:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8001bb4:	4584      	cmp	ip, r0
 8001bb6:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8001bba:	bf38      	it	cc
 8001bbc:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8001bbe:	441a      	add	r2, r3
 8001bc0:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8001bc2:	f384 8811 	msr	BASEPRI, r4
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	e7b5      	b.n	8001b38 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001bcc:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001bce:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001bd0:	d1b5      	bne.n	8001b3e <sys_clock_set_timeout+0x26>
 8001bd2:	f240 60d2 	movw	r0, #1746	; 0x6d2
 8001bd6:	e7b8      	b.n	8001b4a <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001bd8:	f04f 0800 	mov.w	r8, #0
 8001bdc:	e7b7      	b.n	8001b4e <sys_clock_set_timeout+0x36>
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be2:	e7df      	b.n	8001ba4 <sys_clock_set_timeout+0x8c>
 8001be4:	200002b8 	.word	0x200002b8
 8001be8:	200002b4 	.word	0x200002b4
 8001bec:	200002ac 	.word	0x200002ac
 8001bf0:	200002b0 	.word	0x200002b0
 8001bf4:	00ffc300 	.word	0x00ffc300

08001bf8 <sys_clock_elapsed>:
{
 8001bf8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001bfa:	f04f 0310 	mov.w	r3, #16
 8001bfe:	f3ef 8411 	mrs	r4, BASEPRI
 8001c02:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c06:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001c0a:	f7ff ff2b 	bl	8001a64 <elapsed>
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <sys_clock_elapsed+0x34>)
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <sys_clock_elapsed+0x38>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	4403      	add	r3, r0
	__asm__ volatile(
 8001c1a:	f384 8811 	msr	BASEPRI, r4
 8001c1e:	f3bf 8f6f 	isb	sy
}
 8001c22:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001c26:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c2a:	bd10      	pop	{r4, pc}
 8001c2c:	200002b4 	.word	0x200002b4
 8001c30:	200002b0 	.word	0x200002b0

08001c34 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001c38:	4f1e      	ldr	r7, [pc, #120]	; (8001cb4 <pinctrl_configure_pins+0x80>)
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001c40:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001c42:	42b4      	cmp	r4, r6
 8001c44:	d101      	bne.n	8001c4a <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001c46:	2000      	movs	r0, #0
 8001c48:	e014      	b.n	8001c74 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001c4a:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001c4c:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001c4e:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001c52:	d411      	bmi.n	8001c78 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001c54:	6865      	ldr	r5, [r4, #4]
 8001c56:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001c5a:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001c5e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001c62:	280a      	cmp	r0, #10
 8001c64:	d823      	bhi.n	8001cae <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001c66:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001c6a:	f1b8 0f00 	cmp.w	r8, #0
 8001c6e:	d10d      	bne.n	8001c8c <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8001c70:	f06f 0012 	mvn.w	r0, #18
}
 8001c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001c78:	f1b9 0f10 	cmp.w	r9, #16
 8001c7c:	d004      	beq.n	8001c88 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001c7e:	f1b9 0f11 	cmp.w	r9, #17
 8001c82:	d1ea      	bne.n	8001c5a <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8001c84:	6865      	ldr	r5, [r4, #4]
 8001c86:	e7e8      	b.n	8001c5a <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001c88:	2530      	movs	r5, #48	; 0x30
 8001c8a:	e7e6      	b.n	8001c5a <pinctrl_configure_pins+0x26>
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	f001 fac4 	bl	800321a <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d0ec      	beq.n	8001c70 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001c96:	464b      	mov	r3, r9
 8001c98:	462a      	mov	r2, r5
 8001c9a:	f00a 010f 	and.w	r1, sl, #15
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	f001 f8c7 	bl	8002e32 <gpio_stm32_configure>
		if (ret < 0) {
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	f104 0408 	add.w	r4, r4, #8
 8001caa:	daca      	bge.n	8001c42 <pinctrl_configure_pins+0xe>
 8001cac:	e7e2      	b.n	8001c74 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001cae:	f06f 0015 	mvn.w	r0, #21
 8001cb2:	e7df      	b.n	8001c74 <pinctrl_configure_pins+0x40>
 8001cb4:	08003a38 	.word	0x08003a38

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cba:	4913      	ldr	r1, [pc, #76]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x50>)
 8001cbc:	688b      	ldr	r3, [r1, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d01c      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x48>
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ccc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd4:	bf14      	ite	ne
 8001cd6:	480d      	ldrne	r0, [pc, #52]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	480d      	ldreq	r0, [pc, #52]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001cde:	bf18      	it	ne
 8001ce0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	fba1 0100 	umull	r0, r1, r1, r0
 8001cea:	f7fe fa55 	bl	8000198 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x50>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001cfa:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cfe:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x54>)
 8001d02:	e7fc      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001d06:	e7fa      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x46>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	00f42400 	.word	0x00f42400

08001d14 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d076      	beq.n	8001e06 <LL_SetFlashLatency+0xf2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001d18:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <LL_SetFlashLatency+0xf8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001d20:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001d24:	d120      	bne.n	8001d68 <LL_SetFlashLatency+0x54>
      {
        latency = LL_FLASH_LATENCY_4;
      }
#endif /* UTILS_SCALE1_LATENCY4_FREQ */
#if defined (UTILS_SCALE1_LATENCY3_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <LL_SetFlashLatency+0xfc>)
 8001d28:	4290      	cmp	r0, r2
 8001d2a:	d815      	bhi.n	8001d58 <LL_SetFlashLatency+0x44>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /* UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE1_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d2c:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <LL_SetFlashLatency+0x100>)
 8001d2e:	4290      	cmp	r0, r2
 8001d30:	d907      	bls.n	8001d42 <LL_SetFlashLatency+0x2e>
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001d38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d3c:	d15c      	bne.n	8001df8 <LL_SetFlashLatency+0xe4>
 8001d3e:	2002      	movs	r0, #2
 8001d40:	e01f      	b.n	8001d82 <LL_SetFlashLatency+0x6e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d42:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <LL_SetFlashLatency+0x104>)
 8001d44:	4290      	cmp	r0, r2
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001d4c:	d947      	bls.n	8001dde <LL_SetFlashLatency+0xca>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001d4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d52:	d14c      	bne.n	8001dee <LL_SetFlashLatency+0xda>
          latency = LL_FLASH_LATENCY_1;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e014      	b.n	8001d82 <LL_SetFlashLatency+0x6e>
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001d5e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d62:	d13f      	bne.n	8001de4 <LL_SetFlashLatency+0xd0>
 8001d64:	2003      	movs	r0, #3
 8001d66:	e00c      	b.n	8001d82 <LL_SetFlashLatency+0x6e>
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001d6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d72:	d122      	bne.n	8001dba <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <LL_SetFlashLatency+0x100>)
 8001d76:	4290      	cmp	r0, r2
 8001d78:	d83e      	bhi.n	8001df8 <LL_SetFlashLatency+0xe4>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <LL_SetFlashLatency+0x104>)
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d92e      	bls.n	8001dde <LL_SetFlashLatency+0xca>
 8001d80:	2000      	movs	r0, #0
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <LL_SetFlashLatency+0xf8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2801      	cmp	r0, #1
 8001d88:	bf38      	it	cc
 8001d8a:	2001      	movcc	r0, #1
 8001d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d94:	d01f      	beq.n	8001dd6 <LL_SetFlashLatency+0xc2>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <LL_SetFlashLatency+0x108>)
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	4303      	orrs	r3, r0
 8001da0:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8001da8:	4298      	cmp	r0, r3
 8001daa:	bf1c      	itt	ne
 8001dac:	6813      	ldrne	r3, [r2, #0]
 8001dae:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8001db2:	1ac0      	subs	r0, r0, r3
 8001db4:	bf18      	it	ne
 8001db6:	2001      	movne	r0, #1
 8001db8:	4770      	bx	lr
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc4:	d10c      	bne.n	8001de0 <LL_SetFlashLatency+0xcc>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <LL_SetFlashLatency+0x100>)
 8001dc8:	4298      	cmp	r0, r3
 8001dca:	d81a      	bhi.n	8001e02 <LL_SetFlashLatency+0xee>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <LL_SetFlashLatency+0x104>)
 8001dce:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001dd0:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dd4:	d9df      	bls.n	8001d96 <LL_SetFlashLatency+0x82>
 8001dd6:	2801      	cmp	r0, #1
 8001dd8:	bf38      	it	cc
 8001dda:	2001      	movcc	r0, #1
 8001ddc:	e7db      	b.n	8001d96 <LL_SetFlashLatency+0x82>
 8001dde:	681b      	ldr	r3, [r3, #0]
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7d8      	b.n	8001d96 <LL_SetFlashLatency+0x82>
 8001de4:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001de6:	2003      	movs	r0, #3
 8001de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dec:	e7d0      	b.n	8001d90 <LL_SetFlashLatency+0x7c>
 8001dee:	681b      	ldr	r3, [r3, #0]
          latency = LL_FLASH_LATENCY_1;
 8001df0:	2001      	movs	r0, #1
 8001df2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df6:	e7cb      	b.n	8001d90 <LL_SetFlashLatency+0x7c>
 8001df8:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e00:	e7c6      	b.n	8001d90 <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e02:	2002      	movs	r0, #2
 8001e04:	e7c7      	b.n	8001d96 <LL_SetFlashLatency+0x82>
    status = ERROR;
 8001e06:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	055d4a80 	.word	0x055d4a80
 8001e14:	03d09000 	.word	0x03d09000
 8001e18:	01c9c380 	.word	0x01c9c380
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <z_sys_init_run_level+0x40>)
{
 8001e22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001e28:	3001      	adds	r0, #1
 8001e2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001e2e:	42a6      	cmp	r6, r4
 8001e30:	d800      	bhi.n	8001e34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001e34:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001e38:	4628      	mov	r0, r5
 8001e3a:	4798      	blx	r3
		if (dev != NULL) {
 8001e3c:	b16d      	cbz	r5, 8001e5a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8001e3e:	b138      	cbz	r0, 8001e50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001e40:	2800      	cmp	r0, #0
 8001e42:	bfb8      	it	lt
 8001e44:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001e46:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8001e48:	28ff      	cmp	r0, #255	; 0xff
 8001e4a:	bfa8      	it	ge
 8001e4c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8001e4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001e50:	68ea      	ldr	r2, [r5, #12]
 8001e52:	7853      	ldrb	r3, [r2, #1]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e5a:	3408      	adds	r4, #8
 8001e5c:	e7e7      	b.n	8001e2e <z_sys_init_run_level+0xe>
 8001e5e:	bf00      	nop
 8001e60:	08003a7c 	.word	0x08003a7c

08001e64 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001e64:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <bg_thread_main+0x2c>)
 8001e68:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001e6a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8001e6c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001e6e:	f7ff ffd7 	bl	8001e20 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001e72:	f000 fd57 	bl	8002924 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8001e76:	2004      	movs	r0, #4
 8001e78:	f7ff ffd2 	bl	8001e20 <z_sys_init_run_level>

	z_init_static_threads();
 8001e7c:	f000 f8ee 	bl	800205c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8001e80:	f7fe faf4 	bl	800046c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <bg_thread_main+0x30>)
 8001e86:	7b13      	ldrb	r3, [r2, #12]
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	200002f1 	.word	0x200002f1
 8001e94:	200000e0 	.word	0x200000e0

08001e98 <z_bss_zero>:
{
 8001e98:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <z_bss_zero+0x10>)
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <z_bss_zero+0x14>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	1a12      	subs	r2, r2, r0
 8001ea2:	f001 f9ec 	bl	800327e <z_early_memset>
}
 8001ea6:	bd08      	pop	{r3, pc}
 8001ea8:	20000060 	.word	0x20000060
 8001eac:	200002f4 	.word	0x200002f4

08001eb0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8001eb2:	2300      	movs	r3, #0
{
 8001eb4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8001ebc:	4e13      	ldr	r6, [pc, #76]	; (8001f0c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001ebe:	4d14      	ldr	r5, [pc, #80]	; (8001f10 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001ec8:	4912      	ldr	r1, [pc, #72]	; (8001f14 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001eca:	2318      	movs	r3, #24
 8001ecc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8001ed0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8001ed4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8001ed6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001eda:	fb00 1104 	mla	r1, r0, r4, r1
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <z_init_cpu+0x68>)
 8001ee0:	9500      	str	r5, [sp, #0]
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f000 f886 	bl	8001ff8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001eec:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8001ef0:	60ee      	str	r6, [r5, #12]
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001ef8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001efc:	fb04 3303 	mla	r3, r4, r3, r3
 8001f00:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 8001f02:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 8001f04:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8001f06:	b006      	add	sp, #24
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000060 	.word	0x20000060
 8001f10:	200002bc 	.word	0x200002bc
 8001f14:	20000b40 	.word	0x20000b40
 8001f18:	08003287 	.word	0x08003287
 8001f1c:	20000300 	.word	0x20000300

08001f20 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8001f20:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8001f22:	2000      	movs	r0, #0
{
 8001f24:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8001f26:	f7ff ff7b 	bl	8001e20 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001f2c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001f30:	4d2b      	ldr	r5, [pc, #172]	; (8001fe0 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8001f32:	4e2c      	ldr	r6, [pc, #176]	; (8001fe4 <z_cstart+0xc4>)
 8001f34:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f36:	4f2c      	ldr	r7, [pc, #176]	; (8001fe8 <z_cstart+0xc8>)
 8001f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3c:	616b      	str	r3, [r5, #20]
 8001f3e:	2400      	movs	r4, #0
 8001f40:	23f0      	movs	r3, #240	; 0xf0
 8001f42:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001f46:	77ec      	strb	r4, [r5, #31]
 8001f48:	762c      	strb	r4, [r5, #24]
 8001f4a:	766c      	strb	r4, [r5, #25]
 8001f4c:	76ac      	strb	r4, [r5, #26]
 8001f4e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f54:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001f58:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001f5a:	f7ff f8ab 	bl	80010b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001f5e:	f7fe fe95 	bl	8000c8c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f66:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001f68:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8001f6a:	f7ff f985 	bl	8001278 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8001f6e:	f7ff f8eb 	bl	8001148 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001f72:	f240 1301 	movw	r3, #257	; 0x101
 8001f76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001f7a:	ab06      	add	r3, sp, #24
 8001f7c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8001f7e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8001f82:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8001f84:	f001 f948 	bl	8003218 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff ff49 	bl	8001e20 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8001f8e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8001f90:	4d16      	ldr	r5, [pc, #88]	; (8001fec <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8001f92:	f7ff ff45 	bl	8001e20 <z_sys_init_run_level>
	z_sched_init();
 8001f96:	f000 fa5f 	bl	8002458 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 8001f9c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f9e:	9305      	str	r3, [sp, #20]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <z_cstart+0xd4>)
 8001fa4:	9400      	str	r4, [sp, #0]
 8001fa6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fae:	463b      	mov	r3, r7
 8001fb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f000 f81f 	bl	8001ff8 <z_setup_new_thread>
 8001fba:	7b6a      	ldrb	r2, [r5, #13]
 8001fbc:	4606      	mov	r6, r0
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	736a      	strb	r2, [r5, #13]
 8001fc6:	f001 f99e 	bl	8003306 <z_ready_thread>
	z_init_cpu(0);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff ff70 	bl	8001eb0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001fd0:	463a      	mov	r2, r7
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	4628      	mov	r0, r5
 8001fd6:	f7fe ff41 	bl	8000e5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001fda:	bf00      	nop
 8001fdc:	20000b40 	.word	0x20000b40
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	200002bc 	.word	0x200002bc
 8001fe8:	08001e65 	.word	0x08001e65
 8001fec:	200000e0 	.word	0x200000e0
 8001ff0:	08003bb2 	.word	0x08003bb2
 8001ff4:	20000cc0 	.word	0x20000cc0

08001ff8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8001ff8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8001ffc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001ffe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002000:	2604      	movs	r6, #4
 8002002:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002004:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002006:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002008:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800200c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800200e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002010:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8002016:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002018:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800201c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800201e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8002022:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8002026:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002028:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800202a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800202c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002030:	9202      	str	r2, [sp, #8]
 8002032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002034:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8002036:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	4642      	mov	r2, r8
{
 800203e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002040:	f7fe feda 	bl	8000df8 <arch_new_thread>
	if (!_current) {
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8002046:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	b103      	cbz	r3, 800204e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 800204e:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002050:	4640      	mov	r0, r8
 8002052:	b004      	add	sp, #16
 8002054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002058:	200002bc 	.word	0x200002bc

0800205c <z_init_static_threads>:
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	4c22      	ldr	r4, [pc, #136]	; (80020e8 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002060:	4d22      	ldr	r5, [pc, #136]	; (80020ec <z_init_static_threads+0x90>)
{
 8002062:	b087      	sub	sp, #28
 8002064:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8002066:	42ae      	cmp	r6, r5
 8002068:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800206c:	d30b      	bcc.n	8002086 <z_init_static_threads+0x2a>
	k_sched_lock();
 800206e:	f000 f9c3 	bl	80023f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002072:	4c1d      	ldr	r4, [pc, #116]	; (80020e8 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002074:	4f1e      	ldr	r7, [pc, #120]	; (80020f0 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002076:	260a      	movs	r6, #10
 8002078:	42ac      	cmp	r4, r5
 800207a:	d320      	bcc.n	80020be <z_init_static_threads+0x62>
}
 800207c:	b007      	add	sp, #28
 800207e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002082:	f000 b9cd 	b.w	8002420 <k_sched_unlock>
		z_setup_new_thread(
 8002086:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800208a:	9305      	str	r3, [sp, #20]
 800208c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002090:	9304      	str	r3, [sp, #16]
 8002092:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002096:	9303      	str	r3, [sp, #12]
 8002098:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80020ae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80020b2:	f7ff ffa1 	bl	8001ff8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80020b6:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80020ba:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80020bc:	e7d2      	b.n	8002064 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80020be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020c0:	1c53      	adds	r3, r2, #1
 80020c2:	d009      	beq.n	80020d8 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80020c4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80020c8:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80020cc:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80020d0:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80020d2:	d103      	bne.n	80020dc <z_init_static_threads+0x80>
	z_sched_start(thread);
 80020d4:	f000 f940 	bl	8002358 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80020d8:	3430      	adds	r4, #48	; 0x30
 80020da:	e7cd      	b.n	8002078 <z_init_static_threads+0x1c>
 80020dc:	4639      	mov	r1, r7
 80020de:	3018      	adds	r0, #24
 80020e0:	f000 fb2e 	bl	8002740 <z_add_timeout>
 80020e4:	e7f8      	b.n	80020d8 <z_init_static_threads+0x7c>
 80020e6:	bf00      	nop
 80020e8:	08003818 	.word	0x08003818
 80020ec:	08003818 	.word	0x08003818
 80020f0:	080032c3 	.word	0x080032c3

080020f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 80020f4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 80020f6:	4d07      	ldr	r5, [pc, #28]	; (8002114 <z_reset_time_slice+0x20>)
 80020f8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80020fa:	b154      	cbz	r4, 8002112 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80020fc:	f7ff fd7c 	bl	8001bf8 <sys_clock_elapsed>
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <z_reset_time_slice+0x24>)
 8002102:	4404      	add	r4, r0
 8002104:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 8002106:	6828      	ldr	r0, [r5, #0]
 8002108:	2100      	movs	r1, #0
	}
}
 800210a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800210e:	f001 b936 	b.w	800337e <z_set_timeout_expiry>
}
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	200002e8 	.word	0x200002e8
 8002118:	200002bc 	.word	0x200002bc

0800211c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 800211c:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800211e:	4d0d      	ldr	r5, [pc, #52]	; (8002154 <update_cache+0x38>)
 8002120:	462b      	mov	r3, r5
 8002122:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002126:	429c      	cmp	r4, r3
 8002128:	d000      	beq.n	800212c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800212a:	b904      	cbnz	r4, 800212e <update_cache+0x12>
 800212c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800212e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8002130:	b938      	cbnz	r0, 8002142 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8002132:	7b5a      	ldrb	r2, [r3, #13]
 8002134:	06d2      	lsls	r2, r2, #27
 8002136:	d104      	bne.n	8002142 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002138:	69a2      	ldr	r2, [r4, #24]
 800213a:	b912      	cbnz	r2, 8002142 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 800213c:	89da      	ldrh	r2, [r3, #14]
 800213e:	2a7f      	cmp	r2, #127	; 0x7f
 8002140:	d805      	bhi.n	800214e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8002142:	429c      	cmp	r4, r3
 8002144:	d002      	beq.n	800214c <update_cache+0x30>
			z_reset_time_slice(thread);
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff ffd4 	bl	80020f4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 800214c:	4623      	mov	r3, r4
 800214e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8002150:	bd38      	pop	{r3, r4, r5, pc}
 8002152:	bf00      	nop
 8002154:	200002bc 	.word	0x200002bc

08002158 <move_thread_to_end_of_prio_q>:
{
 8002158:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800215a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800215e:	7b43      	ldrb	r3, [r0, #13]
 8002160:	2a00      	cmp	r2, #0
{
 8002162:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002164:	da04      	bge.n	8002170 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800216a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800216c:	f001 f897 	bl	800329e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002170:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8002172:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <move_thread_to_end_of_prio_q+0x70>)
 8002174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002178:	4610      	mov	r0, r2
 800217a:	734b      	strb	r3, [r1, #13]
 800217c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002180:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002182:	4283      	cmp	r3, r0
 8002184:	bf08      	it	eq
 8002186:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002188:	b923      	cbnz	r3, 8002194 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800218a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 800218e:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8002190:	6211      	str	r1, [r2, #32]
}
 8002192:	e00c      	b.n	80021ae <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8002194:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002198:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800219c:	42b5      	cmp	r5, r6
 800219e:	d00e      	beq.n	80021be <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80021a0:	42ae      	cmp	r6, r5
 80021a2:	dd0c      	ble.n	80021be <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80021a4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80021a6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80021aa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80021ac:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80021ae:	6890      	ldr	r0, [r2, #8]
 80021b0:	1a43      	subs	r3, r0, r1
 80021b2:	4258      	negs	r0, r3
}
 80021b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80021b8:	4158      	adcs	r0, r3
 80021ba:	f7ff bfaf 	b.w	800211c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80021be:	429c      	cmp	r4, r3
 80021c0:	d0e3      	beq.n	800218a <move_thread_to_end_of_prio_q+0x32>
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e7e0      	b.n	8002188 <move_thread_to_end_of_prio_q+0x30>
 80021c6:	bf00      	nop
 80021c8:	200002bc 	.word	0x200002bc

080021cc <ready_thread>:
{
 80021cc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80021ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80021d2:	7b42      	ldrb	r2, [r0, #13]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db29      	blt.n	800222c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80021d8:	06d3      	lsls	r3, r2, #27
 80021da:	d127      	bne.n	800222c <ready_thread+0x60>
	return node->next != NULL;
 80021dc:	6983      	ldr	r3, [r0, #24]
 80021de:	bb2b      	cbnz	r3, 800222c <ready_thread+0x60>
	return list->head == list;
 80021e0:	4913      	ldr	r1, [pc, #76]	; (8002230 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80021e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021e6:	7342      	strb	r2, [r0, #13]
 80021e8:	460a      	mov	r2, r1
 80021ea:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80021ee:	4294      	cmp	r4, r2
 80021f0:	bf18      	it	ne
 80021f2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80021f4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80021f6:	b923      	cbnz	r3, 8002202 <ready_thread+0x36>
	node->prev = tail;
 80021f8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80021fc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80021fe:	6208      	str	r0, [r1, #32]
}
 8002200:	e00c      	b.n	800221c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 8002202:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8002206:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800220a:	42b5      	cmp	r5, r6
 800220c:	d00a      	beq.n	8002224 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800220e:	42ae      	cmp	r6, r5
 8002210:	dd08      	ble.n	8002224 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 8002212:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002214:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8002218:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800221a:	6058      	str	r0, [r3, #4]
}
 800221c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff bf7c 	b.w	800211c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002224:	42a3      	cmp	r3, r4
 8002226:	d0e7      	beq.n	80021f8 <ready_thread+0x2c>
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e7e4      	b.n	80021f6 <ready_thread+0x2a>
}
 800222c:	bc70      	pop	{r4, r5, r6}
 800222e:	4770      	bx	lr
 8002230:	200002bc 	.word	0x200002bc

08002234 <unready_thread>:
{
 8002234:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002236:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800223a:	7b43      	ldrb	r3, [r0, #13]
 800223c:	2a00      	cmp	r2, #0
{
 800223e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002240:	da04      	bge.n	800224c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002246:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002248:	f001 f829 	bl	800329e <sys_dlist_remove>
	update_cache(thread == _current);
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <unready_thread+0x2c>)
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	1a43      	subs	r3, r0, r1
 8002252:	4258      	negs	r0, r3
 8002254:	4158      	adcs	r0, r3
}
 8002256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800225a:	f7ff bf5f 	b.w	800211c <update_cache>
 800225e:	bf00      	nop
 8002260:	200002bc 	.word	0x200002bc

08002264 <k_sched_time_slice_set>:
{
 8002264:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002266:	f04f 0310 	mov.w	r3, #16
 800226a:	f3ef 8411 	mrs	r4, BASEPRI
 800226e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002272:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 8002276:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002278:	2800      	cmp	r0, #0
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	dd02      	ble.n	8002286 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8002280:	2b02      	cmp	r3, #2
 8002282:	bfb8      	it	lt
 8002284:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <k_sched_time_slice_set+0x40>)
 8002288:	2000      	movs	r0, #0
 800228a:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <k_sched_time_slice_set+0x44>)
 800228e:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 8002292:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8002294:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8002296:	f7ff ff2d 	bl	80020f4 <z_reset_time_slice>
	__asm__ volatile(
 800229a:	f384 8811 	msr	BASEPRI, r4
 800229e:	f3bf 8f6f 	isb	sy
}
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	200002bc 	.word	0x200002bc
 80022a8:	200002e8 	.word	0x200002e8
 80022ac:	200002e4 	.word	0x200002e4

080022b0 <z_time_slice>:
{
 80022b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80022b2:	f04f 0310 	mov.w	r3, #16
 80022b6:	f3ef 8511 	mrs	r5, BASEPRI
 80022ba:	f383 8812 	msr	BASEPRI_MAX, r3
 80022be:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <z_time_slice+0x70>)
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <z_time_slice+0x74>)
 80022c6:	689c      	ldr	r4, [r3, #8]
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	428c      	cmp	r4, r1
 80022cc:	d107      	bne.n	80022de <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff ff10 	bl	80020f4 <z_reset_time_slice>
	__asm__ volatile(
 80022d4:	f385 8811 	msr	BASEPRI, r5
 80022d8:	f3bf 8f6f 	isb	sy
}
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80022de:	2100      	movs	r1, #0
 80022e0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	b1c2      	cbz	r2, 800231a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80022e8:	89e2      	ldrh	r2, [r4, #14]
 80022ea:	2a7f      	cmp	r2, #127	; 0x7f
 80022ec:	d815      	bhi.n	800231a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80022ee:	7b62      	ldrb	r2, [r4, #13]
 80022f0:	06d2      	lsls	r2, r2, #27
 80022f2:	d112      	bne.n	800231a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <z_time_slice+0x7c>)
 80022f6:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4291      	cmp	r1, r2
 80022fe:	db0c      	blt.n	800231a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <z_time_slice+0x80>)
 8002302:	4294      	cmp	r4, r2
 8002304:	d009      	beq.n	800231a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4282      	cmp	r2, r0
 800230a:	dc03      	bgt.n	8002314 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff ff23 	bl	8002158 <move_thread_to_end_of_prio_q>
 8002312:	e7dc      	b.n	80022ce <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8002314:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	e7dc      	b.n	80022d4 <z_time_slice+0x24>
 800231a:	2200      	movs	r2, #0
 800231c:	e7fb      	b.n	8002316 <z_time_slice+0x66>
 800231e:	bf00      	nop
 8002320:	200002bc 	.word	0x200002bc
 8002324:	200002e0 	.word	0x200002e0
 8002328:	200002e8 	.word	0x200002e8
 800232c:	200002e4 	.word	0x200002e4
 8002330:	20000060 	.word	0x20000060

08002334 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002334:	b949      	cbnz	r1, 800234a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002336:	f3ef 8005 	mrs	r0, IPSR
 800233a:	b930      	cbnz	r0, 800234a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <z_reschedule+0x16>
	ret = arch_swap(key);
 8002346:	f7fe bd03 	b.w	8000d50 <arch_swap>
 800234a:	f381 8811 	msr	BASEPRI, r1
 800234e:	f3bf 8f6f 	isb	sy
}
 8002352:	4770      	bx	lr
 8002354:	200002bc 	.word	0x200002bc

08002358 <z_sched_start>:
{
 8002358:	b510      	push	{r4, lr}
	__asm__ volatile(
 800235a:	f04f 0210 	mov.w	r2, #16
 800235e:	f3ef 8411 	mrs	r4, BASEPRI
 8002362:	f382 8812 	msr	BASEPRI_MAX, r2
 8002366:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800236a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800236c:	0751      	lsls	r1, r2, #29
 800236e:	d404      	bmi.n	800237a <z_sched_start+0x22>
	__asm__ volatile(
 8002370:	f384 8811 	msr	BASEPRI, r4
 8002374:	f3bf 8f6f 	isb	sy
}
 8002378:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002380:	f7ff ff24 	bl	80021cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002384:	4621      	mov	r1, r4
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <z_sched_start+0x38>)
}
 8002388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 800238c:	f7ff bfd2 	b.w	8002334 <z_reschedule>
 8002390:	200002f2 	.word	0x200002f2

08002394 <z_impl_k_thread_suspend>:
{
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002398:	3018      	adds	r0, #24
 800239a:	f000 ffda 	bl	8003352 <z_abort_timeout>
	__asm__ volatile(
 800239e:	f04f 0310 	mov.w	r3, #16
 80023a2:	f3ef 8611 	mrs	r6, BASEPRI
 80023a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80023aa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80023ae:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 80023b2:	7b63      	ldrb	r3, [r4, #13]
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	da05      	bge.n	80023c4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80023b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023bc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80023be:	4620      	mov	r0, r4
 80023c0:	f000 ff6d 	bl	800329e <sys_dlist_remove>
		update_cache(thread == _current);
 80023c4:	4d0b      	ldr	r5, [pc, #44]	; (80023f4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80023c6:	7b63      	ldrb	r3, [r4, #13]
 80023c8:	68a8      	ldr	r0, [r5, #8]
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	7363      	strb	r3, [r4, #13]
 80023d0:	1b03      	subs	r3, r0, r4
 80023d2:	4258      	negs	r0, r3
 80023d4:	4158      	adcs	r0, r3
 80023d6:	f7ff fea1 	bl	800211c <update_cache>
	__asm__ volatile(
 80023da:	f386 8811 	msr	BASEPRI, r6
 80023de:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80023e2:	68ab      	ldr	r3, [r5, #8]
 80023e4:	42a3      	cmp	r3, r4
 80023e6:	d103      	bne.n	80023f0 <z_impl_k_thread_suspend+0x5c>
}
 80023e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80023ec:	f000 bfa7 	b.w	800333e <z_reschedule_unlocked>
}
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	bf00      	nop
 80023f4:	200002bc 	.word	0x200002bc

080023f8 <k_sched_lock>:
	__asm__ volatile(
 80023f8:	f04f 0310 	mov.w	r3, #16
 80023fc:	f3ef 8111 	mrs	r1, BASEPRI
 8002400:	f383 8812 	msr	BASEPRI_MAX, r3
 8002404:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <k_sched_lock+0x24>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	7bd3      	ldrb	r3, [r2, #15]
 800240e:	3b01      	subs	r3, #1
 8002410:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8002412:	f381 8811 	msr	BASEPRI, r1
 8002416:	f3bf 8f6f 	isb	sy
}
 800241a:	4770      	bx	lr
 800241c:	200002bc 	.word	0x200002bc

08002420 <k_sched_unlock>:
{
 8002420:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002422:	f04f 0310 	mov.w	r3, #16
 8002426:	f3ef 8411 	mrs	r4, BASEPRI
 800242a:	f383 8812 	msr	BASEPRI_MAX, r3
 800242e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <k_sched_unlock+0x34>)
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	7bd3      	ldrb	r3, [r2, #15]
 8002438:	3301      	adds	r3, #1
 800243a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fe6d 	bl	800211c <update_cache>
	__asm__ volatile(
 8002442:	f384 8811 	msr	BASEPRI, r4
 8002446:	f3bf 8f6f 	isb	sy
}
 800244a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800244e:	f000 bf76 	b.w	800333e <z_reschedule_unlocked>
 8002452:	bf00      	nop
 8002454:	200002bc 	.word	0x200002bc

08002458 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800245a:	2100      	movs	r1, #0
 800245c:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8002460:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8002464:	4608      	mov	r0, r1
 8002466:	f7ff befd 	b.w	8002264 <k_sched_time_slice_set>
 800246a:	bf00      	nop
 800246c:	200002bc 	.word	0x200002bc

08002470 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8002472:	f04f 0310 	mov.w	r3, #16
 8002476:	f3ef 8511 	mrs	r5, BASEPRI
 800247a:	f383 8812 	msr	BASEPRI_MAX, r3
 800247e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8002482:	4919      	ldr	r1, [pc, #100]	; (80024e8 <z_impl_k_yield+0x78>)
 8002484:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002486:	7b43      	ldrb	r3, [r0, #13]
 8002488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800248e:	f000 ff06 	bl	800329e <sys_dlist_remove>
	}
	queue_thread(_current);
 8002492:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8002494:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8002496:	4608      	mov	r0, r1
 8002498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800249c:	735a      	strb	r2, [r3, #13]
 800249e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 80024a2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80024a4:	4282      	cmp	r2, r0
 80024a6:	bf08      	it	eq
 80024a8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80024aa:	b922      	cbnz	r2, 80024b6 <z_impl_k_yield+0x46>
	node->prev = tail;
 80024ac:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 80024b0:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80024b2:	620b      	str	r3, [r1, #32]
}
 80024b4:	e00c      	b.n	80024d0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 80024b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80024ba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 80024be:	42be      	cmp	r6, r7
 80024c0:	d00e      	beq.n	80024e0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80024c2:	42b7      	cmp	r7, r6
 80024c4:	dd0c      	ble.n	80024e0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 80024c6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80024c8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80024cc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80024ce:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff fe23 	bl	800211c <update_cache>
 80024d6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80024d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024dc:	f7fe bc38 	b.w	8000d50 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80024e0:	42a2      	cmp	r2, r4
 80024e2:	d0e3      	beq.n	80024ac <z_impl_k_yield+0x3c>
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	e7e0      	b.n	80024aa <z_impl_k_yield+0x3a>
 80024e8:	200002bc 	.word	0x200002bc

080024ec <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80024ec:	ea50 0301 	orrs.w	r3, r0, r1
{
 80024f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f4:	4605      	mov	r5, r0
 80024f6:	460e      	mov	r6, r1
	if (ticks == 0) {
 80024f8:	d103      	bne.n	8002502 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 80024fa:	f7ff ffb9 	bl	8002470 <z_impl_k_yield>
		k_yield();
		return 0;
 80024fe:	2000      	movs	r0, #0
 8002500:	e02c      	b.n	800255c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 8002502:	1c83      	adds	r3, r0, #2
 8002504:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8002508:	db2a      	blt.n	8002560 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800250a:	f000 ff54 	bl	80033b6 <sys_clock_tick_get_32>
 800250e:	182c      	adds	r4, r5, r0
 8002510:	f04f 0310 	mov.w	r3, #16
 8002514:	f3ef 8811 	mrs	r8, BASEPRI
 8002518:	f383 8812 	msr	BASEPRI_MAX, r3
 800251c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002520:	4f11      	ldr	r7, [pc, #68]	; (8002568 <z_tick_sleep+0x7c>)
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <z_tick_sleep+0x80>)
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8002528:	f7ff fe84 	bl	8002234 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800252c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800252e:	4910      	ldr	r1, [pc, #64]	; (8002570 <z_tick_sleep+0x84>)
 8002530:	462a      	mov	r2, r5
 8002532:	4633      	mov	r3, r6
 8002534:	3018      	adds	r0, #24
 8002536:	f000 f903 	bl	8002740 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800253a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800253c:	7b53      	ldrb	r3, [r2, #13]
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	7353      	strb	r3, [r2, #13]
 8002544:	4640      	mov	r0, r8
 8002546:	f7fe fc03 	bl	8000d50 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800254a:	f000 ff34 	bl	80033b6 <sys_clock_tick_get_32>
 800254e:	1a20      	subs	r0, r4, r0
 8002550:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8002554:	2801      	cmp	r0, #1
 8002556:	f173 0300 	sbcs.w	r3, r3, #0
 800255a:	dbd0      	blt.n	80024fe <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 800255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8002560:	f06f 0401 	mvn.w	r4, #1
 8002564:	1a24      	subs	r4, r4, r0
 8002566:	e7d3      	b.n	8002510 <z_tick_sleep+0x24>
 8002568:	200002bc 	.word	0x200002bc
 800256c:	200002e0 	.word	0x200002e0
 8002570:	080032c3 	.word	0x080032c3

08002574 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002574:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002578:	bf08      	it	eq
 800257a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800257e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002580:	d106      	bne.n	8002590 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <z_impl_k_sleep+0x2c>)
 8002584:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 8002586:	f7ff ff05 	bl	8002394 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800258e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002590:	f7ff ffac 	bl	80024ec <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002594:	220a      	movs	r2, #10
 8002596:	2300      	movs	r3, #0
 8002598:	17c1      	asrs	r1, r0, #31
 800259a:	f7fd fdfd 	bl	8000198 <__aeabi_uldivmod>
	return ret;
 800259e:	e7f6      	b.n	800258e <z_impl_k_sleep+0x1a>
 80025a0:	200002bc 	.word	0x200002bc

080025a4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80025a4:	4b01      	ldr	r3, [pc, #4]	; (80025ac <z_impl_z_current_get+0x8>)
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	200002bc 	.word	0x200002bc

080025b0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80025b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b4:	4604      	mov	r4, r0
 80025b6:	f04f 0310 	mov.w	r3, #16
 80025ba:	f3ef 8611 	mrs	r6, BASEPRI
 80025be:	f383 8812 	msr	BASEPRI_MAX, r3
 80025c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 80025c6:	7b03      	ldrb	r3, [r0, #12]
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	d50b      	bpl.n	80025e4 <z_thread_abort+0x34>
	__asm__ volatile(
 80025cc:	f386 8811 	msr	BASEPRI, r6
 80025d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 80025d4:	4040      	eors	r0, r0
 80025d6:	f380 8811 	msr	BASEPRI, r0
 80025da:	f04f 0004 	mov.w	r0, #4
 80025de:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80025e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80025e4:	7b43      	ldrb	r3, [r0, #13]
 80025e6:	071a      	lsls	r2, r3, #28
 80025e8:	d504      	bpl.n	80025f4 <z_thread_abort+0x44>
 80025ea:	f386 8811 	msr	BASEPRI, r6
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	e7f5      	b.n	80025e0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80025f4:	f023 0220 	bic.w	r2, r3, #32
 80025f8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80025fc:	09d2      	lsrs	r2, r2, #7
 80025fe:	d120      	bne.n	8002642 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002600:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002602:	68a3      	ldr	r3, [r4, #8]
 8002604:	b113      	cbz	r3, 800260c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8002606:	4620      	mov	r0, r4
 8002608:	f000 fe51 	bl	80032ae <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 800260c:	f104 0018 	add.w	r0, r4, #24
 8002610:	f000 fe9f 	bl	8003352 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002614:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002618:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 800261c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800261e:	42bd      	cmp	r5, r7
 8002620:	d000      	beq.n	8002624 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002622:	b9b5      	cbnz	r5, 8002652 <z_thread_abort+0xa2>
		update_cache(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff fd79 	bl	800211c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <z_thread_abort+0xbc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	42a3      	cmp	r3, r4
 8002630:	d1db      	bne.n	80025ea <z_thread_abort+0x3a>
 8002632:	f3ef 8305 	mrs	r3, IPSR
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1d7      	bne.n	80025ea <z_thread_abort+0x3a>
 800263a:	4630      	mov	r0, r6
 800263c:	f7fe fb88 	bl	8000d50 <arch_swap>
	return ret;
 8002640:	e7d3      	b.n	80025ea <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002642:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800264c:	f000 fe27 	bl	800329e <sys_dlist_remove>
}
 8002650:	e7d7      	b.n	8002602 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002652:	4628      	mov	r0, r5
 8002654:	f000 fe2b 	bl	80032ae <unpend_thread_no_timeout>
 8002658:	f105 0018 	add.w	r0, r5, #24
 800265c:	f000 fe79 	bl	8003352 <z_abort_timeout>
 8002660:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8002664:	4628      	mov	r0, r5
 8002666:	f7ff fdb1 	bl	80021cc <ready_thread>
 800266a:	e7d7      	b.n	800261c <z_thread_abort+0x6c>
 800266c:	200002bc 	.word	0x200002bc

08002670 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8002670:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002672:	4806      	ldr	r0, [pc, #24]	; (800268c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <z_data_copy+0x20>)
 8002676:	4907      	ldr	r1, [pc, #28]	; (8002694 <z_data_copy+0x24>)
 8002678:	1a12      	subs	r2, r2, r0
 800267a:	f000 fe02 	bl	8003282 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800267e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <z_data_copy+0x28>)
 8002684:	4905      	ldr	r1, [pc, #20]	; (800269c <z_data_copy+0x2c>)
 8002686:	4806      	ldr	r0, [pc, #24]	; (80026a0 <z_data_copy+0x30>)
 8002688:	f000 bdfb 	b.w	8003282 <z_early_memcpy>
 800268c:	20000000 	.word	0x20000000
 8002690:	20000060 	.word	0x20000060
 8002694:	08003bfc 	.word	0x08003bfc
 8002698:	00000000 	.word	0x00000000
 800269c:	08003bfc 	.word	0x08003bfc
 80026a0:	20000000 	.word	0x20000000

080026a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <elapsed+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b90b      	cbnz	r3, 80026ae <elapsed+0xa>
 80026aa:	f7ff baa5 	b.w	8001bf8 <sys_clock_elapsed>
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200002ec 	.word	0x200002ec

080026b8 <next_timeout>:

static int32_t next_timeout(void)
{
 80026b8:	b510      	push	{r4, lr}
	return list->head == list;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <next_timeout+0x48>)
 80026bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80026be:	429c      	cmp	r4, r3
 80026c0:	d10a      	bne.n	80026d8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80026c2:	f7ff ffef 	bl	80026a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 80026c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <next_timeout+0x4c>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	b113      	cbz	r3, 80026d6 <next_timeout+0x1e>
 80026d0:	4298      	cmp	r0, r3
 80026d2:	bfa8      	it	ge
 80026d4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80026d6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80026d8:	f7ff ffe4 	bl	80026a4 <elapsed>
	if ((to == NULL) ||
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d0f2      	beq.n	80026c6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80026e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80026e4:	1a1b      	subs	r3, r3, r0
 80026e6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80026ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ee:	f172 0100 	sbcs.w	r1, r2, #0
 80026f2:	dae8      	bge.n	80026c6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	bfac      	ite	ge
 80026f8:	4618      	movge	r0, r3
 80026fa:	2000      	movlt	r0, #0
 80026fc:	e7e5      	b.n	80026ca <next_timeout+0x12>
 80026fe:	bf00      	nop
 8002700:	20000040 	.word	0x20000040
 8002704:	200002bc 	.word	0x200002bc

08002708 <remove_timeout>:
{
 8002708:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800270a:	b170      	cbz	r0, 800272a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <remove_timeout+0x34>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4298      	cmp	r0, r3
 8002712:	d00a      	beq.n	800272a <remove_timeout+0x22>
 8002714:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8002716:	b143      	cbz	r3, 800272a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002718:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 800271c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002720:	1912      	adds	r2, r2, r4
 8002722:	eb41 0105 	adc.w	r1, r1, r5
 8002726:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 800272a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 800272e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002730:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002732:	2300      	movs	r3, #0
	node->prev = NULL;
 8002734:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002738:	bd30      	pop	{r4, r5, pc}
 800273a:	bf00      	nop
 800273c:	20000040 	.word	0x20000040

08002740 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002744:	bf08      	it	eq
 8002746:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800274a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274c:	4604      	mov	r4, r0
 800274e:	461d      	mov	r5, r3
 8002750:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002752:	d061      	beq.n	8002818 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002754:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8002756:	f04f 0310 	mov.w	r3, #16
 800275a:	f3ef 8711 	mrs	r7, BASEPRI
 800275e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002762:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8002766:	3201      	adds	r2, #1
 8002768:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 800276c:	da24      	bge.n	80027b8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800276e:	4930      	ldr	r1, [pc, #192]	; (8002830 <z_add_timeout+0xf0>)
 8002770:	e9d1 2000 	ldrd	r2, r0, [r1]
 8002774:	f06f 0301 	mvn.w	r3, #1
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800277e:	eb62 0000 	sbc.w	r0, r2, r0
 8002782:	1b9e      	subs	r6, r3, r6
 8002784:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8002788:	2e01      	cmp	r6, #1
 800278a:	f170 0300 	sbcs.w	r3, r0, #0
 800278e:	da01      	bge.n	8002794 <z_add_timeout+0x54>
 8002790:	2601      	movs	r6, #1
 8002792:	2000      	movs	r0, #0
 8002794:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8002798:	4e26      	ldr	r6, [pc, #152]	; (8002834 <z_add_timeout+0xf4>)
 800279a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 800279e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027a0:	45b4      	cmp	ip, r6
 80027a2:	bf08      	it	eq
 80027a4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 80027a8:	f1bc 0f00 	cmp.w	ip, #0
 80027ac:	d10d      	bne.n	80027ca <z_add_timeout+0x8a>
	node->prev = tail;
 80027ae:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 80027b2:	602c      	str	r4, [r5, #0]
	list->tail = node;
 80027b4:	6074      	str	r4, [r6, #4]
}
 80027b6:	e01c      	b.n	80027f2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 80027b8:	f7ff ff74 	bl	80026a4 <elapsed>
 80027bc:	3601      	adds	r6, #1
 80027be:	f145 0500 	adc.w	r5, r5, #0
 80027c2:	1836      	adds	r6, r6, r0
 80027c4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 80027c8:	e7e4      	b.n	8002794 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 80027ca:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 80027ce:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	eb71 0e00 	sbcs.w	lr, r1, r0
 80027d8:	da1f      	bge.n	800281a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 80027da:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 80027dc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80027e0:	eb60 0001 	sbc.w	r0, r0, r1
 80027e4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 80027e8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 80027ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80027ee:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 80027f2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027f4:	42b3      	cmp	r3, r6
 80027f6:	d00b      	beq.n	8002810 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80027f8:	429c      	cmp	r4, r3
 80027fa:	d109      	bne.n	8002810 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80027fc:	f7ff ff5c 	bl	80026b8 <next_timeout>

			if (next_time == 0 ||
 8002800:	b118      	cbz	r0, 800280a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	4283      	cmp	r3, r0
 8002808:	d002      	beq.n	8002810 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 800280a:	2100      	movs	r1, #0
 800280c:	f7ff f984 	bl	8001b18 <sys_clock_set_timeout>
	__asm__ volatile(
 8002810:	f387 8811 	msr	BASEPRI, r7
 8002814:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8002818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8002820:	45ac      	cmp	ip, r5
 8002822:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8002826:	d0c2      	beq.n	80027ae <z_add_timeout+0x6e>
 8002828:	f8dc c000 	ldr.w	ip, [ip]
 800282c:	e7bc      	b.n	80027a8 <z_add_timeout+0x68>
 800282e:	bf00      	nop
 8002830:	20000160 	.word	0x20000160
 8002834:	20000040 	.word	0x20000040
 8002838:	200002bc 	.word	0x200002bc

0800283c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800283c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002840:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8002842:	f7ff fd35 	bl	80022b0 <z_time_slice>
	__asm__ volatile(
 8002846:	f04f 0310 	mov.w	r3, #16
 800284a:	f3ef 8611 	mrs	r6, BASEPRI
 800284e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002852:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002856:	4f23      	ldr	r7, [pc, #140]	; (80028e4 <sys_clock_announce+0xa8>)
	return list->head == list;
 8002858:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80028e8 <sys_clock_announce+0xac>
 800285c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8002860:	4a22      	ldr	r2, [pc, #136]	; (80028ec <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
 8002862:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002864:	4540      	cmp	r0, r8
		curr_tick += dt;
 8002866:	e9d2 3e00 	ldrd	r3, lr, [r2]
 800286a:	ea4f 71e4 	mov.w	r1, r4, asr #31
 800286e:	d00b      	beq.n	8002888 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8002870:	b150      	cbz	r0, 8002888 <sys_clock_announce+0x4c>
 8002872:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 8002876:	42ac      	cmp	r4, r5
 8002878:	eb71 090c 	sbcs.w	r9, r1, ip
 800287c:	da16      	bge.n	80028ac <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800287e:	1b2d      	subs	r5, r5, r4
 8002880:	eb6c 0c01 	sbc.w	ip, ip, r1
 8002884:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8002888:	18e3      	adds	r3, r4, r3
 800288a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 800288e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8002890:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 8002894:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8002896:	f7ff ff0f 	bl	80026b8 <next_timeout>
 800289a:	4621      	mov	r1, r4
 800289c:	f7ff f93c 	bl	8001b18 <sys_clock_set_timeout>
	__asm__ volatile(
 80028a0:	f386 8811 	msr	BASEPRI, r6
 80028a4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80028a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 80028ac:	18eb      	adds	r3, r5, r3
 80028ae:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 80028b2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 80028b6:	2200      	movs	r2, #0
 80028b8:	2300      	movs	r3, #0
 80028ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 80028be:	f7ff ff23 	bl	8002708 <remove_timeout>
 80028c2:	f386 8811 	msr	BASEPRI, r6
 80028c6:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80028ca:	6883      	ldr	r3, [r0, #8]
 80028cc:	4798      	blx	r3
	__asm__ volatile(
 80028ce:	f04f 0310 	mov.w	r3, #16
 80028d2:	f3ef 8611 	mrs	r6, BASEPRI
 80028d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80028da:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 80028de:	683c      	ldr	r4, [r7, #0]
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	e7bb      	b.n	800285c <sys_clock_announce+0x20>
 80028e4:	200002ec 	.word	0x200002ec
 80028e8:	20000040 	.word	0x20000040
 80028ec:	20000160 	.word	0x20000160

080028f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80028f0:	b510      	push	{r4, lr}
 80028f2:	f04f 0310 	mov.w	r3, #16
 80028f6:	f3ef 8411 	mrs	r4, BASEPRI
 80028fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80028fe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8002902:	f7ff fecf 	bl	80026a4 <elapsed>
 8002906:	4a06      	ldr	r2, [pc, #24]	; (8002920 <sys_clock_tick_get+0x30>)
 8002908:	4603      	mov	r3, r0
 800290a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800290e:	1818      	adds	r0, r3, r0
 8002910:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8002914:	f384 8811 	msr	BASEPRI, r4
 8002918:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop
 8002920:	20000160 	.word	0x20000160

08002924 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <boot_banner+0x8>)
 8002926:	f000 b806 	b.w	8002936 <printk>
 800292a:	bf00      	nop
 800292c:	08003bba 	.word	0x08003bba

08002930 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002930:	4770      	bx	lr

08002932 <arch_printk_char_out>:
}
 8002932:	2000      	movs	r0, #0
 8002934:	4770      	bx	lr

08002936 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8002936:	b40f      	push	{r0, r1, r2, r3}
 8002938:	b507      	push	{r0, r1, r2, lr}
 800293a:	a904      	add	r1, sp, #16
 800293c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002940:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8002942:	f7fd fdc3 	bl	80004cc <vprintk>

	va_end(ap);
}
 8002946:	b003      	add	sp, #12
 8002948:	f85d eb04 	ldr.w	lr, [sp], #4
 800294c:	b004      	add	sp, #16
 800294e:	4770      	bx	lr

08002950 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002950:	4604      	mov	r4, r0
 8002952:	b508      	push	{r3, lr}
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002958:	461a      	mov	r2, r3
 800295a:	47a0      	blx	r4
	return z_impl_z_current_get();
 800295c:	f7ff fe22 	bl	80025a4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8002960:	f7fe fbdc 	bl	800111c <z_impl_k_thread_abort>

08002964 <encode_uint>:
{
 8002964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 800296a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 800296c:	2b6f      	cmp	r3, #111	; 0x6f
{
 800296e:	4680      	mov	r8, r0
 8002970:	460f      	mov	r7, r1
 8002972:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002974:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002978:	d029      	beq.n	80029ce <encode_uint+0x6a>
 800297a:	d824      	bhi.n	80029c6 <encode_uint+0x62>
		return 10;
 800297c:	2b58      	cmp	r3, #88	; 0x58
 800297e:	bf0c      	ite	eq
 8002980:	2610      	moveq	r6, #16
 8002982:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8002984:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002988:	4632      	mov	r2, r6
 800298a:	2300      	movs	r3, #0
 800298c:	4640      	mov	r0, r8
 800298e:	4639      	mov	r1, r7
 8002990:	f7fd fc02 	bl	8000198 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002994:	2a09      	cmp	r2, #9
 8002996:	b2d4      	uxtb	r4, r2
 8002998:	d81e      	bhi.n	80029d8 <encode_uint+0x74>
 800299a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800299c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800299e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80029a0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029a4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80029a8:	d301      	bcc.n	80029ae <encode_uint+0x4a>
 80029aa:	45d1      	cmp	r9, sl
 80029ac:	d811      	bhi.n	80029d2 <encode_uint+0x6e>
	if (conv->flag_hash) {
 80029ae:	782b      	ldrb	r3, [r5, #0]
 80029b0:	069b      	lsls	r3, r3, #26
 80029b2:	d505      	bpl.n	80029c0 <encode_uint+0x5c>
		if (radix == 8) {
 80029b4:	2e08      	cmp	r6, #8
 80029b6:	d115      	bne.n	80029e4 <encode_uint+0x80>
			conv->altform_0 = true;
 80029b8:	78ab      	ldrb	r3, [r5, #2]
 80029ba:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80029be:	70ab      	strb	r3, [r5, #2]
}
 80029c0:	4648      	mov	r0, r9
 80029c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80029c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 80029ca:	2b70      	cmp	r3, #112	; 0x70
 80029cc:	e7d7      	b.n	800297e <encode_uint+0x1a>
	switch (specifier) {
 80029ce:	2608      	movs	r6, #8
 80029d0:	e7d8      	b.n	8002984 <encode_uint+0x20>
		value /= radix;
 80029d2:	4680      	mov	r8, r0
 80029d4:	460f      	mov	r7, r1
 80029d6:	e7d7      	b.n	8002988 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029d8:	f1bb 0f19 	cmp.w	fp, #25
 80029dc:	bf94      	ite	ls
 80029de:	3437      	addls	r4, #55	; 0x37
 80029e0:	3457      	addhi	r4, #87	; 0x57
 80029e2:	e7db      	b.n	800299c <encode_uint+0x38>
		} else if (radix == 16) {
 80029e4:	2e10      	cmp	r6, #16
 80029e6:	d1eb      	bne.n	80029c0 <encode_uint+0x5c>
			conv->altform_0c = true;
 80029e8:	78ab      	ldrb	r3, [r5, #2]
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	e7e6      	b.n	80029be <encode_uint+0x5a>

080029f0 <outs>:
{
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	4607      	mov	r7, r0
 80029f6:	4688      	mov	r8, r1
 80029f8:	4615      	mov	r5, r2
 80029fa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80029fc:	4614      	mov	r4, r2
 80029fe:	42b4      	cmp	r4, r6
 8002a00:	d305      	bcc.n	8002a0e <outs+0x1e>
 8002a02:	b10e      	cbz	r6, 8002a08 <outs+0x18>
	return (int)count;
 8002a04:	1b60      	subs	r0, r4, r5
 8002a06:	e008      	b.n	8002a1a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002a08:	7823      	ldrb	r3, [r4, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0fa      	beq.n	8002a04 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8002a0e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a12:	4641      	mov	r1, r8
 8002a14:	47b8      	blx	r7
		if (rc < 0) {
 8002a16:	2800      	cmp	r0, #0
 8002a18:	daf1      	bge.n	80029fe <outs+0xe>
}
 8002a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a1e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002a1e:	4770      	bx	lr

08002a20 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002a20:	2000      	movs	r0, #0
 8002a22:	4770      	bx	lr

08002a24 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002a24:	f000 bc10 	b.w	8003248 <z_fatal_error>

08002a28 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002a28:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002a2a:	6800      	ldr	r0, [r0, #0]
 8002a2c:	f000 bc0c 	b.w	8003248 <z_fatal_error>

08002a30 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002a30:	2100      	movs	r1, #0
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7ff bff6 	b.w	8002a24 <z_arm_fatal_error>

08002a38 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002a38:	b508      	push	{r3, lr}
	handler();
 8002a3a:	f7fe f961 	bl	8000d00 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002a42:	f7fe ba35 	b.w	8000eb0 <z_arm_exc_exit>

08002a46 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002a46:	4603      	mov	r3, r0
	size_t n = 0;
 8002a48:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002a4a:	5c1a      	ldrb	r2, [r3, r0]
 8002a4c:	b902      	cbnz	r2, 8002a50 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002a4e:	4770      	bx	lr
		n++;
 8002a50:	3001      	adds	r0, #1
 8002a52:	e7fa      	b.n	8002a4a <strlen+0x4>

08002a54 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002a54:	4603      	mov	r3, r0
	size_t n = 0;
 8002a56:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002a58:	5c1a      	ldrb	r2, [r3, r0]
 8002a5a:	b10a      	cbz	r2, 8002a60 <strnlen+0xc>
 8002a5c:	4288      	cmp	r0, r1
 8002a5e:	d100      	bne.n	8002a62 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002a60:	4770      	bx	lr
		n++;
 8002a62:	3001      	adds	r0, #1
 8002a64:	e7f8      	b.n	8002a58 <strnlen+0x4>

08002a66 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002a66:	b510      	push	{r4, lr}
 8002a68:	1e43      	subs	r3, r0, #1
 8002a6a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002a6c:	4291      	cmp	r1, r2
 8002a6e:	d100      	bne.n	8002a72 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002a70:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a76:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002a7a:	e7f7      	b.n	8002a6c <memcpy+0x6>

08002a7c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002a7c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002a7e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002a80:	4603      	mov	r3, r0
	while (n > 0) {
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d100      	bne.n	8002a88 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002a86:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002a88:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002a8c:	e7f9      	b.n	8002a82 <memset+0x6>

08002a8e <_stdout_hook_default>:
}
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a92:	4770      	bx	lr

08002a94 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002a94:	2200      	movs	r2, #0
{
 8002a96:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002a98:	4611      	mov	r1, r2
 8002a9a:	2006      	movs	r0, #6
 8002a9c:	f7fe f918 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	2007      	movs	r0, #7
 8002aa6:	f7fe f913 	bl	8000cd0 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4611      	mov	r1, r2
 8002aae:	2008      	movs	r0, #8
 8002ab0:	f7fe f90e 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	2009      	movs	r0, #9
 8002aba:	f7fe f909 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f7fe f904 	bl	8000cd0 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4611      	mov	r1, r2
 8002acc:	2017      	movs	r0, #23
 8002ace:	f7fe f8ff 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	2028      	movs	r0, #40	; 0x28
 8002ad8:	f7fe f8fa 	bl	8000cd0 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002adc:	2200      	movs	r2, #0
 8002ade:	4611      	mov	r1, r2
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe f8f5 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4611      	mov	r1, r2
 8002aea:	202a      	movs	r0, #42	; 0x2a
 8002aec:	f7fe f8f0 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002af0:	2200      	movs	r2, #0
 8002af2:	4611      	mov	r1, r2
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7fe f8eb 	bl	8000cd0 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002afa:	2200      	movs	r2, #0
 8002afc:	4611      	mov	r1, r2
 8002afe:	2003      	movs	r0, #3
 8002b00:	f7fe f8e6 	bl	8000cd0 <z_arm_irq_priority_set>
}
 8002b04:	2000      	movs	r0, #0
 8002b06:	bd08      	pop	{r3, pc}

08002b08 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, dev);
 8002b08:	6902      	ldr	r2, [r0, #16]
 8002b0a:	2117      	movs	r1, #23
 8002b0c:	2016      	movs	r0, #22
 8002b0e:	f7fe bbe9 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b12 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, dev);
 8002b12:	6902      	ldr	r2, [r0, #16]
 8002b14:	2116      	movs	r1, #22
 8002b16:	2015      	movs	r0, #21
 8002b18:	f7fe bbe4 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b1c <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, dev);
 8002b1c:	6902      	ldr	r2, [r0, #16]
 8002b1e:	2113      	movs	r1, #19
 8002b20:	2012      	movs	r0, #18
 8002b22:	f7fe bbdf 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b26 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, dev);
 8002b26:	6902      	ldr	r2, [r0, #16]
 8002b28:	2111      	movs	r1, #17
 8002b2a:	2010      	movs	r0, #16
 8002b2c:	f7fe bbda 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b30 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8002b30:	6902      	ldr	r2, [r0, #16]
 8002b32:	2110      	movs	r1, #16
 8002b34:	200a      	movs	r0, #10
 8002b36:	f7fe bbd5 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b3a <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8002b3a:	6902      	ldr	r2, [r0, #16]
 8002b3c:	210a      	movs	r1, #10
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f7fe bbd0 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b44 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8002b44:	6902      	ldr	r2, [r0, #16]
 8002b46:	2105      	movs	r1, #5
 8002b48:	2004      	movs	r0, #4
 8002b4a:	f7fe bbcb 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b4e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8002b4e:	6902      	ldr	r2, [r0, #16]
 8002b50:	2104      	movs	r1, #4
 8002b52:	2003      	movs	r0, #3
 8002b54:	f7fe bbc6 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b58 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8002b58:	6902      	ldr	r2, [r0, #16]
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7fe bbc1 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b62 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8002b62:	6902      	ldr	r2, [r0, #16]
 8002b64:	2102      	movs	r1, #2
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fe bbbc 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b6c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8002b6c:	6902      	ldr	r2, [r0, #16]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe bbb7 	b.w	80012e4 <__stm32_exti_isr.isra.0>

08002b76 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002b76:	680b      	ldr	r3, [r1, #0]
 8002b78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002b7c:	2a78      	cmp	r2, #120	; 0x78
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002b7e:	bf9f      	itttt	ls
 8002b80:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 8002b88:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002b8a:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002b8c:	bf9d      	ittte	ls
 8002b8e:	430a      	orrls	r2, r1
	return 0;
 8002b90:	2000      	movls	r0, #0
 8002b92:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002b94:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002b98:	4770      	bx	lr

08002b9a <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002b9a:	680b      	ldr	r3, [r1, #0]
 8002b9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ba0:	2a78      	cmp	r2, #120	; 0x78
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002ba2:	bf9f      	itttt	ls
 8002ba4:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002ba8:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 8002bac:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002bae:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8002bb0:	bf9d      	ittte	ls
 8002bb2:	438a      	bicls	r2, r1
	return 0;
 8002bb4:	2000      	movls	r0, #0
 8002bb6:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002bb8:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002bbc:	4770      	bx	lr

08002bbe <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8002bbe:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d803      	bhi.n	8002bcc <stm32_clock_control_configure+0xe>
 8002bc4:	b92b      	cbnz	r3, 8002bd2 <stm32_clock_control_configure+0x14>
 8002bc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8002bca:	4770      	bx	lr
	switch (src_clk) {
 8002bcc:	3b05      	subs	r3, #5
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d8f9      	bhi.n	8002bc6 <stm32_clock_control_configure+0x8>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002bd2:	6849      	ldr	r1, [r1, #4]
 8002bd4:	b2cb      	uxtb	r3, r1
 8002bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bda:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002bde:	f3c1 4202 	ubfx	r2, r1, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002be8:	408a      	lsls	r2, r1
	*(volatile uint32_t *)addr = temp | mask;
 8002bea:	4302      	orrs	r2, r0
 8002bec:	601a      	str	r2, [r3, #0]
	return 0;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr

08002bf2 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bf2:	6843      	ldr	r3, [r0, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002bf6:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002bf8:	600b      	str	r3, [r1, #0]
}
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	4770      	bx	lr

08002bfe <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bfe:	6843      	ldr	r3, [r0, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002c02:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002c04:	4042      	eors	r2, r0
 8002c06:	400a      	ands	r2, r1
 8002c08:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002c0a:	615a      	str	r2, [r3, #20]
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	4770      	bx	lr

08002c10 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c10:	6843      	ldr	r3, [r0, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
}
 8002c14:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002c16:	6199      	str	r1, [r3, #24]
}
 8002c18:	4770      	bx	lr

08002c1a <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c1a:	6843      	ldr	r3, [r0, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002c1e:	0409      	lsls	r1, r1, #16
 8002c20:	6199      	str	r1, [r3, #24]
}
 8002c22:	2000      	movs	r0, #0
 8002c24:	4770      	bx	lr

08002c26 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c26:	6843      	ldr	r3, [r0, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002c2a:	6953      	ldr	r3, [r2, #20]
 8002c2c:	404b      	eors	r3, r1
 8002c2e:	6153      	str	r3, [r2, #20]
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	4770      	bx	lr

08002c34 <gpio_stm32_manage_callback>:
{
 8002c34:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8002c36:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002c38:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002c3a:	b1f8      	cbz	r0, 8002c7c <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c3c:	4288      	cmp	r0, r1
 8002c3e:	d119      	bne.n	8002c74 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8002c40:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8002c42:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8002c44:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002c46:	42a1      	cmp	r1, r4
 8002c48:	d100      	bne.n	8002c4c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002c4a:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8002c50:	b12a      	cbz	r2, 8002c5e <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8002c52:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002c54:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002c56:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8002c58:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002c5a:	b902      	cbnz	r2, 8002c5e <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8002c5c:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002c5e:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8002c60:	e010      	b.n	8002c84 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c62:	4281      	cmp	r1, r0
 8002c64:	d106      	bne.n	8002c74 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8002c66:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8002c68:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c6a:	68d8      	ldr	r0, [r3, #12]
 8002c6c:	4281      	cmp	r1, r0
 8002c6e:	d1ed      	bne.n	8002c4c <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002c70:	60dc      	str	r4, [r3, #12]
}
 8002c72:	e7eb      	b.n	8002c4c <gpio_stm32_manage_callback+0x18>
	return node->next;
 8002c74:	4604      	mov	r4, r0
 8002c76:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1f2      	bne.n	8002c62 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d1e8      	bne.n	8002c52 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8002c80:	f06f 0015 	mvn.w	r0, #21
}
 8002c84:	bd10      	pop	{r4, pc}

08002c86 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002c86:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c88:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002c8a:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c8c:	6867      	ldr	r7, [r4, #4]
 8002c8e:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002c90:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002c92:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002c96:	ea27 0700 	bic.w	r7, r7, r0
 8002c9a:	408b      	lsls	r3, r1
 8002c9c:	433b      	orrs	r3, r7
 8002c9e:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002ca4:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ca8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002cac:	f04f 0e03 	mov.w	lr, #3
 8002cb0:	007f      	lsls	r7, r7, #1
 8002cb2:	fa0e f707 	lsl.w	r7, lr, r7
 8002cb6:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002cbe:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002cc2:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002cc6:	007f      	lsls	r7, r7, #1
 8002cc8:	40bb      	lsls	r3, r7
 8002cca:	ea43 030c 	orr.w	r3, r3, ip
 8002cce:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002cd4:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002cd8:	68e7      	ldr	r7, [r4, #12]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa0e f303 	lsl.w	r3, lr, r3
 8002ce0:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002cf0:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002cf2:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002cfa:	2d20      	cmp	r5, #32
 8002cfc:	60e2      	str	r2, [r4, #12]
 8002cfe:	d116      	bne.n	8002d2e <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8002d00:	2907      	cmp	r1, #7
 8002d02:	dc2b      	bgt.n	8002d5c <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d08:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8002d0a:	b32b      	cbz	r3, 8002d58 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	210f      	movs	r1, #15
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	fa06 f303 	lsl.w	r3, r6, r3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002d32:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d36:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	fa90 f0a0 	rbit	r0, r0
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002d40:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002d44:	092d      	lsrs	r5, r5, #4
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	0040      	lsls	r0, r0, #1
 8002d4c:	ea22 0303 	bic.w	r3, r2, r3
 8002d50:	4085      	lsls	r5, r0
 8002d52:	431d      	orrs	r5, r3
 8002d54:	6025      	str	r5, [r4, #0]
}
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002d58:	462b      	mov	r3, r5
 8002d5a:	e7d9      	b.n	8002d10 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d5c:	0a03      	lsrs	r3, r0, #8
 8002d5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002d64:	b182      	cbz	r2, 8002d88 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	fa07 f202 	lsl.w	r2, r7, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	ea21 0202 	bic.w	r2, r1, r2
 8002d80:	409e      	lsls	r6, r3
 8002d82:	4316      	orrs	r6, r2
 8002d84:	6266      	str	r6, [r4, #36]	; 0x24
}
 8002d86:	e7d2      	b.n	8002d2e <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8002d88:	462a      	mov	r2, r5
 8002d8a:	e7ee      	b.n	8002d6a <gpio_stm32_configure_raw.isra.0+0xe4>

08002d8c <gpio_stm32_config>:
{
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d90:	0390      	lsls	r0, r2, #14
{
 8002d92:	460d      	mov	r5, r1
 8002d94:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d96:	d517      	bpl.n	8002dc8 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002d98:	0791      	lsls	r1, r2, #30
 8002d9a:	d50e      	bpl.n	8002dba <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002d9c:	075a      	lsls	r2, r3, #29
 8002d9e:	d52e      	bpl.n	8002dfe <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002da0:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002da2:	06d8      	lsls	r0, r3, #27
 8002da4:	d50b      	bpl.n	8002dbe <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002daa:	0319      	lsls	r1, r3, #12
 8002dac:	d51a      	bpl.n	8002de4 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dae:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002db0:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002db2:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002db4:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8002db6:	618b      	str	r3, [r1, #24]
	return 0;
 8002db8:	e00d      	b.n	8002dd6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002dba:	2210      	movs	r2, #16
 8002dbc:	e7f1      	b.n	8002da2 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002dbe:	0699      	lsls	r1, r3, #26
 8002dc0:	d5f3      	bpl.n	8002daa <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002dc6:	e7f0      	b.n	8002daa <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002dc8:	03da      	lsls	r2, r3, #15
 8002dca:	d513      	bpl.n	8002df4 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002dcc:	06d8      	lsls	r0, r3, #27
 8002dce:	d413      	bmi.n	8002df8 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002dd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002dd4:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002dd6:	6860      	ldr	r0, [r4, #4]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7ff ff53 	bl	8002c86 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002de0:	2000      	movs	r0, #0
}
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002de4:	035b      	lsls	r3, r3, #13
 8002de6:	d5f6      	bpl.n	8002dd6 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002de8:	2101      	movs	r1, #1
 8002dea:	40a9      	lsls	r1, r5
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff ff14 	bl	8002c1a <gpio_stm32_port_clear_bits_raw>
 8002df2:	e7f0      	b.n	8002dd6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002df4:	2230      	movs	r2, #48	; 0x30
 8002df6:	e7ee      	b.n	8002dd6 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfc:	e7eb      	b.n	8002dd6 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 8002dfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002e02:	e7ee      	b.n	8002de2 <gpio_stm32_config+0x56>

08002e04 <gpio_stm32_isr>:
{
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	460b      	mov	r3, r1
 8002e08:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e0a:	b121      	cbz	r1, 8002e16 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002e0c:	2501      	movs	r5, #1
 8002e0e:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002e10:	680c      	ldr	r4, [r1, #0]
 8002e12:	4085      	lsls	r5, r0
 8002e14:	b901      	cbnz	r1, 8002e18 <gpio_stm32_isr+0x14>
}
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8002e18:	688a      	ldr	r2, [r1, #8]
 8002e1a:	402a      	ands	r2, r5
 8002e1c:	d002      	beq.n	8002e24 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002e1e:	684b      	ldr	r3, [r1, #4]
 8002e20:	4630      	mov	r0, r6
 8002e22:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e24:	b11c      	cbz	r4, 8002e2e <gpio_stm32_isr+0x2a>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	4621      	mov	r1, r4
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	e7f2      	b.n	8002e14 <gpio_stm32_isr+0x10>
 8002e2e:	4623      	mov	r3, r4
 8002e30:	e7fa      	b.n	8002e28 <gpio_stm32_isr+0x24>

08002e32 <gpio_stm32_configure>:
{
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e34:	461f      	mov	r7, r3
 8002e36:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002e38:	6840      	ldr	r0, [r0, #4]
{
 8002e3a:	460e      	mov	r6, r1
 8002e3c:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002e3e:	f7ff ff22 	bl	8002c86 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8002e42:	2f11      	cmp	r7, #17
 8002e44:	d107      	bne.n	8002e56 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002e46:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8002e48:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002e4a:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 8002e4e:	d504      	bpl.n	8002e5a <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e50:	6863      	ldr	r3, [r4, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8002e54:	6199      	str	r1, [r3, #24]
}
 8002e56:	2000      	movs	r0, #0
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff fedd 	bl	8002c1a <gpio_stm32_port_clear_bits_raw>
 8002e60:	e7f9      	b.n	8002e56 <gpio_stm32_configure+0x24>

08002e62 <LL_USART_ClearFlag_FE>:
{
 8002e62:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e68:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8002e6a:	6843      	ldr	r3, [r0, #4]
 8002e6c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e6e:	9b01      	ldr	r3, [sp, #4]
}
 8002e70:	b002      	add	sp, #8
 8002e72:	4770      	bx	lr

08002e74 <uart_stm32_poll_in>:
{
 8002e74:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002e76:	6843      	ldr	r3, [r0, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	071a      	lsls	r2, r3, #28
 8002e7e:	d501      	bpl.n	8002e84 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8002e80:	f7ff ffef 	bl	8002e62 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e84:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8002e86:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002e88:	bf43      	ittte	mi
 8002e8a:	6843      	ldrmi	r3, [r0, #4]
 8002e8c:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002e8e:	2000      	movmi	r0, #0
		return -1;
 8002e90:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002e94:	bd08      	pop	{r3, pc}

08002e96 <uart_stm32_poll_out>:
{
 8002e96:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8002e98:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002e9a:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e9c:	6813      	ldr	r3, [r2, #0]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	d5fc      	bpl.n	8002e9c <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8002ea2:	f04f 0210 	mov.w	r2, #16
 8002ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8002eaa:	f382 8812 	msr	BASEPRI_MAX, r2
 8002eae:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002eb2:	6802      	ldr	r2, [r0, #0]
 8002eb4:	6814      	ldr	r4, [r2, #0]
 8002eb6:	0624      	lsls	r4, r4, #24
 8002eb8:	d404      	bmi.n	8002ec4 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002ec2:	e7ea      	b.n	8002e9a <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002ec4:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
}
 8002ece:	bd10      	pop	{r4, pc}

08002ed0 <uart_stm32_err_check>:
{
 8002ed0:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 8002ed2:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002ed4:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002ed6:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002ed8:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8002eda:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002edc:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002ede:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8002ee2:	bf48      	it	mi
 8002ee4:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 8002ee8:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002eea:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 8002eec:	bf48      	it	mi
 8002eee:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 8002ef2:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8002ef4:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 8002ef6:	bf48      	it	mi
 8002ef8:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 8002efc:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 8002efe:	bf42      	ittt	mi
 8002f00:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 8002f04:	f042 0208 	orrmi.w	r2, r2, #8
 8002f08:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 8002f0a:	07d0      	lsls	r0, r2, #31
 8002f0c:	d502      	bpl.n	8002f14 <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 8002f0e:	6808      	ldr	r0, [r1, #0]
 8002f10:	f7ff ffa7 	bl	8002e62 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8002f14:	0793      	lsls	r3, r2, #30
 8002f16:	d502      	bpl.n	8002f1e <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 8002f18:	6808      	ldr	r0, [r1, #0]
 8002f1a:	f7ff ffa2 	bl	8002e62 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8002f1e:	0750      	lsls	r0, r2, #29
 8002f20:	d502      	bpl.n	8002f28 <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 8002f22:	6808      	ldr	r0, [r1, #0]
 8002f24:	f7ff ff9d 	bl	8002e62 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 8002f28:	0693      	lsls	r3, r2, #26
 8002f2a:	d502      	bpl.n	8002f32 <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 8002f2c:	6808      	ldr	r0, [r1, #0]
 8002f2e:	f7ff ff98 	bl	8002e62 <LL_USART_ClearFlag_FE>
}
 8002f32:	4610      	mov	r0, r2
 8002f34:	bd08      	pop	{r3, pc}

08002f36 <uart_stm32_fifo_fill>:
{
 8002f36:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 8002f38:	6846      	ldr	r6, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002f3a:	6833      	ldr	r3, [r6, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f42:	d010      	beq.n	8002f66 <uart_stm32_fifo_fill+0x30>
	__asm__ volatile(
 8002f44:	f04f 0310 	mov.w	r3, #16
 8002f48:	f3ef 8711 	mrs	r7, BASEPRI
 8002f4c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f50:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 8002f54:	2300      	movs	r3, #0
 8002f56:	b2dc      	uxtb	r4, r3
 8002f58:	42a2      	cmp	r2, r4
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	dc04      	bgt.n	8002f68 <uart_stm32_fifo_fill+0x32>
	__asm__ volatile(
 8002f5e:	f387 8811 	msr	BASEPRI, r7
 8002f62:	f3bf 8f6f 	isb	sy
}
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002f68:	6835      	ldr	r5, [r6, #0]
 8002f6a:	f8d5 c000 	ldr.w	ip, [r5]
	while ((size - num_tx > 0) &&
 8002f6e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8002f72:	f103 0301 	add.w	r3, r3, #1
 8002f76:	d0f2      	beq.n	8002f5e <uart_stm32_fifo_fill+0x28>
  USARTx->DR = Value;
 8002f78:	5d08      	ldrb	r0, [r1, r4]
 8002f7a:	6068      	str	r0, [r5, #4]
}
 8002f7c:	e7eb      	b.n	8002f56 <uart_stm32_fifo_fill+0x20>

08002f7e <uart_stm32_fifo_read>:
{
 8002f7e:	b570      	push	{r4, r5, r6, lr}
	const struct uart_stm32_config *config = dev->config;
 8002f80:	6845      	ldr	r5, [r0, #4]
	while ((size - num_rx > 0) &&
 8002f82:	2400      	movs	r4, #0
 8002f84:	b2e0      	uxtb	r0, r4
 8002f86:	4282      	cmp	r2, r0
 8002f88:	dd03      	ble.n	8002f92 <uart_stm32_fifo_read+0x14>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8002f8a:	682b      	ldr	r3, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002f8c:	681e      	ldr	r6, [r3, #0]
	while ((size - num_rx > 0) &&
 8002f8e:	06b6      	lsls	r6, r6, #26
 8002f90:	d400      	bmi.n	8002f94 <uart_stm32_fifo_read+0x16>
}
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	540b      	strb	r3, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002f98:	6828      	ldr	r0, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002f9a:	6803      	ldr	r3, [r0, #0]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	d501      	bpl.n	8002fa4 <uart_stm32_fifo_read+0x26>
			LL_USART_ClearFlag_ORE(config->usart);
 8002fa0:	f7ff ff5f 	bl	8002e62 <LL_USART_ClearFlag_FE>
 8002fa4:	3401      	adds	r4, #1
 8002fa6:	e7ed      	b.n	8002f84 <uart_stm32_fifo_read+0x6>

08002fa8 <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 8002fa8:	6843      	ldr	r3, [r0, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	f102 030c 	add.w	r3, r2, #12
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	f102 000c 	add.w	r0, r2, #12
 8002fbc:	e840 3100 	strex	r1, r3, [r0]
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d1f3      	bne.n	8002fac <uart_stm32_irq_tx_enable+0x4>
}
 8002fc4:	4770      	bx	lr

08002fc6 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 8002fc6:	6843      	ldr	r3, [r0, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	f102 030c 	add.w	r3, r2, #12
 8002fce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	f102 000c 	add.w	r0, r2, #12
 8002fda:	e840 3100 	strex	r1, r3, [r0]
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	d1f3      	bne.n	8002fca <uart_stm32_irq_tx_disable+0x4>
}
 8002fe2:	4770      	bx	lr

08002fe4 <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 8002fe4:	6843      	ldr	r3, [r0, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8002fee:	bf1c      	itt	ne
 8002ff0:	68d8      	ldrne	r0, [r3, #12]
 8002ff2:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8002ff6:	4770      	bx	lr

08002ff8 <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 8002ff8:	6843      	ldr	r3, [r0, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002ffc:	6818      	ldr	r0, [r3, #0]
}
 8002ffe:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003002:	4770      	bx	lr

08003004 <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 8003004:	6843      	ldr	r3, [r0, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	f102 030c 	add.w	r3, r2, #12
 800300c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003010:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	f102 000c 	add.w	r0, r2, #12
 8003018:	e840 3100 	strex	r1, r3, [r0]
 800301c:	2900      	cmp	r1, #0
 800301e:	d1f3      	bne.n	8003008 <uart_stm32_irq_rx_enable+0x4>
}
 8003020:	4770      	bx	lr

08003022 <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 8003022:	6843      	ldr	r3, [r0, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	f102 030c 	add.w	r3, r2, #12
 800302a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800302e:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	f102 000c 	add.w	r0, r2, #12
 8003036:	e840 3100 	strex	r1, r3, [r0]
 800303a:	2900      	cmp	r1, #0
 800303c:	d1f3      	bne.n	8003026 <uart_stm32_irq_rx_disable+0x4>
}
 800303e:	4770      	bx	lr

08003040 <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 8003040:	6843      	ldr	r3, [r0, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003044:	6818      	ldr	r0, [r3, #0]
}
 8003046:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800304a:	4770      	bx	lr

0800304c <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 800304c:	6843      	ldr	r3, [r0, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 8003052:	0691      	lsls	r1, r2, #26
 8003054:	d502      	bpl.n	800305c <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003056:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 8003058:	0692      	lsls	r2, r2, #26
 800305a:	d407      	bmi.n	800306c <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800305c:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800305e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003062:	d004      	beq.n	800306e <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8003064:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(config->usart) &&
 8003066:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800306a:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800306c:	2001      	movs	r0, #1
}
 800306e:	4770      	bx	lr

08003070 <uart_stm32_irq_update>:
}
 8003070:	2001      	movs	r0, #1
 8003072:	4770      	bx	lr

08003074 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 8003074:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8003076:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 800307a:	4770      	bx	lr

0800307c <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 800307c:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 800307e:	6913      	ldr	r3, [r2, #16]
 8003080:	b10b      	cbz	r3, 8003086 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8003082:	6951      	ldr	r1, [r2, #20]
 8003084:	4718      	bx	r3
}
 8003086:	4770      	bx	lr

08003088 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 8003088:	b508      	push	{r3, lr}
 800308a:	2200      	movs	r2, #0
 800308c:	2026      	movs	r0, #38	; 0x26
 800308e:	4611      	mov	r1, r2
 8003090:	f7fd fe1e 	bl	8000cd0 <z_arm_irq_priority_set>
 8003094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003098:	2026      	movs	r0, #38	; 0x26
 800309a:	f7fd be0b 	b.w	8000cb4 <arch_irq_enable>

0800309e <uart_stm32_set_baudrate>:
{
 800309e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 80030a0:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 80030a2:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80030a4:	6858      	ldr	r0, [r3, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80030a6:	6883      	ldr	r3, [r0, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
{
 80030aa:	460d      	mov	r5, r1
					   (clock_control_subsys_t)&config->pclken[0],
 80030ac:	6861      	ldr	r1, [r4, #4]
 80030ae:	b1f3      	cbz	r3, 80030ee <uart_stm32_set_baudrate+0x50>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80030b0:	aa01      	add	r2, sp, #4
 80030b2:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 80030b4:	2800      	cmp	r0, #0
 80030b6:	db1a      	blt.n	80030ee <uart_stm32_set_baudrate+0x50>
		LL_USART_SetOverSampling(config->usart,
 80030b8:	6822      	ldr	r2, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030ba:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80030bc:	68d3      	ldr	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030be:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80030c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030c4:	60d3      	str	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030c6:	fba0 0101 	umull	r0, r1, r0, r1
 80030ca:	00aa      	lsls	r2, r5, #2
 80030cc:	0fab      	lsrs	r3, r5, #30
 80030ce:	f7fd f863 	bl	8000198 <__aeabi_uldivmod>
 80030d2:	2264      	movs	r2, #100	; 0x64
 80030d4:	fbb0 f1f2 	udiv	r1, r0, r2
 80030d8:	fb02 0311 	mls	r3, r2, r1, r0
 80030dc:	011b      	lsls	r3, r3, #4
		LL_USART_SetBaudRate(config->usart,
 80030de:	6824      	ldr	r4, [r4, #0]
 80030e0:	3332      	adds	r3, #50	; 0x32
 80030e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	60a3      	str	r3, [r4, #8]
}
 80030ee:	b003      	add	sp, #12
 80030f0:	bd30      	pop	{r4, r5, pc}

080030f2 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80030f2:	6903      	ldr	r3, [r0, #16]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 80030f8:	6843      	ldr	r3, [r0, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003106:	d02f      	beq.n	8003168 <uart_stm32_config_get+0x76>
 8003108:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 800310c:	f1dc 0300 	rsbs	r3, ip, #0
 8003110:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8003114:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 8003116:	6843      	ldr	r3, [r0, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d022      	beq.n	800316c <uart_stm32_config_get+0x7a>
 8003126:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800312a:	d021      	beq.n	8003170 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003134:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 8003136:	6843      	ldr	r3, [r0, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800313a:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800313c:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 800313e:	04d2      	lsls	r2, r2, #19
 8003140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003144:	d516      	bpl.n	8003174 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2303      	movne	r3, #3
 800314c:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800314e:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003150:	6843      	ldr	r3, [r0, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800315a:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800315e:	4253      	negs	r3, r2
 8003160:	4153      	adcs	r3, r2
 8003162:	71cb      	strb	r3, [r1, #7]
}
 8003164:	2000      	movs	r0, #0
 8003166:	4770      	bx	lr
	switch (parity) {
 8003168:	2302      	movs	r3, #2
 800316a:	e7d3      	b.n	8003114 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800316c:	2300      	movs	r3, #0
 800316e:	e7e1      	b.n	8003134 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 8003170:	2302      	movs	r3, #2
 8003172:	e7df      	b.n	8003134 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2302      	movne	r3, #2
 800317a:	2303      	moveq	r3, #3
 800317c:	e7e7      	b.n	800314e <uart_stm32_config_get+0x5c>

0800317e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800317e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8003184:	7905      	ldrb	r5, [r0, #4]
 8003186:	6804      	ldr	r4, [r0, #0]
 8003188:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800318c:	42a3      	cmp	r3, r4
 800318e:	d302      	bcc.n	8003196 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 8003190:	f06f 0001 	mvn.w	r0, #1
}
 8003194:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8003196:	795c      	ldrb	r4, [r3, #5]
 8003198:	428c      	cmp	r4, r1
 800319a:	d001      	beq.n	80031a0 <pinctrl_lookup_state+0x22>
		(*state)++;
 800319c:	3308      	adds	r3, #8
 800319e:	e7f0      	b.n	8003182 <pinctrl_lookup_state+0x4>
			return 0;
 80031a0:	2000      	movs	r0, #0
 80031a2:	e7f7      	b.n	8003194 <pinctrl_lookup_state+0x16>

080031a4 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80031a4:	6843      	ldr	r3, [r0, #4]
 80031a6:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80031b0:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80031b2:	2301      	movs	r3, #1
 80031b4:	408b      	lsls	r3, r1
 80031b6:	4203      	tst	r3, r0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	7013      	strb	r3, [r2, #0]
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80031c0:	2000      	movs	r0, #0
 80031c2:	4770      	bx	lr

080031c4 <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80031c4:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80031c6:	6843      	ldr	r3, [r0, #4]
 80031c8:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80031d2:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80031d4:	2301      	movs	r3, #1
 80031d6:	408b      	lsls	r3, r1
 80031d8:	4323      	orrs	r3, r4
 80031da:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 80031dc:	2000      	movs	r0, #0
 80031de:	bd10      	pop	{r4, pc}

080031e0 <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 80031e0:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80031e2:	6843      	ldr	r3, [r0, #4]
 80031e4:	f3c1 144b 	ubfx	r4, r1, #5, #12
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80031ee:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 80031f0:	2201      	movs	r2, #1
 80031f2:	408a      	lsls	r2, r1
 80031f4:	ea23 0302 	bic.w	r3, r3, r2
 80031f8:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 80031fa:	2000      	movs	r0, #0
 80031fc:	bd10      	pop	{r4, pc}

080031fe <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 80031fe:	b538      	push	{r3, r4, r5, lr}
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 8003204:	f7ff ffde 	bl	80031c4 <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8003208:	4629      	mov	r1, r5
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ffe8 	bl	80031e0 <reset_stm32_line_deassert>

	return 0;
}
 8003210:	2000      	movs	r0, #0
 8003212:	bd38      	pop	{r3, r4, r5, pc}

08003214 <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 8003214:	2000      	movs	r0, #0
 8003216:	4770      	bx	lr

08003218 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8003218:	4770      	bx	lr

0800321a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800321a:	b140      	cbz	r0, 800322e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800321c:	68c3      	ldr	r3, [r0, #12]
 800321e:	7858      	ldrb	r0, [r3, #1]
 8003220:	f010 0001 	ands.w	r0, r0, #1
 8003224:	bf1e      	ittt	ne
 8003226:	7818      	ldrbne	r0, [r3, #0]
 8003228:	fab0 f080 	clzne	r0, r0
 800322c:	0940      	lsrne	r0, r0, #5
}
 800322e:	4770      	bx	lr

08003230 <arch_system_halt>:
	__asm__ volatile(
 8003230:	f04f 0210 	mov.w	r2, #16
 8003234:	f3ef 8311 	mrs	r3, BASEPRI
 8003238:	f382 8812 	msr	BASEPRI_MAX, r2
 800323c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8003240:	e7fe      	b.n	8003240 <arch_system_halt+0x10>

08003242 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003242:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003244:	f7ff fff4 	bl	8003230 <arch_system_halt>

08003248 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4605      	mov	r5, r0
 800324c:	460e      	mov	r6, r1
 800324e:	f04f 0310 	mov.w	r3, #16
 8003252:	f3ef 8711 	mrs	r7, BASEPRI
 8003256:	f383 8812 	msr	BASEPRI_MAX, r3
 800325a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800325e:	f7ff f9a1 	bl	80025a4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8003262:	4631      	mov	r1, r6
 8003264:	4604      	mov	r4, r0
 8003266:	4628      	mov	r0, r5
 8003268:	f7ff ffeb 	bl	8003242 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800326c:	f387 8811 	msr	BASEPRI, r7
 8003270:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003274:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800327a:	f7fd bf4f 	b.w	800111c <z_impl_k_thread_abort>

0800327e <z_early_memset>:
	(void) memset(dst, c, n);
 800327e:	f7ff bbfd 	b.w	8002a7c <memset>

08003282 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8003282:	f7ff bbf0 	b.w	8002a66 <memcpy>

08003286 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8003286:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003288:	f04f 0210 	mov.w	r2, #16
 800328c:	f3ef 8311 	mrs	r3, BASEPRI
 8003290:	f382 8812 	msr	BASEPRI_MAX, r2
 8003294:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003298:	f7fd fcfe 	bl	8000c98 <arch_cpu_idle>
 800329c:	e7f4      	b.n	8003288 <idle+0x2>

0800329e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 800329e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80032a2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80032a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80032a6:	2300      	movs	r3, #0
	node->prev = NULL;
 80032a8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80032ac:	4770      	bx	lr

080032ae <unpend_thread_no_timeout>:
{
 80032ae:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80032b0:	f7ff fff5 	bl	800329e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80032b4:	7b43      	ldrb	r3, [r0, #13]
 80032b6:	f023 0302 	bic.w	r3, r3, #2
 80032ba:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	6083      	str	r3, [r0, #8]
}
 80032c0:	bd08      	pop	{r3, pc}

080032c2 <z_thread_timeout>:
{
 80032c2:	b510      	push	{r4, lr}
 80032c4:	4601      	mov	r1, r0
 80032c6:	f04f 0310 	mov.w	r3, #16
 80032ca:	f3ef 8411 	mrs	r4, BASEPRI
 80032ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80032d2:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80032d6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80032da:	f013 0f28 	tst.w	r3, #40	; 0x28
 80032de:	d10d      	bne.n	80032fc <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80032e0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80032e4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80032e6:	b10b      	cbz	r3, 80032ec <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80032e8:	f7ff ffe1 	bl	80032ae <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80032ec:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80032f0:	f023 0314 	bic.w	r3, r3, #20
 80032f4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80032f8:	f7fe ff68 	bl	80021cc <ready_thread>
	__asm__ volatile(
 80032fc:	f384 8811 	msr	BASEPRI, r4
 8003300:	f3bf 8f6f 	isb	sy
}
 8003304:	bd10      	pop	{r4, pc}

08003306 <z_ready_thread>:
{
 8003306:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003308:	f04f 0310 	mov.w	r3, #16
 800330c:	f3ef 8411 	mrs	r4, BASEPRI
 8003310:	f383 8812 	msr	BASEPRI_MAX, r3
 8003314:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8003318:	f7fe ff58 	bl	80021cc <ready_thread>
	__asm__ volatile(
 800331c:	f384 8811 	msr	BASEPRI, r4
 8003320:	f3bf 8f6f 	isb	sy
}
 8003324:	bd10      	pop	{r4, pc}

08003326 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003326:	4603      	mov	r3, r0
 8003328:	b920      	cbnz	r0, 8003334 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800332a:	f3ef 8205 	mrs	r2, IPSR
 800332e:	b90a      	cbnz	r2, 8003334 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003330:	f7fd bd0e 	b.w	8000d50 <arch_swap>
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
}
 800333c:	4770      	bx	lr

0800333e <z_reschedule_unlocked>:
	__asm__ volatile(
 800333e:	f04f 0310 	mov.w	r3, #16
 8003342:	f3ef 8011 	mrs	r0, BASEPRI
 8003346:	f383 8812 	msr	BASEPRI_MAX, r3
 800334a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800334e:	f7ff bfea 	b.w	8003326 <z_reschedule_irqlock>

08003352 <z_abort_timeout>:
{
 8003352:	b510      	push	{r4, lr}
 8003354:	f04f 0210 	mov.w	r2, #16
 8003358:	f3ef 8411 	mrs	r4, BASEPRI
 800335c:	f382 8812 	msr	BASEPRI_MAX, r2
 8003360:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003364:	6803      	ldr	r3, [r0, #0]
 8003366:	b13b      	cbz	r3, 8003378 <z_abort_timeout+0x26>
			remove_timeout(to);
 8003368:	f7ff f9ce 	bl	8002708 <remove_timeout>
			ret = 0;
 800336c:	2000      	movs	r0, #0
	__asm__ volatile(
 800336e:	f384 8811 	msr	BASEPRI, r4
 8003372:	f3bf 8f6f 	isb	sy
}
 8003376:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003378:	f06f 0015 	mvn.w	r0, #21
 800337c:	e7f7      	b.n	800336e <z_abort_timeout+0x1c>

0800337e <z_set_timeout_expiry>:
{
 800337e:	b570      	push	{r4, r5, r6, lr}
 8003380:	4604      	mov	r4, r0
 8003382:	460d      	mov	r5, r1
	__asm__ volatile(
 8003384:	f04f 0310 	mov.w	r3, #16
 8003388:	f3ef 8611 	mrs	r6, BASEPRI
 800338c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003390:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8003394:	f7ff f990 	bl	80026b8 <next_timeout>
			      || (ticks <= next_to);
 8003398:	2801      	cmp	r0, #1
 800339a:	dd07      	ble.n	80033ac <z_set_timeout_expiry+0x2e>
 800339c:	42a0      	cmp	r0, r4
 800339e:	db05      	blt.n	80033ac <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80033a0:	42a0      	cmp	r0, r4
 80033a2:	4629      	mov	r1, r5
 80033a4:	bfa8      	it	ge
 80033a6:	4620      	movge	r0, r4
 80033a8:	f7fe fbb6 	bl	8001b18 <sys_clock_set_timeout>
	__asm__ volatile(
 80033ac:	f386 8811 	msr	BASEPRI, r6
 80033b0:	f3bf 8f6f 	isb	sy
}
 80033b4:	bd70      	pop	{r4, r5, r6, pc}

080033b6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 80033b6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 80033b8:	f7ff fa9a 	bl	80028f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 80033bc:	bd08      	pop	{r3, pc}
	...
