
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 1b 00 20 d9 11 00 08 3d 2d 00 08 ad 11 00 08     ... ....=-......
 8000010:	ad 11 00 08 ad 11 00 08 ad 11 00 08 00 00 00 00     ................
	...
 800002c:	bd 0e 00 08 ad 11 00 08 00 00 00 00 65 0e 00 08     ............e...
 800003c:	c1 1b 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000050:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000060:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000070:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000080:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000090:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000a0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000b0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000c0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000d0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000e0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 80000f0:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000100:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000110:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000120:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000130:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000140:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000150:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000160:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000170:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000180:	71 0f 00 08 71 0f 00 08 71 0f 00 08 71 0f 00 08     q...q...q...q...
 8000190:	71 0f 00 08 71 0f 00 08                             q...q...

Disassembly of section text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f000 f808 	bl	80001cc <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__udivmoddi4>:
 80001cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d0:	4686      	mov	lr, r0
 80001d2:	468c      	mov	ip, r1
 80001d4:	4608      	mov	r0, r1
 80001d6:	9e08      	ldr	r6, [sp, #32]
 80001d8:	4615      	mov	r5, r2
 80001da:	4674      	mov	r4, lr
 80001dc:	4619      	mov	r1, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 80c2 	bne.w	8000368 <__udivmoddi4+0x19c>
 80001e4:	4285      	cmp	r5, r0
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	d945      	bls.n	8000278 <__udivmoddi4+0xac>
 80001ec:	b14a      	cbz	r2, 8000202 <__udivmoddi4+0x36>
 80001ee:	f1c2 0320 	rsb	r3, r2, #32
 80001f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80001f6:	fa2e f303 	lsr.w	r3, lr, r3
 80001fa:	4095      	lsls	r5, r2
 80001fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000206:	b2a8      	uxth	r0, r5
 8000208:	fbbc f8fe 	udiv	r8, ip, lr
 800020c:	0c23      	lsrs	r3, r4, #16
 800020e:	fb0e cc18 	mls	ip, lr, r8, ip
 8000212:	fb08 f900 	mul.w	r9, r8, r0
 8000216:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800021a:	4599      	cmp	r9, r3
 800021c:	d928      	bls.n	8000270 <__udivmoddi4+0xa4>
 800021e:	18eb      	adds	r3, r5, r3
 8000220:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x64>
 8000226:	4599      	cmp	r9, r3
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x64>
 800022a:	f1a8 0702 	sub.w	r7, r8, #2
 800022e:	442b      	add	r3, r5
 8000230:	eba3 0309 	sub.w	r3, r3, r9
 8000234:	b2a4      	uxth	r4, r4
 8000236:	fbb3 fcfe 	udiv	ip, r3, lr
 800023a:	fb0e 331c 	mls	r3, lr, ip, r3
 800023e:	fb0c f000 	mul.w	r0, ip, r0
 8000242:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000246:	42a0      	cmp	r0, r4
 8000248:	d914      	bls.n	8000274 <__udivmoddi4+0xa8>
 800024a:	192c      	adds	r4, r5, r4
 800024c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000250:	d204      	bcs.n	800025c <__udivmoddi4+0x90>
 8000252:	42a0      	cmp	r0, r4
 8000254:	d902      	bls.n	800025c <__udivmoddi4+0x90>
 8000256:	f1ac 0302 	sub.w	r3, ip, #2
 800025a:	442c      	add	r4, r5
 800025c:	1a24      	subs	r4, r4, r0
 800025e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000262:	b11e      	cbz	r6, 800026c <__udivmoddi4+0xa0>
 8000264:	40d4      	lsrs	r4, r2
 8000266:	2300      	movs	r3, #0
 8000268:	6034      	str	r4, [r6, #0]
 800026a:	6073      	str	r3, [r6, #4]
 800026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000270:	4647      	mov	r7, r8
 8000272:	e7dd      	b.n	8000230 <__udivmoddi4+0x64>
 8000274:	4663      	mov	r3, ip
 8000276:	e7f1      	b.n	800025c <__udivmoddi4+0x90>
 8000278:	bb92      	cbnz	r2, 80002e0 <__udivmoddi4+0x114>
 800027a:	1b43      	subs	r3, r0, r5
 800027c:	2101      	movs	r1, #1
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	b2af      	uxth	r7, r5
 8000284:	fbb3 fcfe 	udiv	ip, r3, lr
 8000288:	0c20      	lsrs	r0, r4, #16
 800028a:	fb0e 331c 	mls	r3, lr, ip, r3
 800028e:	fb0c f807 	mul.w	r8, ip, r7
 8000292:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000296:	4598      	cmp	r8, r3
 8000298:	d962      	bls.n	8000360 <__udivmoddi4+0x194>
 800029a:	18eb      	adds	r3, r5, r3
 800029c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002a0:	d204      	bcs.n	80002ac <__udivmoddi4+0xe0>
 80002a2:	4598      	cmp	r8, r3
 80002a4:	d902      	bls.n	80002ac <__udivmoddi4+0xe0>
 80002a6:	f1ac 0002 	sub.w	r0, ip, #2
 80002aa:	442b      	add	r3, r5
 80002ac:	eba3 0308 	sub.w	r3, r3, r8
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b6:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ba:	fb0c f707 	mul.w	r7, ip, r7
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a7      	cmp	r7, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x198>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002cc:	d204      	bcs.n	80002d8 <__udivmoddi4+0x10c>
 80002ce:	42a7      	cmp	r7, r4
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x10c>
 80002d2:	f1ac 0302 	sub.w	r3, ip, #2
 80002d6:	442c      	add	r4, r5
 80002d8:	1be4      	subs	r4, r4, r7
 80002da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002de:	e7c0      	b.n	8000262 <__udivmoddi4+0x96>
 80002e0:	f1c2 0320 	rsb	r3, r2, #32
 80002e4:	fa20 f103 	lsr.w	r1, r0, r3
 80002e8:	4095      	lsls	r5, r2
 80002ea:	4090      	lsls	r0, r2
 80002ec:	fa2e f303 	lsr.w	r3, lr, r3
 80002f0:	4303      	orrs	r3, r0
 80002f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f6:	b2af      	uxth	r7, r5
 80002f8:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fc:	fb0e 101c 	mls	r0, lr, ip, r1
 8000300:	0c19      	lsrs	r1, r3, #16
 8000302:	fb0c f807 	mul.w	r8, ip, r7
 8000306:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800030a:	4588      	cmp	r8, r1
 800030c:	fa04 f402 	lsl.w	r4, r4, r2
 8000310:	d922      	bls.n	8000358 <__udivmoddi4+0x18c>
 8000312:	1869      	adds	r1, r5, r1
 8000314:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000318:	d204      	bcs.n	8000324 <__udivmoddi4+0x158>
 800031a:	4588      	cmp	r8, r1
 800031c:	d902      	bls.n	8000324 <__udivmoddi4+0x158>
 800031e:	f1ac 0002 	sub.w	r0, ip, #2
 8000322:	4429      	add	r1, r5
 8000324:	eba1 0108 	sub.w	r1, r1, r8
 8000328:	b29b      	uxth	r3, r3
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	fb0e 111c 	mls	r1, lr, ip, r1
 8000332:	fb0c f707 	mul.w	r7, ip, r7
 8000336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033a:	429f      	cmp	r7, r3
 800033c:	d90e      	bls.n	800035c <__udivmoddi4+0x190>
 800033e:	18eb      	adds	r3, r5, r3
 8000340:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000344:	d204      	bcs.n	8000350 <__udivmoddi4+0x184>
 8000346:	429f      	cmp	r7, r3
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x184>
 800034a:	f1ac 0102 	sub.w	r1, ip, #2
 800034e:	442b      	add	r3, r5
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000356:	e792      	b.n	800027e <__udivmoddi4+0xb2>
 8000358:	4660      	mov	r0, ip
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x158>
 800035c:	4661      	mov	r1, ip
 800035e:	e7f7      	b.n	8000350 <__udivmoddi4+0x184>
 8000360:	4660      	mov	r0, ip
 8000362:	e7a3      	b.n	80002ac <__udivmoddi4+0xe0>
 8000364:	4663      	mov	r3, ip
 8000366:	e7b7      	b.n	80002d8 <__udivmoddi4+0x10c>
 8000368:	4283      	cmp	r3, r0
 800036a:	d906      	bls.n	800037a <__udivmoddi4+0x1ae>
 800036c:	b916      	cbnz	r6, 8000374 <__udivmoddi4+0x1a8>
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e77b      	b.n	800026c <__udivmoddi4+0xa0>
 8000374:	e9c6 e000 	strd	lr, r0, [r6]
 8000378:	e7f9      	b.n	800036e <__udivmoddi4+0x1a2>
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	b98f      	cbnz	r7, 80003a4 <__udivmoddi4+0x1d8>
 8000380:	4283      	cmp	r3, r0
 8000382:	d301      	bcc.n	8000388 <__udivmoddi4+0x1bc>
 8000384:	4572      	cmp	r2, lr
 8000386:	d808      	bhi.n	800039a <__udivmoddi4+0x1ce>
 8000388:	ebbe 0402 	subs.w	r4, lr, r2
 800038c:	eb60 0303 	sbc.w	r3, r0, r3
 8000390:	2001      	movs	r0, #1
 8000392:	469c      	mov	ip, r3
 8000394:	b91e      	cbnz	r6, 800039e <__udivmoddi4+0x1d2>
 8000396:	2100      	movs	r1, #0
 8000398:	e768      	b.n	800026c <__udivmoddi4+0xa0>
 800039a:	4638      	mov	r0, r7
 800039c:	e7fa      	b.n	8000394 <__udivmoddi4+0x1c8>
 800039e:	e9c6 4c00 	strd	r4, ip, [r6]
 80003a2:	e7f8      	b.n	8000396 <__udivmoddi4+0x1ca>
 80003a4:	f1c7 0c20 	rsb	ip, r7, #32
 80003a8:	40bb      	lsls	r3, r7
 80003aa:	fa22 f40c 	lsr.w	r4, r2, ip
 80003ae:	431c      	orrs	r4, r3
 80003b0:	fa2e f10c 	lsr.w	r1, lr, ip
 80003b4:	fa20 f30c 	lsr.w	r3, r0, ip
 80003b8:	40b8      	lsls	r0, r7
 80003ba:	4301      	orrs	r1, r0
 80003bc:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c0:	fa0e f507 	lsl.w	r5, lr, r7
 80003c4:	fbb3 f8f9 	udiv	r8, r3, r9
 80003c8:	fa1f fe84 	uxth.w	lr, r4
 80003cc:	fb09 3018 	mls	r0, r9, r8, r3
 80003d0:	0c0b      	lsrs	r3, r1, #16
 80003d2:	fb08 fa0e 	mul.w	sl, r8, lr
 80003d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003da:	459a      	cmp	sl, r3
 80003dc:	fa02 f207 	lsl.w	r2, r2, r7
 80003e0:	d940      	bls.n	8000464 <__udivmoddi4+0x298>
 80003e2:	18e3      	adds	r3, r4, r3
 80003e4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003e8:	d204      	bcs.n	80003f4 <__udivmoddi4+0x228>
 80003ea:	459a      	cmp	sl, r3
 80003ec:	d902      	bls.n	80003f4 <__udivmoddi4+0x228>
 80003ee:	f1a8 0002 	sub.w	r0, r8, #2
 80003f2:	4423      	add	r3, r4
 80003f4:	eba3 030a 	sub.w	r3, r3, sl
 80003f8:	b289      	uxth	r1, r1
 80003fa:	fbb3 f8f9 	udiv	r8, r3, r9
 80003fe:	fb09 3318 	mls	r3, r9, r8, r3
 8000402:	fb08 fe0e 	mul.w	lr, r8, lr
 8000406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040a:	458e      	cmp	lr, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x29c>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x254>
 8000416:	458e      	cmp	lr, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x254>
 800041a:	f1a8 0302 	sub.w	r3, r8, #2
 800041e:	4421      	add	r1, r4
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	fba0 9802 	umull	r9, r8, r0, r2
 8000428:	eba1 010e 	sub.w	r1, r1, lr
 800042c:	4541      	cmp	r1, r8
 800042e:	46ce      	mov	lr, r9
 8000430:	4643      	mov	r3, r8
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x26e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x278>
 8000436:	454d      	cmp	r5, r9
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x278>
 800043a:	ebb9 0e02 	subs.w	lr, r9, r2
 800043e:	eb68 0304 	sbc.w	r3, r8, r4
 8000442:	3801      	subs	r0, #1
 8000444:	2e00      	cmp	r6, #0
 8000446:	d0a6      	beq.n	8000396 <__udivmoddi4+0x1ca>
 8000448:	ebb5 020e 	subs.w	r2, r5, lr
 800044c:	eb61 0103 	sbc.w	r1, r1, r3
 8000450:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	ea4c 0303 	orr.w	r3, ip, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	e9c6 3100 	strd	r3, r1, [r6]
 8000462:	e798      	b.n	8000396 <__udivmoddi4+0x1ca>
 8000464:	4640      	mov	r0, r8
 8000466:	e7c5      	b.n	80003f4 <__udivmoddi4+0x228>
 8000468:	4643      	mov	r3, r8
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x254>

0800046c <helloLoop>:
 * @param my_sem       thread's own semaphore
 * @param other_sem    other thread's semaphore
 */
void helloLoop(const char *my_name,
	       struct k_sem *my_sem, struct k_sem *other_sem)
{
 800046c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		/* say "hello" */
		if (tname == NULL) {
			printk("%s: Hello World from cpu %d on %s!\n",
				my_name, cpu, CONFIG_BOARD);
		} else {
			printk("%s: Hello World from cpu %d on %s!\n",
 8000470:	4f14      	ldr	r7, [pc, #80]	; (80004c4 <helloLoop+0x58>)
 8000472:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80004c8 <helloLoop+0x5c>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
 8000476:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80004cc <helloLoop+0x60>
{
 800047a:	4605      	mov	r5, r0
 800047c:	460e      	mov	r6, r1
 800047e:	4614      	mov	r4, r2
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8000480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000488:	4630      	mov	r0, r6
 800048a:	f001 ff35 	bl	80022f8 <z_impl_k_sem_take>
	return z_impl_z_current_get();
 800048e:	f002 f9f3 	bl	8002878 <z_impl_z_current_get>
		tname = k_thread_name_get(current_thread);
 8000492:	f003 f88e 	bl	80035b2 <k_thread_name_get>
			printk("%s: Hello World from cpu %d on %s!\n",
 8000496:	463b      	mov	r3, r7
		if (tname == NULL) {
 8000498:	4601      	mov	r1, r0
 800049a:	b980      	cbnz	r0, 80004be <helloLoop+0x52>
			printk("%s: Hello World from cpu %d on %s!\n",
 800049c:	4602      	mov	r2, r0
 800049e:	4629      	mov	r1, r5
			printk("%s: Hello World from cpu %d on %s!\n",
 80004a0:	4640      	mov	r0, r8
 80004a2:	f002 fbca 	bl	8002c3a <printk>
	z_impl_k_busy_wait(usec_to_wait);
 80004a6:	4648      	mov	r0, r9
 80004a8:	f002 fba6 	bl	8002bf8 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
 80004ac:	2100      	movs	r1, #0
 80004ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80004b2:	f002 f9c9 	bl	8002848 <z_impl_k_sleep>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80004b6:	4620      	mov	r0, r4
 80004b8:	f001 fefc 	bl	80022b4 <z_impl_k_sem_give>
	while (1) {
 80004bc:	e7e0      	b.n	8000480 <helloLoop+0x14>
			printk("%s: Hello World from cpu %d on %s!\n",
 80004be:	2200      	movs	r2, #0
 80004c0:	e7ee      	b.n	80004a0 <helloLoop+0x34>
 80004c2:	bf00      	nop
 80004c4:	08003e56 	.word	0x08003e56
 80004c8:	08003e67 	.word	0x08003e67
 80004cc:	000186a0 	.word	0x000186a0

080004d0 <threadB>:


/* threadB is a dynamic thread that is spawned by threadA */

void threadB(void *dummy1, void *dummy2, void *dummy3)
{
 80004d0:	b508      	push	{r3, lr}
	ARG_UNUSED(dummy1);
	ARG_UNUSED(dummy2);
	ARG_UNUSED(dummy3);

	/* invoke routine to ping-pong hello messages with threadA */
	helloLoop(__func__, &threadB_sem, &threadA_sem);
 80004d2:	4a02      	ldr	r2, [pc, #8]	; (80004dc <threadB+0xc>)
 80004d4:	4902      	ldr	r1, [pc, #8]	; (80004e0 <threadB+0x10>)
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <threadB+0x14>)
 80004d8:	f7ff ffc8 	bl	800046c <helloLoop>
 80004dc:	20000060 	.word	0x20000060
 80004e0:	20000070 	.word	0x20000070
 80004e4:	08003ea5 	.word	0x08003ea5

080004e8 <threadA>:
static struct k_thread threadB_data;

/* threadA is a static thread that is spawned automatically */

void threadA(void *dummy1, void *dummy2, void *dummy3)
{
 80004e8:	b508      	push	{r3, lr}
	ARG_UNUSED(dummy1);
	ARG_UNUSED(dummy2);
	ARG_UNUSED(dummy3);

	/* invoke routine to ping-pong hello messages with threadB */
	helloLoop(__func__, &threadA_sem, &threadB_sem);
 80004ea:	4a02      	ldr	r2, [pc, #8]	; (80004f4 <threadA+0xc>)
 80004ec:	4902      	ldr	r1, [pc, #8]	; (80004f8 <threadA+0x10>)
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <threadA+0x14>)
 80004f0:	f7ff ffbc 	bl	800046c <helloLoop>
 80004f4:	20000070 	.word	0x20000070
 80004f8:	20000060 	.word	0x20000060
 80004fc:	08003e9d 	.word	0x08003e9d

08000500 <main>:
}

void main(void)
{
 8000500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000504:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000508:	b089      	sub	sp, #36	; 0x24
 800050a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800050e:	4e18      	ldr	r6, [pc, #96]	; (8000570 <main+0x70>)
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <main+0x74>)
 8000512:	4919      	ldr	r1, [pc, #100]	; (8000578 <main+0x78>)
 8000514:	2400      	movs	r4, #0
 8000516:	2707      	movs	r7, #7
 8000518:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800051c:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8000520:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000524:	9400      	str	r4, [sp, #0]
 8000526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800052a:	4630      	mov	r0, r6
 800052c:	f001 fe4a 	bl	80021c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8000530:	4912      	ldr	r1, [pc, #72]	; (800057c <main+0x7c>)
 8000532:	4630      	mov	r0, r6
 8000534:	f001 fdf2 	bl	800211c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8000538:	4d11      	ldr	r5, [pc, #68]	; (8000580 <main+0x80>)
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <main+0x84>)
 800053c:	4912      	ldr	r1, [pc, #72]	; (8000588 <main+0x88>)
 800053e:	9400      	str	r4, [sp, #0]
 8000540:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000544:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8000548:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800054c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000550:	4628      	mov	r0, r5
 8000552:	f001 fe37 	bl	80021c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <main+0x8c>)
 8000558:	4628      	mov	r0, r5
 800055a:	f001 fddf 	bl	800211c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800055e:	4630      	mov	r0, r6
 8000560:	f003 f829 	bl	80035b6 <z_impl_k_thread_start>
 8000564:	4628      	mov	r0, r5
	}
#endif

	k_thread_start(&threadA_data);
	k_thread_start(&threadB_data);
}
 8000566:	b009      	add	sp, #36	; 0x24
 8000568:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800056c:	f003 b823 	b.w	80035b6 <z_impl_k_thread_start>
 8000570:	20000128 	.word	0x20000128
 8000574:	080004e9 	.word	0x080004e9
 8000578:	20000900 	.word	0x20000900
 800057c:	08003e8b 	.word	0x08003e8b
 8000580:	20000080 	.word	0x20000080
 8000584:	080004d1 	.word	0x080004d1
 8000588:	200004c0 	.word	0x200004c0
 800058c:	08003e94 	.word	0x08003e94

08000590 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <char_out+0x8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4718      	bx	r3
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <__printk_hook_install>:
	_char_out = fn;
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <__printk_hook_install+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80005a8:	b507      	push	{r0, r1, r2, lr}
 80005aa:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	4602      	mov	r2, r0
 80005b0:	9100      	str	r1, [sp, #0]
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <vprintk+0x18>)
 80005b4:	f000 f806 	bl	80005c4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80005b8:	b003      	add	sp, #12
 80005ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80005be:	bf00      	nop
 80005c0:	08000591 	.word	0x08000591

080005c4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80005c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c8:	4681      	mov	r9, r0
 80005ca:	b095      	sub	sp, #84	; 0x54
 80005cc:	468b      	mov	fp, r1
 80005ce:	4617      	mov	r7, r2
 80005d0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80005d2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80005d4:	7838      	ldrb	r0, [r7, #0]
 80005d6:	b908      	cbnz	r0, 80005dc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80005d8:	4628      	mov	r0, r5
 80005da:	e358      	b.n	8000c8e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 80005dc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 80005de:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80005e0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 80005e2:	d006      	beq.n	80005f2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 80005e4:	4659      	mov	r1, fp
 80005e6:	47c8      	blx	r9
 80005e8:	2800      	cmp	r0, #0
 80005ea:	f2c0 8350 	blt.w	8000c8e <z_cbvprintf_impl+0x6ca>
 80005ee:	3501      	adds	r5, #1
		if (bps == NULL) {
 80005f0:	e1fb      	b.n	80009ea <z_cbvprintf_impl+0x426>
		} state = {
 80005f2:	2218      	movs	r2, #24
 80005f4:	2100      	movs	r1, #0
 80005f6:	a80e      	add	r0, sp, #56	; 0x38
 80005f8:	f002 fbd6 	bl	8002da8 <memset>
	if (*sp == '%') {
 80005fc:	787b      	ldrb	r3, [r7, #1]
 80005fe:	2b25      	cmp	r3, #37	; 0x25
 8000600:	d07d      	beq.n	80006fe <z_cbvprintf_impl+0x13a>
 8000602:	2300      	movs	r3, #0
 8000604:	1c78      	adds	r0, r7, #1
 8000606:	4698      	mov	r8, r3
 8000608:	469e      	mov	lr, r3
 800060a:	469c      	mov	ip, r3
 800060c:	461e      	mov	r6, r3
 800060e:	4601      	mov	r1, r0
		switch (*sp) {
 8000610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000614:	2a2b      	cmp	r2, #43	; 0x2b
 8000616:	f000 80a1 	beq.w	800075c <z_cbvprintf_impl+0x198>
 800061a:	f200 8098 	bhi.w	800074e <z_cbvprintf_impl+0x18a>
 800061e:	2a20      	cmp	r2, #32
 8000620:	f000 809f 	beq.w	8000762 <z_cbvprintf_impl+0x19e>
 8000624:	2a23      	cmp	r2, #35	; 0x23
 8000626:	f000 809f 	beq.w	8000768 <z_cbvprintf_impl+0x1a4>
 800062a:	b12b      	cbz	r3, 8000638 <z_cbvprintf_impl+0x74>
 800062c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000638:	f1b8 0f00 	cmp.w	r8, #0
 800063c:	d005      	beq.n	800064a <z_cbvprintf_impl+0x86>
 800063e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800064a:	f1be 0f00 	cmp.w	lr, #0
 800064e:	d005      	beq.n	800065c <z_cbvprintf_impl+0x98>
 8000650:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800065c:	f1bc 0f00 	cmp.w	ip, #0
 8000660:	d005      	beq.n	800066e <z_cbvprintf_impl+0xaa>
 8000662:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800066e:	b12e      	cbz	r6, 800067c <z_cbvprintf_impl+0xb8>
 8000670:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 800067c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000680:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000684:	2844      	cmp	r0, #68	; 0x44
 8000686:	d103      	bne.n	8000690 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000688:	f36f 1386 	bfc	r3, #6, #1
 800068c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 8000690:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000694:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 800069e:	d17f      	bne.n	80007a0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 80006a0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80006a4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 80006a8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80006aa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	2a2e      	cmp	r2, #46	; 0x2e
 80006b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80006b6:	bf0c      	ite	eq
 80006b8:	2101      	moveq	r1, #1
 80006ba:	2100      	movne	r1, #0
 80006bc:	f361 0241 	bfi	r2, r1, #1, #1
 80006c0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 80006c4:	d178      	bne.n	80007b8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	2a2a      	cmp	r2, #42	; 0x2a
 80006ca:	d06e      	beq.n	80007aa <z_cbvprintf_impl+0x1e6>
	++sp;
 80006cc:	3301      	adds	r3, #1
	size_t val = 0;
 80006ce:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80006d0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80006d4:	4619      	mov	r1, r3
 80006d6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80006da:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006de:	2e09      	cmp	r6, #9
 80006e0:	f240 8095 	bls.w	800080e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 80006e4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 80006e8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 80006ea:	f3c1 0040 	ubfx	r0, r1, #1, #1
 80006ee:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 80006f2:	460a      	mov	r2, r1
 80006f4:	f360 0241 	bfi	r2, r0, #1, #1
 80006f8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 80006fc:	e05c      	b.n	80007b8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 80006fe:	1cba      	adds	r2, r7, #2
 8000700:	9203      	str	r2, [sp, #12]
 8000702:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 8000706:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800070a:	07da      	lsls	r2, r3, #31
 800070c:	f140 812e 	bpl.w	800096c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000710:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000714:	f1b8 0f00 	cmp.w	r8, #0
 8000718:	da07      	bge.n	800072a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 800071a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800071e:	f042 0204 	orr.w	r2, r2, #4
 8000722:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000726:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 800072a:	075e      	lsls	r6, r3, #29
 800072c:	f140 8127 	bpl.w	800097e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000730:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000734:	f1ba 0f00 	cmp.w	sl, #0
 8000738:	f280 8126 	bge.w	8000988 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 800073c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000740:	f36f 0341 	bfc	r3, #1, #1
 8000744:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000748:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800074c:	e11c      	b.n	8000988 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 800074e:	2a2d      	cmp	r2, #45	; 0x2d
 8000750:	d00d      	beq.n	800076e <z_cbvprintf_impl+0x1aa>
 8000752:	2a30      	cmp	r2, #48	; 0x30
 8000754:	f47f af69 	bne.w	800062a <z_cbvprintf_impl+0x66>
 8000758:	2301      	movs	r3, #1
	} while (loop);
 800075a:	e758      	b.n	800060e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 800075c:	f04f 0c01 	mov.w	ip, #1
 8000760:	e755      	b.n	800060e <z_cbvprintf_impl+0x4a>
 8000762:	f04f 0e01 	mov.w	lr, #1
 8000766:	e752      	b.n	800060e <z_cbvprintf_impl+0x4a>
 8000768:	f04f 0801 	mov.w	r8, #1
 800076c:	e74f      	b.n	800060e <z_cbvprintf_impl+0x4a>
 800076e:	2601      	movs	r6, #1
 8000770:	e74d      	b.n	800060e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 8000772:	fb0e 6202 	mla	r2, lr, r2, r6
 8000776:	3a30      	subs	r2, #48	; 0x30
 8000778:	4603      	mov	r3, r0
 800077a:	4618      	mov	r0, r3
 800077c:	f810 6b01 	ldrb.w	r6, [r0], #1
 8000780:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000784:	f1bc 0f09 	cmp.w	ip, #9
 8000788:	d9f3      	bls.n	8000772 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 800078a:	4299      	cmp	r1, r3
 800078c:	d08f      	beq.n	80006ae <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800078e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 8000792:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 8000794:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000796:	f362 0141 	bfi	r1, r2, #1, #1
 800079a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800079e:	e786      	b.n	80006ae <z_cbvprintf_impl+0xea>
 80007a0:	460b      	mov	r3, r1
	size_t val = 0;
 80007a2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80007a4:	f04f 0e0a 	mov.w	lr, #10
 80007a8:	e7e7      	b.n	800077a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 80007aa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007ae:	f042 0204 	orr.w	r2, r2, #4
 80007b2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80007b6:	3302      	adds	r3, #2
	switch (*sp) {
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	2a6c      	cmp	r2, #108	; 0x6c
 80007bc:	d047      	beq.n	800084e <z_cbvprintf_impl+0x28a>
 80007be:	d82b      	bhi.n	8000818 <z_cbvprintf_impl+0x254>
 80007c0:	2a68      	cmp	r2, #104	; 0x68
 80007c2:	d031      	beq.n	8000828 <z_cbvprintf_impl+0x264>
 80007c4:	2a6a      	cmp	r2, #106	; 0x6a
 80007c6:	d04b      	beq.n	8000860 <z_cbvprintf_impl+0x29c>
 80007c8:	2a4c      	cmp	r2, #76	; 0x4c
 80007ca:	d051      	beq.n	8000870 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 80007cc:	461a      	mov	r2, r3
 80007ce:	f812 3b01 	ldrb.w	r3, [r2], #1
 80007d2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 80007d4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 80007da:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 80007de:	f200 80be 	bhi.w	800095e <z_cbvprintf_impl+0x39a>
 80007e2:	2b6d      	cmp	r3, #109	; 0x6d
 80007e4:	d851      	bhi.n	800088a <z_cbvprintf_impl+0x2c6>
 80007e6:	2b69      	cmp	r3, #105	; 0x69
 80007e8:	f200 80b9 	bhi.w	800095e <z_cbvprintf_impl+0x39a>
 80007ec:	2b57      	cmp	r3, #87	; 0x57
 80007ee:	d867      	bhi.n	80008c0 <z_cbvprintf_impl+0x2fc>
 80007f0:	2b41      	cmp	r3, #65	; 0x41
 80007f2:	d003      	beq.n	80007fc <z_cbvprintf_impl+0x238>
 80007f4:	3b45      	subs	r3, #69	; 0x45
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	f200 80b1 	bhi.w	800095e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 80007fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000800:	2204      	movs	r2, #4
 8000802:	f362 0302 	bfi	r3, r2, #0, #3
 8000806:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 800080a:	2301      	movs	r3, #1
			break;
 800080c:	e073      	b.n	80008f6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 800080e:	fb0c 0202 	mla	r2, ip, r2, r0
 8000812:	3a30      	subs	r2, #48	; 0x30
 8000814:	460b      	mov	r3, r1
 8000816:	e75d      	b.n	80006d4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000818:	2a74      	cmp	r2, #116	; 0x74
 800081a:	d025      	beq.n	8000868 <z_cbvprintf_impl+0x2a4>
 800081c:	2a7a      	cmp	r2, #122	; 0x7a
 800081e:	d1d5      	bne.n	80007cc <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8000820:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000824:	2106      	movs	r1, #6
 8000826:	e00c      	b.n	8000842 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	2a68      	cmp	r2, #104	; 0x68
 800082c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000830:	d106      	bne.n	8000840 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 8000832:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000834:	f361 02c6 	bfi	r2, r1, #3, #4
 8000838:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 800083c:	3302      	adds	r3, #2
 800083e:	e7c5      	b.n	80007cc <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 8000840:	2102      	movs	r1, #2
 8000842:	f361 02c6 	bfi	r2, r1, #3, #4
 8000846:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 800084a:	3301      	adds	r3, #1
 800084c:	e7be      	b.n	80007cc <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 800084e:	785a      	ldrb	r2, [r3, #1]
 8000850:	2a6c      	cmp	r2, #108	; 0x6c
 8000852:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000856:	d101      	bne.n	800085c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 8000858:	2104      	movs	r1, #4
 800085a:	e7eb      	b.n	8000834 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 800085c:	2103      	movs	r1, #3
 800085e:	e7f0      	b.n	8000842 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 8000860:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000864:	2105      	movs	r1, #5
 8000866:	e7ec      	b.n	8000842 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 8000868:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800086c:	2107      	movs	r1, #7
 800086e:	e7e8      	b.n	8000842 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 8000870:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8000874:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000878:	f022 0202 	bic.w	r2, r2, #2
 800087c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000880:	f042 0202 	orr.w	r2, r2, #2
 8000884:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 8000888:	e7df      	b.n	800084a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 800088a:	3b6e      	subs	r3, #110	; 0x6e
 800088c:	b2d9      	uxtb	r1, r3
 800088e:	2301      	movs	r3, #1
 8000890:	408b      	lsls	r3, r1
 8000892:	f240 4182 	movw	r1, #1154	; 0x482
 8000896:	420b      	tst	r3, r1
 8000898:	d137      	bne.n	800090a <z_cbvprintf_impl+0x346>
 800089a:	f013 0f24 	tst.w	r3, #36	; 0x24
 800089e:	d151      	bne.n	8000944 <z_cbvprintf_impl+0x380>
 80008a0:	07d8      	lsls	r0, r3, #31
 80008a2:	d55c      	bpl.n	800095e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80008a4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008a8:	2103      	movs	r1, #3
 80008aa:	f361 0302 	bfi	r3, r1, #0, #3
 80008ae:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008b2:	f002 0378 	and.w	r3, r2, #120	; 0x78
 80008b6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80008ba:	424b      	negs	r3, r1
 80008bc:	414b      	adcs	r3, r1
 80008be:	e01a      	b.n	80008f6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 80008c0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 80008c4:	b2c9      	uxtb	r1, r1
 80008c6:	2001      	movs	r0, #1
 80008c8:	fa00 f101 	lsl.w	r1, r0, r1
 80008cc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80008d0:	d194      	bne.n	80007fc <z_cbvprintf_impl+0x238>
 80008d2:	f640 0601 	movw	r6, #2049	; 0x801
 80008d6:	4231      	tst	r1, r6
 80008d8:	d11d      	bne.n	8000916 <z_cbvprintf_impl+0x352>
 80008da:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 80008de:	d03e      	beq.n	800095e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 80008e0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008e4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008e8:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80008ec:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 80008ee:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008f2:	d034      	beq.n	800095e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 80008f4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 80008f6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80008fa:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80008fe:	430b      	orrs	r3, r1
 8000900:	f363 0241 	bfi	r2, r3, #1, #1
 8000904:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000908:	e6fd      	b.n	8000706 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 800090a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800090e:	2102      	movs	r1, #2
 8000910:	f361 0302 	bfi	r3, r1, #0, #3
 8000914:	e7e8      	b.n	80008e8 <z_cbvprintf_impl+0x324>
 8000916:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 800091a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 800091c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000920:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000924:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000926:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 800092a:	bf02      	ittt	eq
 800092c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000930:	f041 0101 	orreq.w	r1, r1, #1
 8000934:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8000938:	2b63      	cmp	r3, #99	; 0x63
 800093a:	d1db      	bne.n	80008f4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800093c:	1e13      	subs	r3, r2, #0
 800093e:	bf18      	it	ne
 8000940:	2301      	movne	r3, #1
 8000942:	e7d8      	b.n	80008f6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000944:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000948:	2103      	movs	r1, #3
 800094a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 800094e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000952:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	e7cb      	b.n	80008f6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 800095e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 800096a:	e7c3      	b.n	80008f4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 800096c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8000970:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000972:	bfb4      	ite	lt
 8000974:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 8000978:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 800097c:	e6d5      	b.n	800072a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 800097e:	0798      	lsls	r0, r3, #30
 8000980:	f57f aee2 	bpl.w	8000748 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 8000984:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 8000988:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 800098c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 800098e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000992:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 8000996:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 800099a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 800099c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80009a0:	d133      	bne.n	8000a0a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 80009a2:	1ecb      	subs	r3, r1, #3
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d804      	bhi.n	80009b2 <z_cbvprintf_impl+0x3ee>
 80009a8:	e8df f003 	tbb	[pc, r3]
 80009ac:	21464621 	.word	0x21464621
 80009b0:	21          	.byte	0x21
 80009b1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80009b2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80009b4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 80009b6:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80009ba:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80009be:	d11c      	bne.n	80009fa <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 80009c0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 80009c4:	17da      	asrs	r2, r3, #31
 80009c6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 80009ca:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80009cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009d0:	f013 0603 	ands.w	r6, r3, #3
 80009d4:	d050      	beq.n	8000a78 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 80009d6:	9b03      	ldr	r3, [sp, #12]
 80009d8:	463a      	mov	r2, r7
 80009da:	4659      	mov	r1, fp
 80009dc:	4648      	mov	r0, r9
 80009de:	f002 f989 	bl	8002cf4 <outs>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	f2c0 8153 	blt.w	8000c8e <z_cbvprintf_impl+0x6ca>
 80009e8:	4405      	add	r5, r0
			continue;
 80009ea:	9f03      	ldr	r7, [sp, #12]
 80009ec:	e5f2      	b.n	80005d4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80009ee:	f854 3b04 	ldr.w	r3, [r4], #4
 80009f2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 80009f4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 80009f8:	e7e8      	b.n	80009cc <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 80009fa:	2902      	cmp	r1, #2
 80009fc:	d1e5      	bne.n	80009ca <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000a04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a08:	e7df      	b.n	80009ca <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d124      	bne.n	8000a58 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000a0e:	1ecb      	subs	r3, r1, #3
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d804      	bhi.n	8000a1e <z_cbvprintf_impl+0x45a>
 8000a14:	e8df f003 	tbb	[pc, r3]
 8000a18:	18101018 	.word	0x18101018
 8000a1c:	18          	.byte	0x18
 8000a1d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000a1e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8000a20:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	d014      	beq.n	8000a54 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000a2a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000a2c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000a30:	d1cc      	bne.n	80009cc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000a32:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000a34:	930e      	str	r3, [sp, #56]	; 0x38
 8000a36:	e7c9      	b.n	80009cc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000a38:	3407      	adds	r4, #7
 8000a3a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000a3e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000a42:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000a46:	e7c1      	b.n	80009cc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000a48:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8000a4e:	2300      	movs	r3, #0
 8000a50:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000a52:	e7bb      	b.n	80009cc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	e7cd      	b.n	80009f4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d108      	bne.n	8000a6e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000a5c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000a5e:	f024 0407 	bic.w	r4, r4, #7
 8000a62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000a66:	3408      	adds	r4, #8
 8000a68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a6c:	e7ae      	b.n	80009cc <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d1ac      	bne.n	80009cc <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000a72:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a76:	e7dd      	b.n	8000a34 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8000a78:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000a7c:	2878      	cmp	r0, #120	; 0x78
 8000a7e:	d8b4      	bhi.n	80009ea <z_cbvprintf_impl+0x426>
 8000a80:	2862      	cmp	r0, #98	; 0x62
 8000a82:	d81c      	bhi.n	8000abe <z_cbvprintf_impl+0x4fa>
 8000a84:	2825      	cmp	r0, #37	; 0x25
 8000a86:	f43f adad 	beq.w	80005e4 <z_cbvprintf_impl+0x20>
 8000a8a:	2858      	cmp	r0, #88	; 0x58
 8000a8c:	d1ad      	bne.n	80009ea <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a8e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000a98:	ab08      	add	r3, sp, #32
 8000a9a:	aa10      	add	r2, sp, #64	; 0x40
 8000a9c:	f002 f8e4 	bl	8002c68 <encode_uint>
			if (precision >= 0) {
 8000aa0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000aa4:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000aa6:	f280 809a 	bge.w	8000bde <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 8000aaa:	2f00      	cmp	r7, #0
 8000aac:	d09d      	beq.n	80009ea <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000aae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000ab2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	f000 80c1 	beq.w	8000c3c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 8000aba:	3001      	adds	r0, #1
 8000abc:	e0be      	b.n	8000c3c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 8000abe:	3863      	subs	r0, #99	; 0x63
 8000ac0:	2815      	cmp	r0, #21
 8000ac2:	d892      	bhi.n	80009ea <z_cbvprintf_impl+0x426>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <z_cbvprintf_impl+0x508>)
 8000ac6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000ba1 	.word	0x08000ba1
 8000ad0:	08000bb3 	.word	0x08000bb3
 8000ad4:	080009eb 	.word	0x080009eb
 8000ad8:	080009eb 	.word	0x080009eb
 8000adc:	080009eb 	.word	0x080009eb
 8000ae0:	080009eb 	.word	0x080009eb
 8000ae4:	08000bb3 	.word	0x08000bb3
 8000ae8:	080009eb 	.word	0x080009eb
 8000aec:	080009eb 	.word	0x080009eb
 8000af0:	080009eb 	.word	0x080009eb
 8000af4:	080009eb 	.word	0x080009eb
 8000af8:	08000c41 	.word	0x08000c41
 8000afc:	08000bd9 	.word	0x08000bd9
 8000b00:	08000bff 	.word	0x08000bff
 8000b04:	080009eb 	.word	0x080009eb
 8000b08:	080009eb 	.word	0x080009eb
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	080009eb 	.word	0x080009eb
 8000b14:	08000bd9 	.word	0x08000bd9
 8000b18:	080009eb 	.word	0x080009eb
 8000b1c:	080009eb 	.word	0x080009eb
 8000b20:	08000bd9 	.word	0x08000bd9
			if (precision >= 0) {
 8000b24:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000b28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000b2a:	db35      	blt.n	8000b98 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000b2c:	4651      	mov	r1, sl
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f002 f926 	bl	8002d80 <strnlen>
			bpe = bps + len;
 8000b34:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000b38:	2f00      	cmp	r7, #0
 8000b3a:	f43f af56 	beq.w	80009ea <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000b3e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000b40:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000b44:	f013 0210 	ands.w	r2, r3, #16
 8000b48:	9205      	str	r2, [sp, #20]
 8000b4a:	f000 8093 	beq.w	8000c74 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8000b4e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000b50:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000b54:	bf48      	it	mi
 8000b56:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000b58:	9204      	str	r2, [sp, #16]
 8000b5a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000b5c:	bf48      	it	mi
 8000b5e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000b60:	f1b8 0f00 	cmp.w	r8, #0
 8000b64:	f340 80a0 	ble.w	8000ca8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
 8000b68:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000b6c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000b70:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000b74:	0750      	lsls	r0, r2, #29
 8000b76:	9306      	str	r3, [sp, #24]
 8000b78:	f100 8096 	bmi.w	8000ca8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
 8000b7c:	0651      	lsls	r1, r2, #25
 8000b7e:	f140 8089 	bpl.w	8000c94 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8000b82:	b13e      	cbz	r6, 8000b94 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000b84:	4659      	mov	r1, fp
 8000b86:	4630      	mov	r0, r6
 8000b88:	47c8      	blx	r9
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	db7f      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000b8e:	9b06      	ldr	r3, [sp, #24]
 8000b90:	3501      	adds	r5, #1
 8000b92:	461e      	mov	r6, r3
					pad = '0';
 8000b94:	2230      	movs	r2, #48	; 0x30
 8000b96:	e07e      	b.n	8000c96 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f002 f8ea 	bl	8002d72 <strlen>
 8000b9e:	e7c9      	b.n	8000b34 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000ba2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000ba6:	2600      	movs	r6, #0
			bps = buf;
 8000ba8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000baa:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	e7c6      	b.n	8000b40 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000bb2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000bb4:	bf5c      	itt	pl
 8000bb6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000bba:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000bbc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000bc0:	bf48      	it	mi
 8000bc2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f6bf af62 	bge.w	8000a8e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000bca:	4252      	negs	r2, r2
 8000bcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000bd4:	262d      	movs	r6, #45	; 0x2d
 8000bd6:	e75a      	b.n	8000a8e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000bd8:	2600      	movs	r6, #0
 8000bda:	e758      	b.n	8000a8e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000bdc:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000bde:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000be2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000be6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000be8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000bec:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000bee:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000bf2:	f67f af5a 	bls.w	8000aaa <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000bf6:	ebaa 0303 	sub.w	r3, sl, r3
 8000bfa:	9311      	str	r3, [sp, #68]	; 0x44
 8000bfc:	e755      	b.n	8000aaa <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000bfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000c00:	b390      	cbz	r0, 8000c68 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c02:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	aa10      	add	r2, sp, #64	; 0x40
 8000c0a:	ab08      	add	r3, sp, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f002 f82b 	bl	8002c68 <encode_uint>
				conv->altform_0c = true;
 8000c12:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000c16:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c1a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000c22:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c26:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000c28:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000c2c:	dad6      	bge.n	8000bdc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	f43f aedb 	beq.w	80009ea <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000c34:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c38:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e77f      	b.n	8000b40 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000c42:	2907      	cmp	r1, #7
 8000c44:	f63f aed1 	bhi.w	80009ea <z_cbvprintf_impl+0x426>
 8000c48:	e8df f001 	tbb	[pc, r1]
 8000c4c:	0c06040c 	.word	0x0c06040c
 8000c50:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000c54:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000c56:	e6c8      	b.n	80009ea <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000c58:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000c5a:	e6c6      	b.n	80009ea <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000c5c:	17ea      	asrs	r2, r5, #31
 8000c5e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000c62:	e6c2      	b.n	80009ea <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000c64:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000c66:	e6c0      	b.n	80009ea <z_cbvprintf_impl+0x426>
 8000c68:	4f2e      	ldr	r7, [pc, #184]	; (8000d24 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000c6a:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000c6c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000c70:	2005      	movs	r0, #5
 8000c72:	e765      	b.n	8000b40 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000c74:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000c76:	bf48      	it	mi
 8000c78:	3001      	addmi	r0, #1
 8000c7a:	e769      	b.n	8000b50 <z_cbvprintf_impl+0x58c>
 8000c7c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 8000c7e:	4610      	mov	r0, r2
 8000c80:	9206      	str	r2, [sp, #24]
 8000c82:	4659      	mov	r1, fp
 8000c84:	47c8      	blx	r9
 8000c86:	2800      	cmp	r0, #0
 8000c88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c8c:	da04      	bge.n	8000c98 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 8000c8e:	b015      	add	sp, #84	; 0x54
 8000c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000c94:	2220      	movs	r2, #32
					pad = '0';
 8000c96:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000ca0:	dcec      	bgt.n	8000c7c <z_cbvprintf_impl+0x6b8>
 8000ca2:	4445      	add	r5, r8
 8000ca4:	1a6d      	subs	r5, r5, r1
 8000ca6:	4698      	mov	r8, r3
		if (sign != 0) {
 8000ca8:	b12e      	cbz	r6, 8000cb6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
 8000caa:	4659      	mov	r1, fp
 8000cac:	4630      	mov	r0, r6
 8000cae:	47c8      	blx	r9
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	dbec      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000cb4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000cb6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000cba:	06da      	lsls	r2, r3, #27
 8000cbc:	d401      	bmi.n	8000cc2 <z_cbvprintf_impl+0x6fe>
 8000cbe:	071b      	lsls	r3, r3, #28
 8000cc0:	d505      	bpl.n	8000cce <z_cbvprintf_impl+0x70a>
				OUTC('0');
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	47c8      	blx	r9
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	dbe0      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000ccc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000cce:	9b05      	ldr	r3, [sp, #20]
 8000cd0:	b133      	cbz	r3, 8000ce0 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
 8000cd2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000cd6:	4659      	mov	r1, fp
 8000cd8:	47c8      	blx	r9
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dbd7      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000cde:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000ce0:	9e04      	ldr	r6, [sp, #16]
 8000ce2:	442e      	add	r6, r5
 8000ce4:	e005      	b.n	8000cf2 <z_cbvprintf_impl+0x72e>
				OUTC('0');
 8000ce6:	4659      	mov	r1, fp
 8000ce8:	2030      	movs	r0, #48	; 0x30
 8000cea:	47c8      	blx	r9
 8000cec:	2800      	cmp	r0, #0
 8000cee:	dbce      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000cf0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000cf2:	1b73      	subs	r3, r6, r5
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dcf6      	bgt.n	8000ce6 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
 8000cf8:	4653      	mov	r3, sl
 8000cfa:	463a      	mov	r2, r7
 8000cfc:	4659      	mov	r1, fp
 8000cfe:	4648      	mov	r0, r9
 8000d00:	f001 fff8 	bl	8002cf4 <outs>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	dbc2      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000d08:	4405      	add	r5, r0
		while (width > 0) {
 8000d0a:	44a8      	add	r8, r5
 8000d0c:	eba8 0305 	sub.w	r3, r8, r5
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f77f ae6a 	ble.w	80009ea <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000d16:	4659      	mov	r1, fp
 8000d18:	2020      	movs	r0, #32
 8000d1a:	47c8      	blx	r9
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	dbb6      	blt.n	8000c8e <z_cbvprintf_impl+0x6ca>
 8000d20:	3501      	adds	r5, #1
			--width;
 8000d22:	e7f3      	b.n	8000d0c <z_cbvprintf_impl+0x748>
 8000d24:	08003ebe 	.word	0x08003ebe

08000d28 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <st_stm32f4_init+0x34>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d30:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d38:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000d3a:	f04f 0210 	mov.w	r2, #16
 8000d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8000d42:	f382 8812 	msr	BASEPRI_MAX, r2
 8000d46:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000d4a:	f383 8811 	msr	BASEPRI, r3
 8000d4e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <st_stm32f4_init+0x38>)
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <st_stm32f4_init+0x3c>)
 8000d56:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000d58:	2000      	movs	r0, #0
 8000d5a:	4770      	bx	lr
 8000d5c:	40023c00 	.word	0x40023c00
 8000d60:	2000003c 	.word	0x2000003c
 8000d64:	00f42400 	.word	0x00f42400

08000d68 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000d68:	4901      	ldr	r1, [pc, #4]	; (8000d70 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000d6a:	2210      	movs	r2, #16
	str	r2, [r1]
 8000d6c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000d6e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000d70:	e000ed10 	.word	0xe000ed10

08000d74 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000d74:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000d76:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000d78:	f380 8811 	msr	BASEPRI, r0
	isb
 8000d7c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000d80:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000d84:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000d86:	b662      	cpsie	i
	isb
 8000d88:	f3bf 8f6f 	isb	sy

	bx	lr
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000d90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d92:	2800      	cmp	r0, #0
 8000d94:	db07      	blt.n	8000da6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <arch_irq_enable+0x18>)
 8000d98:	0941      	lsrs	r1, r0, #5
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f000 001f 	and.w	r0, r0, #31
 8000da0:	4083      	lsls	r3, r0
 8000da2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100

08000dac <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000dac:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000dae:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	bfa8      	it	ge
 8000db2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000db6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	bfb8      	it	lt
 8000dbc:	4b06      	ldrlt	r3, [pc, #24]	; (8000dd8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000dc2:	bfac      	ite	ge
 8000dc4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	bfb4      	ite	lt
 8000dd0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed14 	.word	0xe000ed14

08000ddc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000ddc:	bf30      	wfi
    b z_SysNmiOnReset
 8000dde:	f7ff bffd 	b.w	8000ddc <z_SysNmiOnReset>
 8000de2:	bf00      	nop

08000de4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000de6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <z_arm_prep_c+0x44>)
 8000dea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000dee:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000df4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000dfc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000e04:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000e08:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000e0c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000e10:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000e14:	f001 f8cc 	bl	8001fb0 <z_bss_zero>
	z_data_copy();
 8000e18:	f001 fd94 	bl	8002944 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000e1c:	f000 f9d0 	bl	80011c0 <z_arm_interrupt_init>
	z_cstart();
 8000e20:	f001 f90e 	bl	8002040 <z_cstart>
 8000e24:	08000000 	.word	0x08000000
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e2e:	490b      	ldr	r1, [pc, #44]	; (8000e5c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000e30:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e32:	6809      	ldr	r1, [r1, #0]
 8000e34:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e38:	4909      	ldr	r1, [pc, #36]	; (8000e60 <arch_swap+0x34>)
	_current->arch.basepri = key;
 8000e3a:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e3e:	684b      	ldr	r3, [r1, #4]
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	604b      	str	r3, [r1, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000e50:	6893      	ldr	r3, [r2, #8]
}
 8000e52:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8000e56:	4770      	bx	lr
 8000e58:	2000047c 	.word	0x2000047c
 8000e5c:	08003e34 	.word	0x08003e34
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000e64:	4913      	ldr	r1, [pc, #76]	; (8000eb4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000e66:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000e68:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8000e6c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000e6e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000e72:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000e76:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000e78:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000e7c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000e80:	4f0d      	ldr	r7, [pc, #52]	; (8000eb8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000e82:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000e86:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000e88:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000e8a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000e8c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    movs r3, #0
 8000e90:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000e92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000e96:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000e9a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000e9c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000e9e:	f000 f9d3 	bl	8001248 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000ea2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000ea6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 8000eaa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000eae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000eb2:	4770      	bx	lr
    ldr r1, =_kernel
 8000eb4:	2000047c 	.word	0x2000047c
    ldr v4, =_SCS_ICSR
 8000eb8:	e000ed04 	.word	0xe000ed04

08000ebc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000ebc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000ec0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000ec2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000ec6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000eca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000ecc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000ed0:	2902      	cmp	r1, #2
    beq _oops
 8000ed2:	d0ff      	beq.n	8000ed4 <_oops>

08000ed4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000ed4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000ed6:	f001 ff29 	bl	8002d2c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000eda:	bd01      	pop	{r0, pc}

08000edc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000edc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000ee6:	490a      	ldr	r1, [pc, #40]	; (8000f10 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000eee:	9b02      	ldr	r3, [sp, #8]
 8000ef0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000ef4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000f00:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000f04:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000f06:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000f08:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8000f0a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000f0e:	4770      	bx	lr
 8000f10:	08002c55 	.word	0x08002c55

08000f14 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <z_check_thread_stack_fail+0x2c>)
{
 8000f16:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000f18:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000f1a:	b178      	cbz	r0, 8000f3c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000f1c:	f113 0f16 	cmn.w	r3, #22
 8000f20:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8000f24:	d005      	beq.n	8000f32 <z_check_thread_stack_fail+0x1e>
 8000f26:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d805      	bhi.n	8000f3a <z_check_thread_stack_fail+0x26>
 8000f2e:	4283      	cmp	r3, r0
 8000f30:	d203      	bcs.n	8000f3a <z_check_thread_stack_fail+0x26>
		return 0;
 8000f32:	4281      	cmp	r1, r0
 8000f34:	bf28      	it	cs
 8000f36:	2000      	movcs	r0, #0
 8000f38:	4770      	bx	lr
 8000f3a:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2000047c 	.word	0x2000047c

08000f44 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000f44:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <arch_switch_to_main_thread+0x28>)
 8000f48:	6098      	str	r0, [r3, #8]
{
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000f4e:	f000 f97b 	bl	8001248 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000f52:	4620      	mov	r0, r4
 8000f54:	f385 8809 	msr	PSP, r5
 8000f58:	2100      	movs	r1, #0
 8000f5a:	b663      	cpsie	if
 8000f5c:	f381 8811 	msr	BASEPRI, r1
 8000f60:	f3bf 8f6f 	isb	sy
 8000f64:	2200      	movs	r2, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	f001 fe74 	bl	8002c54 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000f6c:	2000047c 	.word	0x2000047c

08000f70 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000f70:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000f72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000f76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000f7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000f7e:	4904      	ldr	r1, [pc, #16]	; (8000f90 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000f80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000f82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000f84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000f86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000f8a:	4902      	ldr	r1, [pc, #8]	; (8000f94 <_isr_wrapper+0x24>)
	bx r1
 8000f8c:	4708      	bx	r1
 8000f8e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000f90:	08003924 	.word	0x08003924
	ldr r1, =z_arm_int_exit
 8000f94:	08000f99 	.word	0x08000f99

08000f98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000f9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000f9c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000f9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000fa0:	d003      	beq.n	8000faa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000fa2:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000fa8:	600a      	str	r2, [r1, #0]

08000faa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000faa:	4770      	bx	lr
	ldr r3, =_kernel
 8000fac:	2000047c 	.word	0x2000047c
	ldr r1, =_SCS_ICSR
 8000fb0:	e000ed04 	.word	0xe000ed04

08000fb4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <mem_manage_fault+0x78>)
{
 8000fb8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fc0:	0792      	lsls	r2, r2, #30
{
 8000fc2:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000fc4:	d522      	bpl.n	800100c <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8000fc6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fca:	0614      	lsls	r4, r2, #24
 8000fcc:	d51e      	bpl.n	800100c <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8000fce:	b119      	cbz	r1, 8000fd8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fde:	4c13      	ldr	r4, [pc, #76]	; (800102c <mem_manage_fault+0x78>)
 8000fe0:	f012 0f10 	tst.w	r2, #16
 8000fe4:	d115      	bne.n	8001012 <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000fe8:	0799      	lsls	r1, r3, #30
 8000fea:	d412      	bmi.n	8001012 <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8000fec:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000ff2:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8000ff4:	bf42      	ittt	mi
 8000ff6:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8000ff8:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 8000ffc:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000ffe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001000:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001004:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8001006:	2300      	movs	r3, #0
 8001008:	702b      	strb	r3, [r5, #0]

	return reason;
}
 800100a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 800100c:	f06f 0015 	mvn.w	r0, #21
 8001010:	e7e2      	b.n	8000fd8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001012:	6863      	ldr	r3, [r4, #4]
 8001014:	051a      	lsls	r2, r3, #20
 8001016:	d5e9      	bpl.n	8000fec <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001018:	4631      	mov	r1, r6
 800101a:	f7ff ff7b 	bl	8000f14 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800101e:	2800      	cmp	r0, #0
 8001020:	d0e4      	beq.n	8000fec <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001022:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001026:	2002      	movs	r0, #2
 8001028:	e7e1      	b.n	8000fee <mem_manage_fault+0x3a>
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <bus_fault.constprop.0+0x38>)
 8001032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001038:	0592      	lsls	r2, r2, #22
 800103a:	d508      	bpl.n	800104e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800103c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001040:	0412      	lsls	r2, r2, #16
 8001042:	d504      	bpl.n	800104e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001044:	b118      	cbz	r0, 800104e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800104e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001052:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001056:	bf58      	it	pl
 8001058:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800105a:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 800105c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800105e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001062:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001064:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800106c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <z_arm_fault+0x12c>)
 8001070:	685b      	ldr	r3, [r3, #4]
{
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800107a:	2600      	movs	r6, #0
 800107c:	f386 8811 	msr	BASEPRI, r6
 8001080:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001084:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001088:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800108c:	d111      	bne.n	80010b2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800108e:	f002 000c 	and.w	r0, r2, #12
 8001092:	2808      	cmp	r0, #8
 8001094:	d00d      	beq.n	80010b2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001096:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001098:	bf4c      	ite	mi
 800109a:	460d      	movmi	r5, r1
			*nested_exc = true;
 800109c:	2601      	movpl	r6, #1
	*recoverable = false;
 800109e:	2200      	movs	r2, #0
	switch (fault) {
 80010a0:	3b03      	subs	r3, #3
	*recoverable = false;
 80010a2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d84d      	bhi.n	8001146 <z_arm_fault+0xda>
 80010aa:	e8df f003 	tbb	[pc, r3]
 80010ae:	6504      	.short	0x6504
 80010b0:	6d69      	.short	0x6d69
		return NULL;
 80010b2:	4635      	mov	r5, r6
 80010b4:	e7f3      	b.n	800109e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <z_arm_fault+0x12c>)
 80010b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ba:	0791      	lsls	r1, r2, #30
 80010bc:	d443      	bmi.n	8001146 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80010be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	db40      	blt.n	8001146 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80010c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c6:	0052      	lsls	r2, r2, #1
 80010c8:	d53d      	bpl.n	8001146 <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80010ca:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80010cc:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80010ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80010dc:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 80010de:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 80010e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010ec:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80010f0:	f64d 7202 	movw	r2, #57090	; 0xdf02
 80010f4:	4291      	cmp	r1, r2
 80010f6:	d009      	beq.n	800110c <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 80010f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	b142      	cbz	r2, 8001110 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
 80010fe:	f10d 0207 	add.w	r2, sp, #7
 8001102:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001104:	4628      	mov	r0, r5
 8001106:	f7ff ff55 	bl	8000fb4 <mem_manage_fault>
 800110a:	e00a      	b.n	8001122 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
 800110c:	682c      	ldr	r4, [r5, #0]
 800110e:	e01b      	b.n	8001148 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001112:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8001116:	d006      	beq.n	8001126 <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
 8001118:	f10d 0107 	add.w	r1, sp, #7
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ff87 	bl	8001030 <bus_fault.constprop.0>
 8001122:	4604      	mov	r4, r0
 8001124:	e010      	b.n	8001148 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001128:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800112c:	d30b      	bcc.n	8001146 <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800112e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001140:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
 8001146:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800114c:	b993      	cbnz	r3, 8001174 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800114e:	2220      	movs	r2, #32
 8001150:	4629      	mov	r1, r5
 8001152:	a802      	add	r0, sp, #8
 8001154:	f001 fe1d 	bl	8002d92 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800115a:	b1be      	cbz	r6, 800118c <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800115c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001160:	b922      	cbnz	r2, 800116c <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001162:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001166:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800116a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800116c:	a902      	add	r1, sp, #8
 800116e:	4620      	mov	r0, r4
 8001170:	f001 fdda 	bl	8002d28 <z_arm_fatal_error>
}
 8001174:	b00a      	add	sp, #40	; 0x28
 8001176:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8001178:	f10d 0207 	add.w	r2, sp, #7
 800117c:	2100      	movs	r1, #0
 800117e:	e7c1      	b.n	8001104 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
 8001180:	f10d 0107 	add.w	r1, sp, #7
 8001184:	2000      	movs	r0, #0
 8001186:	e7ca      	b.n	800111e <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <z_arm_fault+0x12c>)
 800118a:	e7d0      	b.n	800112e <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800118c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	e7e9      	b.n	800116a <z_arm_fault+0xfe>
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800119c:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <z_arm_fault_init+0xc>)
 800119e:	6953      	ldr	r3, [r2, #20]
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80011ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80011b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80011b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80011b6:	4672      	mov	r2, lr
	bl z_arm_fault
 80011b8:	f7ff ff58 	bl	800106c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80011bc:	bd01      	pop	{r0, pc}
 80011be:	bf00      	nop

080011c0 <z_arm_interrupt_init>:
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	2110      	movs	r1, #16
 80011c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80011c8:	3301      	adds	r3, #1
 80011ca:	2b56      	cmp	r3, #86	; 0x56
 80011cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80011d0:	d1f9      	bne.n	80011c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80011d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80011da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80011e0:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 80011e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80011e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80011ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80011ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80011f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80011f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80011f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80011fa:	f7ff fdf3 	bl	8000de4 <z_arm_prep_c>
 80011fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001200:	20000d40 	.word	0x20000d40

08001204 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <z_impl_k_thread_abort+0x24>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4283      	cmp	r3, r0
 800120a:	d10b      	bne.n	8001224 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800120c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001210:	b143      	cbz	r3, 8001224 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <z_impl_k_thread_abort+0x28>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800121a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 800121c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8001224:	f001 bb2e 	b.w	8002884 <z_thread_abort>
 8001228:	2000047c 	.word	0x2000047c
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <z_arm_configure_static_mpu_regions+0xc>)
 8001232:	4a03      	ldr	r2, [pc, #12]	; (8001240 <z_arm_configure_static_mpu_regions+0x10>)
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <z_arm_configure_static_mpu_regions+0x14>)
 8001236:	2101      	movs	r1, #1
 8001238:	f000 b872 	b.w	8001320 <arm_core_mpu_configure_static_mpu_regions>
 800123c:	20020000 	.word	0x20020000
 8001240:	20000000 	.word	0x20000000
 8001244:	08003c70 	.word	0x08003c70

08001248 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001248:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
 800124e:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8001250:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800125a:	4618      	mov	r0, r3
 800125c:	2101      	movs	r1, #1
 800125e:	f000 b869 	b.w	8001334 <arm_core_mpu_configure_dynamic_mpu_regions>
 8001262:	bf00      	nop
 8001264:	20000328 	.word	0x20000328
 8001268:	150b0000 	.word	0x150b0000

0800126c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800126e:	4e20      	ldr	r6, [pc, #128]	; (80012f0 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001270:	2500      	movs	r5, #0
 8001272:	428d      	cmp	r5, r1
 8001274:	da39      	bge.n	80012ea <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
 8001276:	6844      	ldr	r4, [r0, #4]
 8001278:	b374      	cbz	r4, 80012d8 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800127a:	b153      	cbz	r3, 8001292 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 800127c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001280:	ea14 0f0c 	tst.w	r4, ip
 8001284:	d12f      	bne.n	80012e6 <mpu_configure_regions+0x7a>
		&&
 8001286:	2c1f      	cmp	r4, #31
 8001288:	d92d      	bls.n	80012e6 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
 800128a:	6807      	ldr	r7, [r0, #0]
		&&
 800128c:	ea1c 0f07 	tst.w	ip, r7
 8001290:	d129      	bne.n	80012e6 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001292:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001294:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001296:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800129a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 800129e:	d91e      	bls.n	80012de <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
 80012a0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80012a4:	d81d      	bhi.n	80012e2 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80012a6:	3c01      	subs	r4, #1
 80012a8:	fab4 f484 	clz	r4, r4
 80012ac:	f1c4 041f 	rsb	r4, r4, #31
 80012b0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80012b2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80012b6:	ea4c 0c04 	orr.w	ip, ip, r4
 80012ba:	d814      	bhi.n	80012e6 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012bc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 80012c0:	4314      	orrs	r4, r2
 80012c2:	f044 0410 	orr.w	r4, r4, #16
 80012c6:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012ca:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80012ce:	f04c 0401 	orr.w	r4, ip, #1
 80012d2:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 80012d6:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 80012d8:	3501      	adds	r5, #1
 80012da:	300c      	adds	r0, #12
 80012dc:	e7c9      	b.n	8001272 <mpu_configure_regions+0x6>
		return REGION_32B;
 80012de:	2408      	movs	r4, #8
 80012e0:	e7e7      	b.n	80012b2 <mpu_configure_regions+0x46>
		return REGION_4G;
 80012e2:	243e      	movs	r4, #62	; 0x3e
 80012e4:	e7e5      	b.n	80012b2 <mpu_configure_regions+0x46>
			return -EINVAL;
 80012e6:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
 80012ea:	4610      	mov	r0, r2
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <arm_core_mpu_enable+0x14>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80012fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800130c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <arm_core_mpu_disable+0x10>)
 8001312:	2200      	movs	r2, #0
 8001314:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001320:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001322:	4c03      	ldr	r4, [pc, #12]	; (8001330 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001324:	2301      	movs	r3, #1
 8001326:	7822      	ldrb	r2, [r4, #0]
 8001328:	f7ff ffa0 	bl	800126c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800132c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800132e:	bd10      	pop	{r4, pc}
 8001330:	200004b0 	.word	0x200004b0

08001334 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8001334:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8001338:	2300      	movs	r3, #0
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	f7ff ff96 	bl	800126c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001340:	f110 0f16 	cmn.w	r0, #22
 8001344:	d002      	beq.n	800134c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001348:	2807      	cmp	r0, #7
 800134a:	dd00      	ble.n	800134e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800134c:	bd08      	pop	{r3, pc}
 800134e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001352:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001356:	3001      	adds	r0, #1
 8001358:	e7f6      	b.n	8001348 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800135a:	bf00      	nop
 800135c:	200004b0 	.word	0x200004b0
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001364:	4914      	ldr	r1, [pc, #80]	; (80013b8 <z_arm_mpu_init+0x54>)
 8001366:	6808      	ldr	r0, [r1, #0]
 8001368:	2808      	cmp	r0, #8
{
 800136a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800136c:	d821      	bhi.n	80013b2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800136e:	f7ff ffcd 	bl	800130c <arm_core_mpu_disable>
 8001372:	4c12      	ldr	r4, [pc, #72]	; (80013bc <z_arm_mpu_init+0x58>)
 8001374:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001376:	2200      	movs	r2, #0
 8001378:	4290      	cmp	r0, r2
 800137a:	f101 010c 	add.w	r1, r1, #12
 800137e:	d105      	bne.n	800138c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <z_arm_mpu_init+0x5c>)
 8001382:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001384:	f7ff ffb6 	bl	80012f4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8001388:	2000      	movs	r0, #0
}
 800138a:	bd10      	pop	{r4, pc}
 800138c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001390:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001394:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001398:	4313      	orrs	r3, r2
 800139a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800139e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80013a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80013ae:	3201      	adds	r2, #1
 80013b0:	e7e2      	b.n	8001378 <z_arm_mpu_init+0x14>
		return -1;
 80013b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b6:	e7e8      	b.n	800138a <z_arm_mpu_init+0x26>
 80013b8:	08003c7c 	.word	0x08003c7c
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	200004b0 	.word	0x200004b0

080013c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <__stdout_hook_install+0x8>)
 80013c6:	6018      	str	r0, [r3, #0]
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000004 	.word	0x20000004

080013d0 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80013d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80013d4:	4f0d      	ldr	r7, [pc, #52]	; (800140c <__stm32_exti_isr.isra.0+0x3c>)
 80013d6:	4604      	mov	r4, r0
 80013d8:	460e      	mov	r6, r1
 80013da:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80013dc:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80013e0:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80013e4:	42b4      	cmp	r4, r6
 80013e6:	db01      	blt.n	80013ec <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 80013e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ec:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80013ee:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80013f2:	ea33 0202 	bics.w	r2, r3, r2
 80013f6:	d107      	bne.n	8001408 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80013f8:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80013fa:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80013fe:	b11b      	cbz	r3, 8001408 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001400:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001404:	4620      	mov	r0, r4
 8001406:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8001408:	3401      	adds	r4, #1
 800140a:	e7eb      	b.n	80013e4 <__stm32_exti_isr.isra.0+0x14>
 800140c:	40013c00 	.word	0x40013c00

08001410 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001412:	2301      	movs	r3, #1
 8001414:	6811      	ldr	r1, [r2, #0]
 8001416:	4083      	lsls	r3, r0
 8001418:	430b      	orrs	r3, r1
 800141a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <stm32_exti_enable+0x18>)
 800141e:	5618      	ldrsb	r0, [r3, r0]
 8001420:	f7ff bcb6 	b.w	8000d90 <arch_irq_enable>
 8001424:	40013c00 	.word	0x40013c00
 8001428:	08003ef5 	.word	0x08003ef5

0800142c <stm32_exti_disable>:
	if (line < 32) {
 800142c:	281f      	cmp	r0, #31
 800142e:	dc06      	bgt.n	800143e <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001432:	2201      	movs	r2, #1
 8001434:	680b      	ldr	r3, [r1, #0]
 8001436:	4082      	lsls	r2, r0
 8001438:	ea23 0302 	bic.w	r3, r3, r2
 800143c:	600b      	str	r3, [r1, #0]
}
 800143e:	4770      	bx	lr
 8001440:	40013c00 	.word	0x40013c00

08001444 <stm32_exti_trigger>:
	switch (trigger) {
 8001444:	2903      	cmp	r1, #3
 8001446:	d82a      	bhi.n	800149e <stm32_exti_trigger+0x5a>
 8001448:	e8df f001 	tbb	[pc, r1]
 800144c:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8001452:	2201      	movs	r2, #1
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	4082      	lsls	r2, r0
 8001458:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 800145c:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	ea21 0202 	bic.w	r2, r1, r2
 8001464:	60da      	str	r2, [r3, #12]
}
 8001466:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800146a:	2201      	movs	r2, #1
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	4082      	lsls	r2, r0
 8001470:	4311      	orrs	r1, r2
 8001472:	e7f3      	b.n	800145c <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8001476:	2201      	movs	r2, #1
 8001478:	68d9      	ldr	r1, [r3, #12]
 800147a:	4082      	lsls	r2, r0
 800147c:	4311      	orrs	r1, r2
 800147e:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001480:	6899      	ldr	r1, [r3, #8]
 8001482:	ea21 0202 	bic.w	r2, r1, r2
 8001486:	609a      	str	r2, [r3, #8]
}
 8001488:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800148a:	2301      	movs	r3, #1
 800148c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <stm32_exti_trigger+0x5c>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	4302      	orrs	r2, r0
 8001496:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4310      	orrs	r0, r2
 800149c:	60d8      	str	r0, [r3, #12]
}
 800149e:	4770      	bx	lr
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80014a4:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <stm32_exti_set_callback+0x20>)
{
 80014a8:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80014aa:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80014ae:	b928      	cbnz	r0, 80014bc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80014b0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80014b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80014b8:	605a      	str	r2, [r3, #4]

	return 0;
}
 80014ba:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80014bc:	f06f 000f 	mvn.w	r0, #15
 80014c0:	e7fb      	b.n	80014ba <stm32_exti_set_callback+0x16>
 80014c2:	bf00      	nop
 80014c4:	20000334 	.word	0x20000334

080014c8 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <stm32_exti_unset_callback+0x10>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80014d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80014d4:	605a      	str	r2, [r3, #4]
}
 80014d6:	4770      	bx	lr
 80014d8:	20000334 	.word	0x20000334

080014dc <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80014dc:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <stm32_clock_control_get_subsys_rate+0x84>)
 80014e0:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80014e2:	680b      	ldr	r3, [r1, #0]
 80014e4:	2b44      	cmp	r3, #68	; 0x44
{
 80014e6:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80014e8:	d828      	bhi.n	800153c <stm32_clock_control_get_subsys_rate+0x60>
 80014ea:	2b2f      	cmp	r3, #47	; 0x2f
 80014ec:	d805      	bhi.n	80014fa <stm32_clock_control_get_subsys_rate+0x1e>
 80014ee:	3b01      	subs	r3, #1
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d90d      	bls.n	8001510 <stm32_clock_control_get_subsys_rate+0x34>
 80014f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80014f8:	e01f      	b.n	800153a <stm32_clock_control_get_subsys_rate+0x5e>
 80014fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80014fe:	2201      	movs	r2, #1
 8001500:	408a      	lsls	r2, r1
 8001502:	4918      	ldr	r1, [pc, #96]	; (8001564 <stm32_clock_control_get_subsys_rate+0x88>)
 8001504:	420a      	tst	r2, r1
 8001506:	d116      	bne.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	d1f3      	bne.n	80014f4 <stm32_clock_control_get_subsys_rate+0x18>
	return clock / prescaler;
 800150c:	0840      	lsrs	r0, r0, #1
	case STM32_CLOCK_BUS_APB1:
#if defined(STM32_CLOCK_BUS_APB1_2)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
		break;
 800150e:	e012      	b.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
	switch (pclken->bus) {
 8001510:	2b05      	cmp	r3, #5
 8001512:	d8ef      	bhi.n	80014f4 <stm32_clock_control_get_subsys_rate+0x18>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <stm32_clock_control_get_subsys_rate+0x40>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001543 	.word	0x08001543
 8001520:	0800154f 	.word	0x0800154f
 8001524:	080014f5 	.word	0x080014f5
 8001528:	08001535 	.word	0x08001535
 800152c:	0800155b 	.word	0x0800155b
 8001530:	08001537 	.word	0x08001537
 8001534:	2000      	movs	r0, #0
		*rate = STM32_LSE_FREQ;
		break;
#endif
#if defined(STM32_SRC_LSI)
	case STM32_SRC_LSI:
		*rate = STM32_LSI_FREQ;
 8001536:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8001538:	2000      	movs	r0, #0
}
 800153a:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 800153c:	2ba8      	cmp	r3, #168	; 0xa8
 800153e:	d0fa      	beq.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
 8001540:	e7d8      	b.n	80014f4 <stm32_clock_control_get_subsys_rate+0x18>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8001542:	f000 f897 	bl	8001674 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	4358      	muls	r0, r3
 800154a:	08c0      	lsrs	r0, r0, #3
		break;
 800154c:	e7f3      	b.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800154e:	f000 f891 	bl	8001674 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8001552:	2360      	movs	r3, #96	; 0x60
 8001554:	4358      	muls	r0, r3
 8001556:	0900      	lsrs	r0, r0, #4
		break;
 8001558:	e7ed      	b.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
		break;
 800155a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800155e:	e7ea      	b.n	8001536 <stm32_clock_control_get_subsys_rate+0x5a>
 8001560:	2000003c 	.word	0x2000003c
 8001564:	00100111 	.word	0x00100111

08001568 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001568:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800156a:	4c3e      	ldr	r4, [pc, #248]	; (8001664 <stm32_clock_control_init+0xfc>)
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800156c:	f000 f898 	bl	80016a0 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001570:	f000 fc2e 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001574:	68a3      	ldr	r3, [r4, #8]
 8001576:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <stm32_clock_control_init+0x100>)
 8001578:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	fa20 f503 	lsr.w	r5, r0, r3

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001582:	483a      	ldr	r0, [pc, #232]	; (800166c <stm32_clock_control_init+0x104>)
 8001584:	4285      	cmp	r5, r0
 8001586:	d201      	bcs.n	800158c <stm32_clock_control_init+0x24>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001588:	f000 fc50 	bl	8001e2c <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <stm32_clock_control_init+0xfc>)
 800159e:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80015a0:	0396      	lsls	r6, r2, #14
 80015a2:	d5fc      	bpl.n	800159e <stm32_clock_control_init+0x36>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80015a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	675a      	str	r2, [r3, #116]	; 0x74
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80015ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while (LL_RCC_LSI_IsReady() != 1) {
 80015ae:	0794      	lsls	r4, r2, #30
 80015b0:	d5fc      	bpl.n	80015ac <stm32_clock_control_init+0x44>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80015b8:	2a08      	cmp	r2, #8
 80015ba:	d117      	bne.n	80015ec <stm32_clock_control_init+0x84>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015c2:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015c4:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80015c6:	0790      	lsls	r0, r2, #30
 80015c8:	d407      	bmi.n	80015da <stm32_clock_control_init+0x72>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f042 0201 	orr.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015d2:	4a24      	ldr	r2, [pc, #144]	; (8001664 <stm32_clock_control_init+0xfc>)
 80015d4:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80015d6:	0799      	lsls	r1, r3, #30
 80015d8:	d5fc      	bpl.n	80015d4 <stm32_clock_control_init+0x6c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <stm32_clock_control_init+0xfc>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	f022 0203 	bic.w	r2, r2, #3
 80015e2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015e4:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80015e6:	f012 0f0c 	tst.w	r2, #12
 80015ea:	d1fb      	bne.n	80015e4 <stm32_clock_control_init+0x7c>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015ec:	4c1d      	ldr	r4, [pc, #116]	; (8001664 <stm32_clock_control_init+0xfc>)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f4:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015fc:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 80015fe:	6863      	ldr	r3, [r4, #4]
 8001600:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001608:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 800160a:	f000 f837 	bl	800167c <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001614:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001616:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8001618:	019b      	lsls	r3, r3, #6
 800161a:	d5fc      	bpl.n	8001616 <stm32_clock_control_init+0xae>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800161c:	68a3      	ldr	r3, [r4, #8]
 800161e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001622:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001624:	68a3      	ldr	r3, [r4, #8]
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001630:	4c0c      	ldr	r4, [pc, #48]	; (8001664 <stm32_clock_control_init+0xfc>)
 8001632:	68a3      	ldr	r3, [r4, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001638:	2b08      	cmp	r3, #8
 800163a:	d1fa      	bne.n	8001632 <stm32_clock_control_init+0xca>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800163c:	4e0b      	ldr	r6, [pc, #44]	; (800166c <stm32_clock_control_init+0x104>)
 800163e:	42b5      	cmp	r5, r6
 8001640:	d302      	bcc.n	8001648 <stm32_clock_control_init+0xe0>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001642:	4630      	mov	r0, r6
 8001644:	f000 fbf2 	bl	8001e2c <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <stm32_clock_control_init+0x108>)
 800164a:	601e      	str	r6, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800164c:	68a3      	ldr	r3, [r4, #8]
 800164e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001656:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001658:	68a3      	ldr	r3, [r4, #8]
 800165a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800165e:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001660:	2000      	movs	r0, #0
 8001662:	bd70      	pop	{r4, r5, r6, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	08003fb5 	.word	0x08003fb5
 800166c:	05b8d800 	.word	0x05b8d800
 8001670:	2000003c 	.word	0x2000003c

08001674 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 8001674:	4800      	ldr	r0, [pc, #0]	; (8001678 <get_pllsrc_frequency+0x4>)
 8001676:	4770      	bx	lr
 8001678:	007a1200 	.word	0x007a1200

0800167c <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <config_pll_sysclock+0x18>)
 800167e:	4906      	ldr	r1, [pc, #24]	; (8001698 <config_pll_sysclock+0x1c>)
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4011      	ands	r1, r2
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <config_pll_sysclock+0x20>)
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001690:	605a      	str	r2, [r3, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800
 8001698:	ffbf8000 	.word	0xffbf8000
 800169c:	00401804 	.word	0x00401804

080016a0 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <config_enable_default_clocks+0x1c>)
 80016a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80016ac:	b082      	sub	sp, #8
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016b4:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80016b6:	b002      	add	sp, #8
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80016c0:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <uart_console_init+0x20>)
 80016c4:	f001 ff3f 	bl	8003546 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 80016c8:	b138      	cbz	r0, 80016da <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <uart_console_init+0x24>)
 80016cc:	f7ff fe7a 	bl	80013c4 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <uart_console_init+0x24>)
 80016d2:	f7fe ff63 	bl	800059c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80016d6:	2000      	movs	r0, #0
}
 80016d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80016da:	f06f 0012 	mvn.w	r0, #18
 80016de:	e7fb      	b.n	80016d8 <uart_console_init+0x18>
 80016e0:	0800390c 	.word	0x0800390c
 80016e4:	080016e9 	.word	0x080016e9

080016e8 <console_out>:
	if ('\n' == c) {
 80016e8:	280a      	cmp	r0, #10
{
 80016ea:	b538      	push	{r3, r4, r5, lr}
 80016ec:	4d07      	ldr	r5, [pc, #28]	; (800170c <console_out+0x24>)
 80016ee:	4604      	mov	r4, r0
	if ('\n' == c) {
 80016f0:	d104      	bne.n	80016fc <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80016f2:	68ab      	ldr	r3, [r5, #8]
 80016f4:	210d      	movs	r1, #13
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4628      	mov	r0, r5
 80016fa:	4798      	blx	r3
 80016fc:	68ab      	ldr	r3, [r5, #8]
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <console_out+0x24>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	b2e1      	uxtb	r1, r4
 8001704:	4798      	blx	r3
}
 8001706:	4620      	mov	r0, r4
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	bf00      	nop
 800170c:	0800390c 	.word	0x0800390c

08001710 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001710:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001712:	6903      	ldr	r3, [r0, #16]
{
 8001714:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001716:	6058      	str	r0, [r3, #4]
 8001718:	4d08      	ldr	r5, [pc, #32]	; (800173c <gpio_stm32_init+0x2c>)
 800171a:	4628      	mov	r0, r5
 800171c:	f001 ff13 	bl	8003546 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001720:	b140      	cbz	r0, 8001734 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8001722:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001724:	68ab      	ldr	r3, [r5, #8]
 8001726:	310c      	adds	r1, #12
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4628      	mov	r0, r5
 800172c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800172e:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001732:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001734:	f06f 0012 	mvn.w	r0, #18
 8001738:	e7fb      	b.n	8001732 <gpio_stm32_init+0x22>
 800173a:	bf00      	nop
 800173c:	08003804 	.word	0x08003804

08001740 <gpio_stm32_pin_interrupt_configure>:
{
 8001740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001742:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001744:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8001748:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800174a:	6902      	ldr	r2, [r0, #16]
{
 800174c:	460c      	mov	r4, r1
 800174e:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001750:	d124      	bne.n	800179c <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001752:	f001 0203 	and.w	r2, r1, #3
 8001756:	3204      	adds	r2, #4
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	230f      	movs	r3, #15
 800175c:	4093      	lsls	r3, r2
 800175e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4933      	ldr	r1, [pc, #204]	; (8001834 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001766:	3202      	adds	r2, #2
 8001768:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800176c:	0c19      	lsrs	r1, r3, #16
 800176e:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800177c:	68b2      	ldr	r2, [r6, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d109      	bne.n	8001796 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fe52 	bl	800142c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe9d 	bl	80014c8 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800178e:	2100      	movs	r1, #0
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff fe57 	bl	8001444 <stm32_exti_trigger>
	int err = 0;
 8001796:	2000      	movs	r0, #0
}
 8001798:	b003      	add	sp, #12
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 800179c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80017a0:	d041      	beq.n	8001826 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80017a2:	4925      	ldr	r1, [pc, #148]	; (8001838 <gpio_stm32_pin_interrupt_configure+0xf8>)
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff fe7d 	bl	80014a4 <stm32_exti_set_callback>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d13e      	bne.n	800182c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80017ae:	4a23      	ldr	r2, [pc, #140]	; (800183c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 80017b0:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	466b      	mov	r3, sp
 80017b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80017bc:	4820      	ldr	r0, [pc, #128]	; (8001840 <gpio_stm32_pin_interrupt_configure+0x100>)
 80017be:	6882      	ldr	r2, [r0, #8]
 80017c0:	4619      	mov	r1, r3
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4790      	blx	r2
	if (ret != 0) {
 80017c6:	b9c0      	cbnz	r0, 80017fa <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80017c8:	f004 0303 	and.w	r3, r4, #3
 80017cc:	3304      	adds	r3, #4
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	409a      	lsls	r2, r3
 80017d4:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80017d8:	b2d3      	uxtb	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017e0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80017e4:	0c11      	lsrs	r1, r2, #16
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	4096      	lsls	r6, r2
 80017f6:	4306      	orrs	r6, r0
 80017f8:	609e      	str	r6, [r3, #8]
	switch (trig) {
 80017fa:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 80017fe:	d00e      	beq.n	800181e <gpio_stm32_pin_interrupt_configure+0xde>
 8001800:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001804:	d00d      	beq.n	8001822 <gpio_stm32_pin_interrupt_configure+0xe2>
 8001806:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800180a:	4259      	negs	r1, r3
 800180c:	4159      	adcs	r1, r3
 800180e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fe17 	bl	8001444 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fdfa 	bl	8001410 <stm32_exti_enable>
 800181c:	e7bb      	b.n	8001796 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 800181e:	2101      	movs	r1, #1
 8001820:	e7f6      	b.n	8001810 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8001822:	2103      	movs	r1, #3
 8001824:	e7f4      	b.n	8001810 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8001826:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800182a:	e7b5      	b.n	8001798 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 800182c:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001830:	e7b2      	b.n	8001798 <gpio_stm32_pin_interrupt_configure+0x58>
 8001832:	bf00      	nop
 8001834:	40013800 	.word	0x40013800
 8001838:	08003131 	.word	0x08003131
 800183c:	08003c68 	.word	0x08003c68
 8001840:	08003804 	.word	0x08003804

08001844 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 8001844:	6842      	ldr	r2, [r0, #4]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 8001846:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001848:	f101 0314 	add.w	r3, r1, #20
 800184c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001850:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001854:	f101 0c14 	add.w	ip, r1, #20
 8001858:	e84c 3000 	strex	r0, r3, [ip]
 800185c:	2800      	cmp	r0, #0
 800185e:	d1f3      	bne.n	8001848 <uart_stm32_irq_err_enable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <uart_stm32_irq_err_enable+0x58>)
 8001864:	428b      	cmp	r3, r1
 8001866:	d007      	beq.n	8001878 <uart_stm32_irq_err_enable+0x34>
 8001868:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800186c:	428b      	cmp	r3, r1
 800186e:	d003      	beq.n	8001878 <uart_stm32_irq_err_enable+0x34>
 8001870:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8001874:	428b      	cmp	r3, r1
 8001876:	d103      	bne.n	8001880 <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800187e:	6119      	str	r1, [r3, #16]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
 8001880:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001882:	f102 030c 	add.w	r3, r2, #12
 8001886:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188e:	f102 000c 	add.w	r0, r2, #12
 8001892:	e840 3100 	strex	r1, r3, [r0]
 8001896:	2900      	cmp	r1, #0
 8001898:	d1f3      	bne.n	8001882 <uart_stm32_irq_err_enable+0x3e>
}
 800189a:	4770      	bx	lr
 800189c:	40011000 	.word	0x40011000

080018a0 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 80018a0:	6842      	ldr	r2, [r0, #4]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 80018a2:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a4:	f101 0314 	add.w	r3, r1, #20
 80018a8:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b0:	f101 0c14 	add.w	ip, r1, #20
 80018b4:	e84c 3000 	strex	r0, r3, [ip]
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d1f3      	bne.n	80018a4 <uart_stm32_irq_err_disable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <uart_stm32_irq_err_disable+0x58>)
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d007      	beq.n	80018d4 <uart_stm32_irq_err_disable+0x34>
 80018c4:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d003      	beq.n	80018d4 <uart_stm32_irq_err_disable+0x34>
 80018cc:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 80018d0:	428b      	cmp	r3, r1
 80018d2:	d103      	bne.n	80018dc <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80018da:	6119      	str	r1, [r3, #16]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
 80018dc:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018de:	f102 030c 	add.w	r3, r2, #12
 80018e2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80018e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ea:	f102 000c 	add.w	r0, r2, #12
 80018ee:	e840 3100 	strex	r1, r3, [r0]
 80018f2:	2900      	cmp	r1, #0
 80018f4:	d1f3      	bne.n	80018de <uart_stm32_irq_err_disable+0x3e>
}
 80018f6:	4770      	bx	lr
 80018f8:	40011000 	.word	0x40011000

080018fc <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80018fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 80018fe:	6907      	ldr	r7, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8001900:	6844      	ldr	r4, [r0, #4]
{
 8001902:	4606      	mov	r6, r0
	data->clock = clk;
 8001904:	483a      	ldr	r0, [pc, #232]	; (80019f0 <uart_stm32_init+0xf4>)
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	f001 fe1d 	bl	8003546 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 800190c:	b920      	cbnz	r0, 8001918 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 800190e:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001912:	4628      	mov	r0, r5
 8001914:	b003      	add	sp, #12
 8001916:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	6861      	ldr	r1, [r4, #4]
 800191c:	6883      	ldr	r3, [r0, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4798      	blx	r3
	if (err != 0) {
 8001922:	4605      	mov	r5, r0
 8001924:	2800      	cmp	r0, #0
 8001926:	d1f4      	bne.n	8001912 <uart_stm32_init+0x16>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001928:	4601      	mov	r1, r0
 800192a:	aa01      	add	r2, sp, #4
 800192c:	69a0      	ldr	r0, [r4, #24]
 800192e:	f001 fdbc 	bl	80034aa <pinctrl_lookup_state>
	if (ret < 0) {
 8001932:	2800      	cmp	r0, #0
 8001934:	da01      	bge.n	800193a <uart_stm32_init+0x3e>
 8001936:	4605      	mov	r5, r0
 8001938:	e7eb      	b.n	8001912 <uart_stm32_init+0x16>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800193a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800193c:	462a      	mov	r2, r5
 800193e:	7919      	ldrb	r1, [r3, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	f000 fa03 	bl	8001d4c <pinctrl_configure_pins>
	if (err < 0) {
 8001946:	2800      	cmp	r0, #0
 8001948:	dbf5      	blt.n	8001936 <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 800194a:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800194c:	68d3      	ldr	r3, [r2, #12]
 800194e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001952:	60d3      	str	r3, [r2, #12]
	if (!device_is_ready(data->reset.dev)) {
 8001954:	68b8      	ldr	r0, [r7, #8]
 8001956:	f001 fdf6 	bl	8003546 <z_device_is_ready>
 800195a:	2800      	cmp	r0, #0
 800195c:	d0d7      	beq.n	800190e <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 800195e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001962:	6883      	ldr	r3, [r0, #8]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	b103      	cbz	r3, 800196a <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 8001968:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 800196a:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800196c:	f101 030c 	add.w	r3, r1, #12
 8001970:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001974:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001978:	f101 000c 	add.w	r0, r1, #12
 800197c:	e840 3200 	strex	r2, r3, [r0]
 8001980:	2a00      	cmp	r2, #0
 8001982:	d1f3      	bne.n	800196c <uart_stm32_init+0x70>
	if (config->parity == 2) {
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d02d      	beq.n	80019e6 <uart_stm32_init+0xea>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800198a:	2b01      	cmp	r3, #1
 800198c:	bf12      	itee	ne
 800198e:	2000      	movne	r0, #0
 8001990:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8001994:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8001998:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800199a:	68cb      	ldr	r3, [r1, #12]
 800199c:	4310      	orrs	r0, r2
 800199e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019a2:	4303      	orrs	r3, r0
 80019a4:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80019a6:	690b      	ldr	r3, [r1, #16]
 80019a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ac:	610b      	str	r3, [r1, #16]
	if (config->hw_flow_control) {
 80019ae:	7b23      	ldrb	r3, [r4, #12]
 80019b0:	b12b      	cbz	r3, 80019be <uart_stm32_init+0xc2>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80019b2:	6873      	ldr	r3, [r6, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019b6:	6953      	ldr	r3, [r2, #20]
 80019b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019bc:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4630      	mov	r0, r6
 80019c2:	f001 fd02 	bl	80033ca <uart_stm32_set_baudrate>
	if (config->single_wire) {
 80019c6:	7d23      	ldrb	r3, [r4, #20]
 80019c8:	b123      	cbz	r3, 80019d4 <uart_stm32_init+0xd8>
		LL_USART_EnableHalfDuplex(config->usart);
 80019ca:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80019cc:	6953      	ldr	r3, [r2, #20]
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6153      	str	r3, [r2, #20]
	LL_USART_Enable(config->usart);
 80019d4:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019d6:	68d3      	ldr	r3, [r2, #12]
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019dc:	60d3      	str	r3, [r2, #12]
	config->irq_config_func(dev);
 80019de:	69e3      	ldr	r3, [r4, #28]
 80019e0:	4630      	mov	r0, r6
 80019e2:	4798      	blx	r3
	return 0;
 80019e4:	e795      	b.n	8001912 <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80019e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	e7d3      	b.n	8001998 <uart_stm32_init+0x9c>
 80019f0:	08003804 	.word	0x08003804

080019f4 <uart_stm32_configure>:
{
 80019f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80019f8:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 80019fa:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80019fc:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 80019fe:	2b01      	cmp	r3, #1
{
 8001a00:	460c      	mov	r4, r1
	switch (parity) {
 8001a02:	d07d      	beq.n	8001b00 <uart_stm32_configure+0x10c>
 8001a04:	1e9a      	subs	r2, r3, #2
 8001a06:	4257      	negs	r7, r2
 8001a08:	4157      	adcs	r7, r2
 8001a0a:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a0c:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001a0e:	f894 8006 	ldrb.w	r8, [r4, #6]
 8001a12:	2a02      	cmp	r2, #2
 8001a14:	bf96      	itet	ls
 8001a16:	494c      	ldrls	r1, [pc, #304]	; (8001b48 <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a18:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8001a1c:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8001a20:	f1b8 0f04 	cmp.w	r8, #4
 8001a24:	d07b      	beq.n	8001b1e <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001a26:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d16b      	bne.n	8001b06 <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001a2e:	f1be 0f01 	cmp.w	lr, #1
 8001a32:	f022 0202 	bic.w	r2, r2, #2
 8001a36:	d07f      	beq.n	8001b38 <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d070      	beq.n	8001b1e <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001a3c:	f1b8 0f02 	cmp.w	r8, #2
 8001a40:	d96d      	bls.n	8001b1e <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8001a42:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001a44:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001a48:	f1be 0f00 	cmp.w	lr, #0
 8001a4c:	d00d      	beq.n	8001a6a <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <uart_stm32_configure+0x158>)
 8001a50:	4590      	cmp	r8, r2
 8001a52:	d007      	beq.n	8001a64 <uart_stm32_configure+0x70>
 8001a54:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001a58:	4590      	cmp	r8, r2
 8001a5a:	d003      	beq.n	8001a64 <uart_stm32_configure+0x70>
 8001a5c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001a60:	4590      	cmp	r8, r2
 8001a62:	d15c      	bne.n	8001b1e <uart_stm32_configure+0x12a>
 8001a64:	f1be 0f01 	cmp.w	lr, #1
 8001a68:	d159      	bne.n	8001b1e <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001a6a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8001a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a72:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 8001a76:	6842      	ldr	r2, [r0, #4]
 8001a78:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001a7c:	f8de 200c 	ldr.w	r2, [lr, #12]
 8001a80:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001a84:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001a86:	bf1f      	itttt	ne
 8001a88:	f8de 200c 	ldrne.w	r2, [lr, #12]
 8001a8c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001a90:	433a      	orrne	r2, r7
 8001a92:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 8001a96:	6842      	ldr	r2, [r0, #4]
 8001a98:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001aa0:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001aa2:	bf1f      	itttt	ne
 8001aa4:	693a      	ldrne	r2, [r7, #16]
 8001aa6:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8001aaa:	ea42 020c 	orrne.w	r2, r2, ip
 8001aae:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 8001ab0:	6842      	ldr	r2, [r0, #4]
 8001ab2:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001aba:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001abc:	bf1f      	itttt	ne
 8001abe:	68fa      	ldrne	r2, [r7, #12]
 8001ac0:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8001ac4:	4313      	orrne	r3, r2
 8001ac6:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8001ac8:	6843      	ldr	r3, [r0, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001acc:	6953      	ldr	r3, [r2, #20]
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001ad2:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ad4:	bf1f      	itttt	ne
 8001ad6:	6953      	ldrne	r3, [r2, #20]
 8001ad8:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001adc:	430b      	orrne	r3, r1
 8001ade:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 8001ae0:	6821      	ldr	r1, [r4, #0]
 8001ae2:	6833      	ldr	r3, [r6, #0]
 8001ae4:	4299      	cmp	r1, r3
 8001ae6:	d003      	beq.n	8001af0 <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001ae8:	f001 fc6f 	bl	80033ca <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001af0:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001af2:	68d3      	ldr	r3, [r2, #12]
 8001af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af8:	60d3      	str	r3, [r2, #12]
	return 0;
 8001afa:	2000      	movs	r0, #0
};
 8001afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8001b00:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8001b04:	e782      	b.n	8001a0c <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001b06:	3b03      	subs	r3, #3
 8001b08:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001b0c:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001b0e:	d109      	bne.n	8001b24 <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d904      	bls.n	8001b1e <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8001b14:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001b18:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8001b1c:	d106      	bne.n	8001b2c <uart_stm32_configure+0x138>
		return -ENOTSUP;
 8001b1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001b22:	e7eb      	b.n	8001afc <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d9fa      	bls.n	8001b1e <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8001b28:	2100      	movs	r1, #0
 8001b2a:	e7f5      	b.n	8001b18 <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001b2c:	f1b8 0f02 	cmp.w	r8, #2
 8001b30:	d9f5      	bls.n	8001b1e <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	e785      	b.n	8001a44 <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d0f0      	beq.n	8001b1e <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001b3c:	f1b8 0f02 	cmp.w	r8, #2
 8001b40:	d9ed      	bls.n	8001b1e <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8001b42:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b46:	e77d      	b.n	8001a44 <uart_stm32_configure+0x50>
 8001b48:	08003e50 	.word	0x08003e50
 8001b4c:	40011000 	.word	0x40011000

08001b50 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8001b50:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b56:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001b58:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001b5a:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <elapsed+0x34>)
 8001b5e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001b62:	4909      	ldr	r1, [pc, #36]	; (8001b88 <elapsed+0x38>)
 8001b64:	d101      	bne.n	8001b6a <elapsed+0x1a>
	    || (val1 < val2)) {
 8001b66:	4282      	cmp	r2, r0
 8001b68:	d206      	bcs.n	8001b78 <elapsed+0x28>
		overflow_cyc += last_load;
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	680c      	ldr	r4, [r1, #0]
 8001b6e:	4422      	add	r2, r4
 8001b70:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001b72:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b76:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	680a      	ldr	r2, [r1, #0]
 8001b7c:	4413      	add	r3, r2
}
 8001b7e:	1a18      	subs	r0, r3, r0
 8001b80:	bd10      	pop	{r4, pc}
 8001b82:	bf00      	nop
 8001b84:	2000046c 	.word	0x2000046c
 8001b88:	20000478 	.word	0x20000478

08001b8c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <sys_clock_driver_init+0x28>)
 8001b8e:	2210      	movs	r2, #16
 8001b90:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <sys_clock_driver_init+0x2c>)
 8001b96:	f242 527f 	movw	r2, #9599	; 0x257f
 8001b9a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <sys_clock_driver_init+0x30>)
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001ba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ba6:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001ba8:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	f042 0207 	orr.w	r2, r2, #7
 8001bb0:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	20000478 	.word	0x20000478
 8001bbc:	2000046c 	.word	0x2000046c

08001bc0 <sys_clock_isr>:
{
 8001bc0:	b508      	push	{r3, lr}
	elapsed();
 8001bc2:	f7ff ffc5 	bl	8001b50 <elapsed>
	cycle_count += overflow_cyc;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <sys_clock_isr+0x38>)
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <sys_clock_isr+0x3c>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	4408      	add	r0, r1
 8001bd0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <sys_clock_isr+0x40>)
 8001bd8:	6813      	ldr	r3, [r2, #0]
 8001bda:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001bde:	1ac0      	subs	r0, r0, r3
 8001be0:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001be4:	fb01 3300 	mla	r3, r1, r0, r3
 8001be8:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001bea:	f000 ff91 	bl	8002b10 <sys_clock_announce>
}
 8001bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001bf2:	f7ff b9d1 	b.w	8000f98 <z_arm_exc_exit>
 8001bf6:	bf00      	nop
 8001bf8:	2000046c 	.word	0x2000046c
 8001bfc:	20000474 	.word	0x20000474
 8001c00:	20000470 	.word	0x20000470

08001c04 <sys_clock_set_timeout>:
{
 8001c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c08:	4e31      	ldr	r6, [pc, #196]	; (8001cd0 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	d054      	beq.n	8001cb8 <sys_clock_set_timeout+0xb4>
 8001c0e:	1c42      	adds	r2, r0, #1
 8001c10:	d10a      	bne.n	8001c28 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001c12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c16:	6913      	ldr	r3, [r2, #16]
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001c1e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001c22:	6033      	str	r3, [r6, #0]
}
 8001c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8001c28:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001c2a:	2801      	cmp	r0, #1
 8001c2c:	dd4a      	ble.n	8001cc4 <sys_clock_set_timeout+0xc0>
 8001c2e:	f240 68d2 	movw	r8, #1746	; 0x6d2
 8001c32:	4540      	cmp	r0, r8
 8001c34:	dc01      	bgt.n	8001c3a <sys_clock_set_timeout+0x36>
 8001c36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8001c3a:	f04f 0310 	mov.w	r3, #16
 8001c3e:	f3ef 8411 	mrs	r4, BASEPRI
 8001c42:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c46:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001c4a:	f7ff ff81 	bl	8001b50 <elapsed>
	cycle_count += pending;
 8001c4e:	4f21      	ldr	r7, [pc, #132]	; (8001cd4 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001c50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001c54:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8001c56:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <sys_clock_set_timeout+0xd4>)
 8001c60:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <sys_clock_set_timeout+0xd8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001c66:	1ad1      	subs	r1, r2, r3
 8001c68:	d42f      	bmi.n	8001cca <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 8001c6a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
		delay += unannounced;
 8001c6e:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c72:	f501 5115 	add.w	r1, r1, #9536	; 0x2540
		delay -= unannounced;
 8001c76:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c78:	313f      	adds	r1, #63	; 0x3f
 8001c7a:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8001c7e:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8001c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c86:	d920      	bls.n	8001cca <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8001c88:	4915      	ldr	r1, [pc, #84]	; (8001ce0 <sys_clock_set_timeout+0xdc>)
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	bf28      	it	cs
 8001c8e:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8001c90:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8001c94:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8001c96:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8001ca0:	4584      	cmp	ip, r0
 8001ca2:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8001ca6:	bf38      	it	cc
 8001ca8:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8001caa:	441a      	add	r2, r3
 8001cac:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8001cae:	f384 8811 	msr	BASEPRI, r4
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	e7b5      	b.n	8001c24 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001cb8:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001cba:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001cbc:	d1b5      	bne.n	8001c2a <sys_clock_set_timeout+0x26>
 8001cbe:	f240 60d2 	movw	r0, #1746	; 0x6d2
 8001cc2:	e7b8      	b.n	8001c36 <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001cc4:	f04f 0800 	mov.w	r8, #0
 8001cc8:	e7b7      	b.n	8001c3a <sys_clock_set_timeout+0x36>
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	e7df      	b.n	8001c90 <sys_clock_set_timeout+0x8c>
 8001cd0:	20000478 	.word	0x20000478
 8001cd4:	20000474 	.word	0x20000474
 8001cd8:	2000046c 	.word	0x2000046c
 8001cdc:	20000470 	.word	0x20000470
 8001ce0:	00ffc300 	.word	0x00ffc300

08001ce4 <sys_clock_elapsed>:
{
 8001ce4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001ce6:	f04f 0310 	mov.w	r3, #16
 8001cea:	f3ef 8411 	mrs	r4, BASEPRI
 8001cee:	f383 8812 	msr	BASEPRI_MAX, r3
 8001cf2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001cf6:	f7ff ff2b 	bl	8001b50 <elapsed>
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <sys_clock_elapsed+0x34>)
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <sys_clock_elapsed+0x38>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	4403      	add	r3, r0
	__asm__ volatile(
 8001d06:	f384 8811 	msr	BASEPRI, r4
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001d12:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d16:	bd10      	pop	{r4, pc}
 8001d18:	20000474 	.word	0x20000474
 8001d1c:	20000470 	.word	0x20000470

08001d20 <sys_clock_cycle_get_32>:
{
 8001d20:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001d22:	f04f 0310 	mov.w	r3, #16
 8001d26:	f3ef 8411 	mrs	r4, BASEPRI
 8001d2a:	f383 8812 	msr	BASEPRI_MAX, r3
 8001d2e:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8001d32:	f7ff ff0d 	bl	8001b50 <elapsed>
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <sys_clock_cycle_get_32+0x28>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4418      	add	r0, r3
	__asm__ volatile(
 8001d3c:	f384 8811 	msr	BASEPRI, r4
 8001d40:	f3bf 8f6f 	isb	sy
}
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	bf00      	nop
 8001d48:	20000474 	.word	0x20000474

08001d4c <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001d50:	4f1e      	ldr	r7, [pc, #120]	; (8001dcc <pinctrl_configure_pins+0x80>)
 8001d52:	4604      	mov	r4, r0
 8001d54:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001d58:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001d5a:	42b4      	cmp	r4, r6
 8001d5c:	d101      	bne.n	8001d62 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e014      	b.n	8001d8c <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001d62:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001d64:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001d66:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001d6a:	d411      	bmi.n	8001d90 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001d6c:	6865      	ldr	r5, [r4, #4]
 8001d6e:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001d72:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001d76:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001d7a:	280a      	cmp	r0, #10
 8001d7c:	d823      	bhi.n	8001dc6 <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001d7e:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001d82:	f1b8 0f00 	cmp.w	r8, #0
 8001d86:	d10d      	bne.n	8001da4 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8001d88:	f06f 0012 	mvn.w	r0, #18
}
 8001d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001d90:	f1b9 0f10 	cmp.w	r9, #16
 8001d94:	d004      	beq.n	8001da0 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001d96:	f1b9 0f11 	cmp.w	r9, #17
 8001d9a:	d1ea      	bne.n	8001d72 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8001d9c:	6865      	ldr	r5, [r4, #4]
 8001d9e:	e7e8      	b.n	8001d72 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001da0:	2530      	movs	r5, #48	; 0x30
 8001da2:	e7e6      	b.n	8001d72 <pinctrl_configure_pins+0x26>
 8001da4:	4640      	mov	r0, r8
 8001da6:	f001 fbce 	bl	8003546 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d0ec      	beq.n	8001d88 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001dae:	464b      	mov	r3, r9
 8001db0:	462a      	mov	r2, r5
 8001db2:	f00a 010f 	and.w	r1, sl, #15
 8001db6:	4640      	mov	r0, r8
 8001db8:	f001 f9d1 	bl	800315e <gpio_stm32_configure>
		if (ret < 0) {
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f104 0408 	add.w	r4, r4, #8
 8001dc2:	daca      	bge.n	8001d5a <pinctrl_configure_pins+0xe>
 8001dc4:	e7e2      	b.n	8001d8c <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001dc6:	f06f 0015 	mvn.w	r0, #21
 8001dca:	e7df      	b.n	8001d8c <pinctrl_configure_pins+0x40>
 8001dcc:	08003df4 	.word	0x08003df4

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd2:	4913      	ldr	r1, [pc, #76]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x50>)
 8001dd4:	688b      	ldr	r3, [r1, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x48>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d11c      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	bf14      	ite	ne
 8001dee:	480d      	ldrne	r0, [pc, #52]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df0:	480d      	ldreq	r0, [pc, #52]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001df6:	bf18      	it	ne
 8001df8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dfa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	fba1 0100 	umull	r0, r1, r1, r0
 8001e02:	f7fe f9c9 	bl	8000198 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e12:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e16:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e1a:	e7fc      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001e1e:	e7fa      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	00f42400 	.word	0x00f42400

08001e2c <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d076      	beq.n	8001f1e <LL_SetFlashLatency+0xf2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <LL_SetFlashLatency+0xf8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001e38:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001e3c:	d120      	bne.n	8001e80 <LL_SetFlashLatency+0x54>
      {
        latency = LL_FLASH_LATENCY_4;
      }
#endif /* UTILS_SCALE1_LATENCY4_FREQ */
#if defined (UTILS_SCALE1_LATENCY3_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <LL_SetFlashLatency+0xfc>)
 8001e40:	4290      	cmp	r0, r2
 8001e42:	d815      	bhi.n	8001e70 <LL_SetFlashLatency+0x44>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /* UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE1_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e44:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <LL_SetFlashLatency+0x100>)
 8001e46:	4290      	cmp	r0, r2
 8001e48:	d907      	bls.n	8001e5a <LL_SetFlashLatency+0x2e>
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001e50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e54:	d15c      	bne.n	8001f10 <LL_SetFlashLatency+0xe4>
 8001e56:	2002      	movs	r0, #2
 8001e58:	e01f      	b.n	8001e9a <LL_SetFlashLatency+0x6e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e5a:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <LL_SetFlashLatency+0x104>)
 8001e5c:	4290      	cmp	r0, r2
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001e64:	d947      	bls.n	8001ef6 <LL_SetFlashLatency+0xca>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001e66:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e6a:	d14c      	bne.n	8001f06 <LL_SetFlashLatency+0xda>
          latency = LL_FLASH_LATENCY_1;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e014      	b.n	8001e9a <LL_SetFlashLatency+0x6e>
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001e76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e7a:	d13f      	bne.n	8001efc <LL_SetFlashLatency+0xd0>
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	e00c      	b.n	8001e9a <LL_SetFlashLatency+0x6e>
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001e86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e8a:	d122      	bne.n	8001ed2 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <LL_SetFlashLatency+0x100>)
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d83e      	bhi.n	8001f10 <LL_SetFlashLatency+0xe4>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <LL_SetFlashLatency+0x104>)
 8001e94:	4290      	cmp	r0, r2
 8001e96:	d92e      	bls.n	8001ef6 <LL_SetFlashLatency+0xca>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <LL_SetFlashLatency+0xf8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2801      	cmp	r0, #1
 8001ea0:	bf38      	it	cc
 8001ea2:	2001      	movcc	r0, #1
 8001ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eac:	d01f      	beq.n	8001eee <LL_SetFlashLatency+0xc2>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <LL_SetFlashLatency+0x108>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f023 0307 	bic.w	r3, r3, #7
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8001ec0:	4298      	cmp	r0, r3
 8001ec2:	bf1c      	itt	ne
 8001ec4:	6813      	ldrne	r3, [r2, #0]
 8001ec6:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8001eca:	1ac0      	subs	r0, r0, r3
 8001ecc:	bf18      	it	ne
 8001ece:	2001      	movne	r0, #1
 8001ed0:	4770      	bx	lr
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001edc:	d10c      	bne.n	8001ef8 <LL_SetFlashLatency+0xcc>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <LL_SetFlashLatency+0x100>)
 8001ee0:	4298      	cmp	r0, r3
 8001ee2:	d81a      	bhi.n	8001f1a <LL_SetFlashLatency+0xee>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <LL_SetFlashLatency+0x104>)
 8001ee6:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001ee8:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001eec:	d9df      	bls.n	8001eae <LL_SetFlashLatency+0x82>
 8001eee:	2801      	cmp	r0, #1
 8001ef0:	bf38      	it	cc
 8001ef2:	2001      	movcc	r0, #1
 8001ef4:	e7db      	b.n	8001eae <LL_SetFlashLatency+0x82>
 8001ef6:	681b      	ldr	r3, [r3, #0]
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7d8      	b.n	8001eae <LL_SetFlashLatency+0x82>
 8001efc:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001efe:	2003      	movs	r0, #3
 8001f00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f04:	e7d0      	b.n	8001ea8 <LL_SetFlashLatency+0x7c>
 8001f06:	681b      	ldr	r3, [r3, #0]
          latency = LL_FLASH_LATENCY_1;
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f0e:	e7cb      	b.n	8001ea8 <LL_SetFlashLatency+0x7c>
 8001f10:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001f12:	2002      	movs	r0, #2
 8001f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f18:	e7c6      	b.n	8001ea8 <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	e7c7      	b.n	8001eae <LL_SetFlashLatency+0x82>
    status = ERROR;
 8001f1e:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40007000 	.word	0x40007000
 8001f28:	055d4a80 	.word	0x055d4a80
 8001f2c:	03d09000 	.word	0x03d09000
 8001f30:	01c9c380 	.word	0x01c9c380
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <z_sys_init_run_level+0x40>)
{
 8001f3a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f3c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001f40:	3001      	adds	r0, #1
 8001f42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001f46:	42a6      	cmp	r6, r4
 8001f48:	d800      	bhi.n	8001f4c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001f4c:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001f50:	4628      	mov	r0, r5
 8001f52:	4798      	blx	r3
		if (dev != NULL) {
 8001f54:	b16d      	cbz	r5, 8001f72 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8001f56:	b138      	cbz	r0, 8001f68 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	bfb8      	it	lt
 8001f5c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001f5e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8001f60:	28ff      	cmp	r0, #255	; 0xff
 8001f62:	bfa8      	it	ge
 8001f64:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8001f66:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001f68:	68ea      	ldr	r2, [r5, #12]
 8001f6a:	7853      	ldrb	r3, [r2, #1]
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f72:	3408      	adds	r4, #8
 8001f74:	e7e7      	b.n	8001f46 <z_sys_init_run_level+0xe>
 8001f76:	bf00      	nop
 8001f78:	08003e38 	.word	0x08003e38

08001f7c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001f7c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <bg_thread_main+0x2c>)
 8001f80:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001f82:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8001f84:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001f86:	f7ff ffd7 	bl	8001f38 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001f8a:	f000 fe4d 	bl	8002c28 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7ff ffd2 	bl	8001f38 <z_sys_init_run_level>

	z_init_static_threads();
 8001f94:	f000 f942 	bl	800221c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8001f98:	f7fe fab2 	bl	8000500 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <bg_thread_main+0x30>)
 8001f9e:	7b13      	ldrb	r3, [r2, #12]
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001fa6:	bd08      	pop	{r3, pc}
 8001fa8:	200004b1 	.word	0x200004b1
 8001fac:	20000278 	.word	0x20000278

08001fb0 <z_bss_zero>:
{
 8001fb0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <z_bss_zero+0x10>)
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <z_bss_zero+0x14>)
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	1a12      	subs	r2, r2, r0
 8001fba:	f001 faf6 	bl	80035aa <z_early_memset>
}
 8001fbe:	bd08      	pop	{r3, pc}
 8001fc0:	20000080 	.word	0x20000080
 8001fc4:	200004b4 	.word	0x200004b4

08001fc8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8001fca:	4e17      	ldr	r6, [pc, #92]	; (8002028 <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001fcc:	4d17      	ldr	r5, [pc, #92]	; (800202c <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
 8001fce:	4918      	ldr	r1, [pc, #96]	; (8002030 <z_init_cpu+0x68>)
{
 8001fd0:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8001fd2:	23a8      	movs	r3, #168	; 0xa8
 8001fd4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <z_init_cpu+0x6c>)
 8001fda:	9305      	str	r3, [sp, #20]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	230f      	movs	r3, #15
 8001fe0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001fea:	2318      	movs	r3, #24
 8001fec:	fb03 5500 	mla	r5, r3, r0, r5
{
 8001ff0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8001ff2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001ff6:	fb00 1104 	mla	r1, r0, r4, r1
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <z_init_cpu+0x70>)
 8001ffc:	9500      	str	r5, [sp, #0]
 8001ffe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002002:	4630      	mov	r0, r6
 8002004:	f000 f89a 	bl	800213c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002008:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <z_init_cpu+0x74>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800200c:	60ee      	str	r6, [r5, #12]
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002014:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8002018:	fb04 3303 	mla	r3, r4, r3, r3
 800201c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 800201e:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 8002020:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8002022:	b006      	add	sp, #24
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	bf00      	nop
 8002028:	200001d0 	.word	0x200001d0
 800202c:	2000047c 	.word	0x2000047c
 8002030:	20001580 	.word	0x20001580
 8002034:	08003fc5 	.word	0x08003fc5
 8002038:	080035bb 	.word	0x080035bb
 800203c:	20000d40 	.word	0x20000d40

08002040 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8002040:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002042:	2000      	movs	r0, #0
{
 8002044:	b0b0      	sub	sp, #192	; 0xc0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002046:	f7ff ff77 	bl	8001f38 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <z_cstart+0xc0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800204c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002050:	4d2c      	ldr	r5, [pc, #176]	; (8002104 <z_cstart+0xc4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002052:	4f2d      	ldr	r7, [pc, #180]	; (8002108 <z_cstart+0xc8>)
 8002054:	696b      	ldr	r3, [r5, #20]
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	616b      	str	r3, [r5, #20]
 800205c:	2400      	movs	r4, #0
 800205e:	23f0      	movs	r3, #240	; 0xf0
 8002060:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8002064:	77ec      	strb	r4, [r5, #31]
 8002066:	762c      	strb	r4, [r5, #24]
 8002068:	766c      	strb	r4, [r5, #25]
 800206a:	76ac      	strb	r4, [r5, #26]
 800206c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002070:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002072:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002076:	626b      	str	r3, [r5, #36]	; 0x24
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002078:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800207c:	f7ff f88e 	bl	800119c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002080:	f7fe fe72 	bl	8000d68 <z_arm_cpu_idle_init>
 8002084:	62ae      	str	r6, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002086:	62ee      	str	r6, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002088:	f7ff f96c 	bl	8001364 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800208c:	f7ff f8d0 	bl	8001230 <z_arm_configure_static_mpu_regions>
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
 8002090:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002094:	f240 1301 	movw	r3, #257	; 0x101

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8002098:	4e1c      	ldr	r6, [pc, #112]	; (800210c <z_cstart+0xcc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 800209a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800209e:	ab06      	add	r3, sp, #24
 80020a0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80020a2:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
	dummy_thread->resource_pool = NULL;
 80020a6:	942c      	str	r4, [sp, #176]	; 0xb0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80020a8:	f001 fa4c 	bl	8003544 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ff43 	bl	8001f38 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 80020b2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 80020b4:	4d16      	ldr	r5, [pc, #88]	; (8002110 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 80020b6:	f7ff ff3f 	bl	8001f38 <z_sys_init_run_level>
	z_sched_init();
 80020ba:	f000 fb37 	bl	800272c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
 80020c0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80020c2:	9305      	str	r3, [sp, #20]
 80020c4:	2301      	movs	r3, #1
 80020c6:	4914      	ldr	r1, [pc, #80]	; (8002118 <z_cstart+0xd8>)
 80020c8:	9400      	str	r4, [sp, #0]
 80020ca:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	463b      	mov	r3, r7
 80020d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80020d8:	4628      	mov	r0, r5
 80020da:	f000 f82f 	bl	800213c <z_setup_new_thread>
 80020de:	7b6a      	ldrb	r2, [r5, #13]
 80020e0:	4606      	mov	r6, r0
 80020e2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 80020e6:	4628      	mov	r0, r5
 80020e8:	736a      	strb	r2, [r5, #13]
 80020ea:	f001 face 	bl	800368a <z_ready_thread>
	z_init_cpu(0);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ff6a 	bl	8001fc8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80020f4:	463a      	mov	r2, r7
 80020f6:	4631      	mov	r1, r6
 80020f8:	4628      	mov	r0, r5
 80020fa:	f7fe ff23 	bl	8000f44 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80020fe:	bf00      	nop
 8002100:	20001580 	.word	0x20001580
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	08001f7d 	.word	0x08001f7d
 800210c:	2000047c 	.word	0x2000047c
 8002110:	20000278 	.word	0x20000278
 8002114:	08003fca 	.word	0x08003fca
 8002118:	20001700 	.word	0x20001700

0800211c <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 800211c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 800211e:	4604      	mov	r4, r0
 8002120:	b908      	cbnz	r0, 8002126 <z_impl_k_thread_name_set+0xa>
		thread = _current;
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <z_impl_k_thread_name_set+0x1c>)
 8002124:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
 8002126:	221f      	movs	r2, #31
 8002128:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800212c:	f000 fe0d 	bl	8002d4a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 8002130:	2000      	movs	r0, #0
 8002132:	f884 0087 	strb.w	r0, [r4, #135]	; 0x87

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2000047c 	.word	0x2000047c

0800213c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800213c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002140:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002142:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002144:	2604      	movs	r6, #4
 8002146:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002148:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800214a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800214c:	1dd6      	adds	r6, r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800214e:	f100 0560 	add.w	r5, r0, #96	; 0x60

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002152:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8002156:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800215a:	e9c0 5518 	strd	r5, r5, [r0, #96]	; 0x60
	new_thread->stack_info.size = stack_buf_size;
 800215e:	e9c0 2623 	strd	r2, r6, [r0, #140]	; 0x8c
	thread_base->pended_on = NULL;
 8002162:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8002166:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002168:	e9c0 5508 	strd	r5, r5, [r0, #32]

	thread_base->sched_locked = 0U;
 800216c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800216e:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002172:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002176:	9202      	str	r2, [sp, #8]
 8002178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800217a:	9201      	str	r2, [sp, #4]
{
 800217c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800217e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
{
 8002180:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002182:	9200      	str	r2, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
 8002184:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002186:	4642      	mov	r2, r8
 8002188:	f7fe fea8 	bl	8000edc <arch_new_thread>
	new_thread->init_data = NULL;
 800218c:	65e5      	str	r5, [r4, #92]	; 0x5c
	if (name != NULL) {
 800218e:	b1a7      	cbz	r7, 80021ba <z_setup_new_thread+0x7e>
		strncpy(new_thread->name, name,
 8002190:	221f      	movs	r2, #31
 8002192:	4639      	mov	r1, r7
 8002194:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002198:	f000 fdd7 	bl	8002d4a <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800219c:	f884 5087 	strb.w	r5, [r4, #135]	; 0x87
		new_thread->base.cpu_mask = -1; /* allow all cpus */
 80021a0:	23ff      	movs	r3, #255	; 0xff
 80021a2:	7523      	strb	r3, [r4, #20]
	if (!_current) {
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <z_setup_new_thread+0x84>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	b10b      	cbz	r3, 80021ae <z_setup_new_thread+0x72>
	new_thread->resource_pool = _current->resource_pool;
 80021aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	return stack_ptr;
 80021ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
}
 80021b2:	4640      	mov	r0, r8
 80021b4:	b004      	add	sp, #16
 80021b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		new_thread->name[0] = '\0';
 80021ba:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
 80021be:	e7ef      	b.n	80021a0 <z_setup_new_thread+0x64>
 80021c0:	2000047c 	.word	0x2000047c

080021c4 <z_impl_k_thread_create>:
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80021c8:	2500      	movs	r5, #0
 80021ca:	9505      	str	r5, [sp, #20]
 80021cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80021ce:	9504      	str	r5, [sp, #16]
 80021d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80021d2:	9503      	str	r5, [sp, #12]
 80021d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80021d6:	9502      	str	r5, [sp, #8]
{
 80021d8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80021dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80021de:	9501      	str	r5, [sp, #4]
 80021e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021e2:	9500      	str	r5, [sp, #0]
{
 80021e4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80021e6:	f7ff ffa9 	bl	800213c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80021ea:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80021ee:	bf08      	it	eq
 80021f0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 80021f4:	d005      	beq.n	8002202 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80021f6:	ea56 0307 	orrs.w	r3, r6, r7
 80021fa:	d105      	bne.n	8002208 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 fa15 	bl	800262c <z_sched_start>
}
 8002202:	4620      	mov	r0, r4
 8002204:	b007      	add	sp, #28
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002208:	4903      	ldr	r1, [pc, #12]	; (8002218 <z_impl_k_thread_create+0x54>)
 800220a:	463a      	mov	r2, r7
 800220c:	4633      	mov	r3, r6
 800220e:	f104 0020 	add.w	r0, r4, #32
 8002212:	f000 fbff 	bl	8002a14 <z_add_timeout>
 8002216:	e7f4      	b.n	8002202 <z_impl_k_thread_create+0x3e>
 8002218:	080035f7 	.word	0x080035f7

0800221c <z_init_static_threads>:
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	4c22      	ldr	r4, [pc, #136]	; (80022a8 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002220:	4d22      	ldr	r5, [pc, #136]	; (80022ac <z_init_static_threads+0x90>)
{
 8002222:	b087      	sub	sp, #28
 8002224:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8002226:	42ae      	cmp	r6, r5
 8002228:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800222c:	d30b      	bcc.n	8002246 <z_init_static_threads+0x2a>
	k_sched_lock();
 800222e:	f000 fa4d 	bl	80026cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002232:	4c1d      	ldr	r4, [pc, #116]	; (80022a8 <z_init_static_threads+0x8c>)
 8002234:	4f1e      	ldr	r7, [pc, #120]	; (80022b0 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002236:	260a      	movs	r6, #10
 8002238:	42ac      	cmp	r4, r5
 800223a:	d320      	bcc.n	800227e <z_init_static_threads+0x62>
}
 800223c:	b007      	add	sp, #28
 800223e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002242:	f000 ba57 	b.w	80026f4 <k_sched_unlock>
		z_setup_new_thread(
 8002246:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800224a:	9305      	str	r3, [sp, #20]
 800224c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002250:	9304      	str	r3, [sp, #16]
 8002252:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002256:	9303      	str	r3, [sp, #12]
 8002258:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800226e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002272:	f7ff ff63 	bl	800213c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002276:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800227a:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
 800227c:	e7d2      	b.n	8002224 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800227e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002280:	1c53      	adds	r3, r2, #1
 8002282:	d009      	beq.n	8002298 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002284:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002288:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800228c:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002290:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002292:	d103      	bne.n	800229c <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002294:	f000 f9ca 	bl	800262c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002298:	3430      	adds	r4, #48	; 0x30
 800229a:	e7cd      	b.n	8002238 <z_init_static_threads+0x1c>
 800229c:	4639      	mov	r1, r7
 800229e:	3020      	adds	r0, #32
 80022a0:	f000 fbb8 	bl	8002a14 <z_add_timeout>
 80022a4:	e7f8      	b.n	8002298 <z_init_static_threads+0x7c>
 80022a6:	bf00      	nop
 80022a8:	08003bd4 	.word	0x08003bd4
 80022ac:	08003bd4 	.word	0x08003bd4
 80022b0:	080035f7 	.word	0x080035f7

080022b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4604      	mov	r4, r0
	__asm__ volatile(
 80022b8:	f04f 0310 	mov.w	r3, #16
 80022bc:	f3ef 8511 	mrs	r5, BASEPRI
 80022c0:	f383 8812 	msr	BASEPRI_MAX, r3
 80022c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80022c8:	f001 f9ef 	bl	80036aa <z_unpend_first_thread>

	if (thread != NULL) {
 80022cc:	b150      	cbz	r0, 80022e4 <z_impl_k_sem_give+0x30>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80022d4:	f001 f9d9 	bl	800368a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80022d8:	4629      	mov	r1, r5
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <z_impl_k_sem_give+0x40>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80022dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80022e0:	f000 b992 	b.w	8002608 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80022e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	bf18      	it	ne
 80022ec:	3301      	addne	r3, #1
 80022ee:	60a3      	str	r3, [r4, #8]
}
 80022f0:	e7f2      	b.n	80022d8 <z_impl_k_sem_give+0x24>
 80022f2:	bf00      	nop
 80022f4:	200004b2 	.word	0x200004b2

080022f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80022f8:	b513      	push	{r0, r1, r4, lr}
 80022fa:	f04f 0410 	mov.w	r4, #16
 80022fe:	f3ef 8111 	mrs	r1, BASEPRI
 8002302:	f384 8812 	msr	BASEPRI_MAX, r4
 8002306:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800230a:	6884      	ldr	r4, [r0, #8]
 800230c:	b144      	cbz	r4, 8002320 <z_impl_k_sem_take+0x28>
		sem->count--;
 800230e:	3c01      	subs	r4, #1
 8002310:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8002312:	f381 8811 	msr	BASEPRI, r1
 8002316:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800231a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800231c:	b002      	add	sp, #8
 800231e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8002320:	ea52 0403 	orrs.w	r4, r2, r3
 8002324:	d106      	bne.n	8002334 <z_impl_k_sem_take+0x3c>
 8002326:	f381 8811 	msr	BASEPRI, r1
 800232a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800232e:	f06f 000f 	mvn.w	r0, #15
 8002332:	e7f3      	b.n	800231c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8002334:	e9cd 2300 	strd	r2, r3, [sp]
 8002338:	4602      	mov	r2, r0
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <z_impl_k_sem_take+0x4c>)
 800233c:	f000 f946 	bl	80025cc <z_pend_curr>
	return ret;
 8002340:	e7ec      	b.n	800231c <z_impl_k_sem_take+0x24>
 8002342:	bf00      	nop
 8002344:	200004b2 	.word	0x200004b2

08002348 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8002348:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800234a:	4d07      	ldr	r5, [pc, #28]	; (8002368 <z_reset_time_slice+0x20>)
 800234c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 800234e:	b154      	cbz	r4, 8002366 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8002350:	f7ff fcc8 	bl	8001ce4 <sys_clock_elapsed>
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <z_reset_time_slice+0x24>)
 8002356:	4404      	add	r4, r0
 8002358:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800235a:	6828      	ldr	r0, [r5, #0]
 800235c:	2100      	movs	r1, #0
	}
}
 800235e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8002362:	f001 b9ea 	b.w	800373a <z_set_timeout_expiry>
}
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200004a8 	.word	0x200004a8
 800236c:	2000047c 	.word	0x2000047c

08002370 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8002370:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002372:	4d12      	ldr	r5, [pc, #72]	; (80023bc <update_cache+0x4c>)
 8002374:	462b      	mov	r3, r5
 8002376:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800237a:	429c      	cmp	r4, r3
 800237c:	d00b      	beq.n	8002396 <update_cache+0x26>
		if ((thread->base.cpu_mask & BIT(_current_cpu->id)) != 0) {
 800237e:	7d2a      	ldrb	r2, [r5, #20]
 8002380:	2301      	movs	r3, #1
 8002382:	4093      	lsls	r3, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002384:	6a2a      	ldr	r2, [r5, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, thread, base.qnode_dlist) {
 8002386:	b134      	cbz	r4, 8002396 <update_cache+0x26>
		if ((thread->base.cpu_mask & BIT(_current_cpu->id)) != 0) {
 8002388:	7d21      	ldrb	r1, [r4, #20]
 800238a:	4219      	tst	r1, r3
 800238c:	d104      	bne.n	8002398 <update_cache+0x28>
 800238e:	42a2      	cmp	r2, r4
 8002390:	d001      	beq.n	8002396 <update_cache+0x26>
 8002392:	6824      	ldr	r4, [r4, #0]
 8002394:	e7f7      	b.n	8002386 <update_cache+0x16>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002396:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8002398:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800239a:	b938      	cbnz	r0, 80023ac <update_cache+0x3c>
	if (z_is_thread_prevented_from_running(_current)) {
 800239c:	7b5a      	ldrb	r2, [r3, #13]
 800239e:	06d2      	lsls	r2, r2, #27
 80023a0:	d104      	bne.n	80023ac <update_cache+0x3c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80023a2:	6a22      	ldr	r2, [r4, #32]
 80023a4:	b912      	cbnz	r2, 80023ac <update_cache+0x3c>
	if (is_preempt(_current) || is_metairq(thread)) {
 80023a6:	89da      	ldrh	r2, [r3, #14]
 80023a8:	2a7f      	cmp	r2, #127	; 0x7f
 80023aa:	d805      	bhi.n	80023b8 <update_cache+0x48>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80023ac:	42a3      	cmp	r3, r4
 80023ae:	d002      	beq.n	80023b6 <update_cache+0x46>
			z_reset_time_slice(thread);
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff ffc9 	bl	8002348 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80023b6:	4623      	mov	r3, r4
 80023b8:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	2000047c 	.word	0x2000047c

080023c0 <move_thread_to_end_of_prio_q>:
{
 80023c0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80023c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80023c6:	7b43      	ldrb	r3, [r0, #13]
 80023c8:	2a00      	cmp	r2, #0
{
 80023ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80023cc:	da04      	bge.n	80023d8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80023ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80023d4:	f001 f8fd 	bl	80035d2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80023d8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <move_thread_to_end_of_prio_q+0x70>)
 80023dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e0:	4610      	mov	r0, r2
 80023e2:	734b      	strb	r3, [r1, #13]
 80023e4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 80023e8:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80023ea:	4283      	cmp	r3, r0
 80023ec:	bf08      	it	eq
 80023ee:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80023f0:	b923      	cbnz	r3, 80023fc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 80023f2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 80023f6:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80023f8:	6211      	str	r1, [r2, #32]
}
 80023fa:	e00c      	b.n	8002416 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 80023fc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002400:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002404:	42b5      	cmp	r5, r6
 8002406:	d00e      	beq.n	8002426 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002408:	42ae      	cmp	r6, r5
 800240a:	dd0c      	ble.n	8002426 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800240c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800240e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8002412:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002414:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002416:	6890      	ldr	r0, [r2, #8]
 8002418:	1a43      	subs	r3, r0, r1
 800241a:	4258      	negs	r0, r3
}
 800241c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002420:	4158      	adcs	r0, r3
 8002422:	f7ff bfa5 	b.w	8002370 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002426:	429c      	cmp	r4, r3
 8002428:	d0e3      	beq.n	80023f2 <move_thread_to_end_of_prio_q+0x32>
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e7e0      	b.n	80023f0 <move_thread_to_end_of_prio_q+0x30>
 800242e:	bf00      	nop
 8002430:	2000047c 	.word	0x2000047c

08002434 <ready_thread>:
{
 8002434:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002436:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800243a:	7b42      	ldrb	r2, [r0, #13]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db29      	blt.n	8002494 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002440:	06d3      	lsls	r3, r2, #27
 8002442:	d127      	bne.n	8002494 <ready_thread+0x60>
	return node->next != NULL;
 8002444:	6a03      	ldr	r3, [r0, #32]
 8002446:	bb2b      	cbnz	r3, 8002494 <ready_thread+0x60>
	return list->head == list;
 8002448:	4913      	ldr	r1, [pc, #76]	; (8002498 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800244a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800244e:	7342      	strb	r2, [r0, #13]
 8002450:	460a      	mov	r2, r1
 8002452:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002456:	4294      	cmp	r4, r2
 8002458:	bf18      	it	ne
 800245a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 800245c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800245e:	b923      	cbnz	r3, 800246a <ready_thread+0x36>
	node->prev = tail;
 8002460:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8002464:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002466:	6208      	str	r0, [r1, #32]
}
 8002468:	e00c      	b.n	8002484 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 800246a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800246e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002472:	42b5      	cmp	r5, r6
 8002474:	d00a      	beq.n	800248c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002476:	42ae      	cmp	r6, r5
 8002478:	dd08      	ble.n	800248c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 800247a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800247c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8002480:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002482:	6058      	str	r0, [r3, #4]
}
 8002484:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff bf72 	b.w	8002370 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800248c:	42a3      	cmp	r3, r4
 800248e:	d0e7      	beq.n	8002460 <ready_thread+0x2c>
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e7e4      	b.n	800245e <ready_thread+0x2a>
}
 8002494:	bc70      	pop	{r4, r5, r6}
 8002496:	4770      	bx	lr
 8002498:	2000047c 	.word	0x2000047c

0800249c <unready_thread>:
{
 800249c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800249e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80024a2:	7b43      	ldrb	r3, [r0, #13]
 80024a4:	2a00      	cmp	r2, #0
{
 80024a6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80024a8:	da04      	bge.n	80024b4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80024aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80024b0:	f001 f88f 	bl	80035d2 <sys_dlist_remove>
	update_cache(thread == _current);
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <unready_thread+0x2c>)
 80024b6:	6898      	ldr	r0, [r3, #8]
 80024b8:	1a43      	subs	r3, r0, r1
 80024ba:	4258      	negs	r0, r3
 80024bc:	4158      	adcs	r0, r3
}
 80024be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80024c2:	f7ff bf55 	b.w	8002370 <update_cache>
 80024c6:	bf00      	nop
 80024c8:	2000047c 	.word	0x2000047c

080024cc <pend_locked>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	4615      	mov	r5, r2
 80024d0:	461c      	mov	r4, r3
 80024d2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 80024d4:	f001 f8b1 	bl	800363a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80024d8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80024dc:	bf08      	it	eq
 80024de:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80024e2:	d008      	beq.n	80024f6 <pend_locked+0x2a>
 80024e4:	462a      	mov	r2, r5
 80024e6:	4623      	mov	r3, r4
 80024e8:	f106 0020 	add.w	r0, r6, #32
 80024ec:	4902      	ldr	r1, [pc, #8]	; (80024f8 <pend_locked+0x2c>)
}
 80024ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80024f2:	f000 ba8f 	b.w	8002a14 <z_add_timeout>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	080035f7 	.word	0x080035f7

080024fc <k_sched_time_slice_set>:
{
 80024fc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80024fe:	f04f 0310 	mov.w	r3, #16
 8002502:	f3ef 8411 	mrs	r4, BASEPRI
 8002506:	f383 8812 	msr	BASEPRI_MAX, r3
 800250a:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800250e:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002510:	2800      	cmp	r0, #0
 8002512:	fb00 f303 	mul.w	r3, r0, r3
 8002516:	dd02      	ble.n	800251e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8002518:	2b02      	cmp	r3, #2
 800251a:	bfb8      	it	lt
 800251c:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <k_sched_time_slice_set+0x40>)
 8002520:	2000      	movs	r0, #0
 8002522:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8002524:	4806      	ldr	r0, [pc, #24]	; (8002540 <k_sched_time_slice_set+0x44>)
 8002526:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 800252a:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 800252c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800252e:	f7ff ff0b 	bl	8002348 <z_reset_time_slice>
	__asm__ volatile(
 8002532:	f384 8811 	msr	BASEPRI, r4
 8002536:	f3bf 8f6f 	isb	sy
}
 800253a:	bd10      	pop	{r4, pc}
 800253c:	2000047c 	.word	0x2000047c
 8002540:	200004a8 	.word	0x200004a8
 8002544:	200004a4 	.word	0x200004a4

08002548 <z_time_slice>:
{
 8002548:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800254a:	f04f 0310 	mov.w	r3, #16
 800254e:	f3ef 8511 	mrs	r5, BASEPRI
 8002552:	f383 8812 	msr	BASEPRI_MAX, r3
 8002556:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <z_time_slice+0x70>)
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <z_time_slice+0x74>)
 800255e:	689c      	ldr	r4, [r3, #8]
 8002560:	6811      	ldr	r1, [r2, #0]
 8002562:	428c      	cmp	r4, r1
 8002564:	d107      	bne.n	8002576 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff feee 	bl	8002348 <z_reset_time_slice>
	__asm__ volatile(
 800256c:	f385 8811 	msr	BASEPRI, r5
 8002570:	f3bf 8f6f 	isb	sy
}
 8002574:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002576:	2100      	movs	r1, #0
 8002578:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	b1c2      	cbz	r2, 80025b2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002580:	89e2      	ldrh	r2, [r4, #14]
 8002582:	2a7f      	cmp	r2, #127	; 0x7f
 8002584:	d815      	bhi.n	80025b2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8002586:	7b62      	ldrb	r2, [r4, #13]
 8002588:	06d2      	lsls	r2, r2, #27
 800258a:	d112      	bne.n	80025b2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <z_time_slice+0x7c>)
 800258e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4291      	cmp	r1, r2
 8002596:	db0c      	blt.n	80025b2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <z_time_slice+0x80>)
 800259a:	4294      	cmp	r4, r2
 800259c:	d009      	beq.n	80025b2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	4282      	cmp	r2, r0
 80025a2:	dc03      	bgt.n	80025ac <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff ff0b 	bl	80023c0 <move_thread_to_end_of_prio_q>
 80025aa:	e7dc      	b.n	8002566 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 80025ac:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	e7dc      	b.n	800256c <z_time_slice+0x24>
 80025b2:	2200      	movs	r2, #0
 80025b4:	e7fb      	b.n	80025ae <z_time_slice+0x66>
 80025b6:	bf00      	nop
 80025b8:	2000047c 	.word	0x2000047c
 80025bc:	200004a0 	.word	0x200004a0
 80025c0:	200004a8 	.word	0x200004a8
 80025c4:	200004a4 	.word	0x200004a4
 80025c8:	200001d0 	.word	0x200001d0

080025cc <z_pend_curr>:
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 80025ce:	480c      	ldr	r0, [pc, #48]	; (8002600 <z_pend_curr+0x34>)
 80025d0:	4d0c      	ldr	r5, [pc, #48]	; (8002604 <z_pend_curr+0x38>)
 80025d2:	6886      	ldr	r6, [r0, #8]
 80025d4:	602e      	str	r6, [r5, #0]
{
 80025d6:	460c      	mov	r4, r1
 80025d8:	4611      	mov	r1, r2
 80025da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 80025de:	f04f 0610 	mov.w	r6, #16
 80025e2:	f3ef 8511 	mrs	r5, BASEPRI
 80025e6:	f386 8812 	msr	BASEPRI_MAX, r6
 80025ea:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 80025ee:	6880      	ldr	r0, [r0, #8]
 80025f0:	f7ff ff6c 	bl	80024cc <pend_locked>
	ret = arch_swap(key);
 80025f4:	4620      	mov	r0, r4
}
 80025f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025fa:	f7fe bc17 	b.w	8000e2c <arch_swap>
 80025fe:	bf00      	nop
 8002600:	2000047c 	.word	0x2000047c
 8002604:	200004a0 	.word	0x200004a0

08002608 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002608:	b949      	cbnz	r1, 800261e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260a:	f3ef 8005 	mrs	r0, IPSR
 800260e:	b930      	cbnz	r0, 800261e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <z_reschedule+0x16>
 800261a:	f7fe bc07 	b.w	8000e2c <arch_swap>
	__asm__ volatile(
 800261e:	f381 8811 	msr	BASEPRI, r1
 8002622:	f3bf 8f6f 	isb	sy
}
 8002626:	4770      	bx	lr
 8002628:	2000047c 	.word	0x2000047c

0800262c <z_sched_start>:
{
 800262c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800262e:	f04f 0210 	mov.w	r2, #16
 8002632:	f3ef 8411 	mrs	r4, BASEPRI
 8002636:	f382 8812 	msr	BASEPRI_MAX, r2
 800263a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800263e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002640:	0751      	lsls	r1, r2, #29
 8002642:	d404      	bmi.n	800264e <z_sched_start+0x22>
	__asm__ volatile(
 8002644:	f384 8811 	msr	BASEPRI, r4
 8002648:	f3bf 8f6f 	isb	sy
}
 800264c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002654:	f7ff feee 	bl	8002434 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002658:	4621      	mov	r1, r4
 800265a:	4802      	ldr	r0, [pc, #8]	; (8002664 <z_sched_start+0x38>)
}
 800265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002660:	f7ff bfd2 	b.w	8002608 <z_reschedule>
 8002664:	200004b2 	.word	0x200004b2

08002668 <z_impl_k_thread_suspend>:
{
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800266c:	3020      	adds	r0, #32
 800266e:	f001 f84e 	bl	800370e <z_abort_timeout>
	__asm__ volatile(
 8002672:	f04f 0310 	mov.w	r3, #16
 8002676:	f3ef 8611 	mrs	r6, BASEPRI
 800267a:	f383 8812 	msr	BASEPRI_MAX, r3
 800267e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002682:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8002686:	7b63      	ldrb	r3, [r4, #13]
 8002688:	2a00      	cmp	r2, #0
 800268a:	da05      	bge.n	8002698 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800268c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002690:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002692:	4620      	mov	r0, r4
 8002694:	f000 ff9d 	bl	80035d2 <sys_dlist_remove>
		update_cache(thread == _current);
 8002698:	4d0b      	ldr	r5, [pc, #44]	; (80026c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800269a:	7b63      	ldrb	r3, [r4, #13]
 800269c:	68a8      	ldr	r0, [r5, #8]
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	7363      	strb	r3, [r4, #13]
 80026a4:	1b03      	subs	r3, r0, r4
 80026a6:	4258      	negs	r0, r3
 80026a8:	4158      	adcs	r0, r3
 80026aa:	f7ff fe61 	bl	8002370 <update_cache>
	__asm__ volatile(
 80026ae:	f386 8811 	msr	BASEPRI, r6
 80026b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80026b6:	68ab      	ldr	r3, [r5, #8]
 80026b8:	42a3      	cmp	r3, r4
 80026ba:	d103      	bne.n	80026c4 <z_impl_k_thread_suspend+0x5c>
}
 80026bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80026c0:	f001 b81b 	b.w	80036fa <z_reschedule_unlocked>
}
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	bf00      	nop
 80026c8:	2000047c 	.word	0x2000047c

080026cc <k_sched_lock>:
	__asm__ volatile(
 80026cc:	f04f 0310 	mov.w	r3, #16
 80026d0:	f3ef 8111 	mrs	r1, BASEPRI
 80026d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80026d8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <k_sched_lock+0x24>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	7bd3      	ldrb	r3, [r2, #15]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80026e6:	f381 8811 	msr	BASEPRI, r1
 80026ea:	f3bf 8f6f 	isb	sy
}
 80026ee:	4770      	bx	lr
 80026f0:	2000047c 	.word	0x2000047c

080026f4 <k_sched_unlock>:
{
 80026f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80026f6:	f04f 0310 	mov.w	r3, #16
 80026fa:	f3ef 8411 	mrs	r4, BASEPRI
 80026fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8002702:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <k_sched_unlock+0x34>)
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	7bd3      	ldrb	r3, [r2, #15]
 800270c:	3301      	adds	r3, #1
 800270e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff fe2d 	bl	8002370 <update_cache>
	__asm__ volatile(
 8002716:	f384 8811 	msr	BASEPRI, r4
 800271a:	f3bf 8f6f 	isb	sy
}
 800271e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002722:	f000 bfea 	b.w	80036fa <z_reschedule_unlocked>
 8002726:	bf00      	nop
 8002728:	2000047c 	.word	0x2000047c

0800272c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800272e:	2100      	movs	r1, #0
 8002730:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8002734:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8002738:	4608      	mov	r0, r1
 800273a:	f7ff bedf 	b.w	80024fc <k_sched_time_slice_set>
 800273e:	bf00      	nop
 8002740:	2000047c 	.word	0x2000047c

08002744 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8002746:	f04f 0310 	mov.w	r3, #16
 800274a:	f3ef 8511 	mrs	r5, BASEPRI
 800274e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002752:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8002756:	4919      	ldr	r1, [pc, #100]	; (80027bc <z_impl_k_yield+0x78>)
 8002758:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800275a:	7b43      	ldrb	r3, [r0, #13]
 800275c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002760:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002762:	f000 ff36 	bl	80035d2 <sys_dlist_remove>
	}
	queue_thread(_current);
 8002766:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8002768:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800276a:	4608      	mov	r0, r1
 800276c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002770:	735a      	strb	r2, [r3, #13]
 8002772:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 8002776:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002778:	4282      	cmp	r2, r0
 800277a:	bf08      	it	eq
 800277c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800277e:	b922      	cbnz	r2, 800278a <z_impl_k_yield+0x46>
	node->prev = tail;
 8002780:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8002784:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8002786:	620b      	str	r3, [r1, #32]
}
 8002788:	e00c      	b.n	80027a4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 800278a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 800278e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8002792:	42be      	cmp	r6, r7
 8002794:	d00e      	beq.n	80027b4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002796:	42b7      	cmp	r7, r6
 8002798:	dd0c      	ble.n	80027b4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 800279a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800279c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80027a0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80027a2:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff fde3 	bl	8002370 <update_cache>
 80027aa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80027ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80027b0:	f7fe bb3c 	b.w	8000e2c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80027b4:	42a2      	cmp	r2, r4
 80027b6:	d0e3      	beq.n	8002780 <z_impl_k_yield+0x3c>
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	e7e0      	b.n	800277e <z_impl_k_yield+0x3a>
 80027bc:	2000047c 	.word	0x2000047c

080027c0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80027c0:	ea50 0301 	orrs.w	r3, r0, r1
{
 80027c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c8:	4605      	mov	r5, r0
 80027ca:	460e      	mov	r6, r1
	if (ticks == 0) {
 80027cc:	d103      	bne.n	80027d6 <z_tick_sleep+0x16>
	z_impl_k_yield();
 80027ce:	f7ff ffb9 	bl	8002744 <z_impl_k_yield>
		k_yield();
		return 0;
 80027d2:	2000      	movs	r0, #0
 80027d4:	e02c      	b.n	8002830 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 80027d6:	1c83      	adds	r3, r0, #2
 80027d8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 80027dc:	db2a      	blt.n	8002834 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80027de:	f000 ffc8 	bl	8003772 <sys_clock_tick_get_32>
 80027e2:	182c      	adds	r4, r5, r0
 80027e4:	f04f 0310 	mov.w	r3, #16
 80027e8:	f3ef 8811 	mrs	r8, BASEPRI
 80027ec:	f383 8812 	msr	BASEPRI_MAX, r3
 80027f0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 80027f4:	4f11      	ldr	r7, [pc, #68]	; (800283c <z_tick_sleep+0x7c>)
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <z_tick_sleep+0x80>)
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 80027fc:	f7ff fe4e 	bl	800249c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8002800:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002802:	4910      	ldr	r1, [pc, #64]	; (8002844 <z_tick_sleep+0x84>)
 8002804:	462a      	mov	r2, r5
 8002806:	4633      	mov	r3, r6
 8002808:	3020      	adds	r0, #32
 800280a:	f000 f903 	bl	8002a14 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800280e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002810:	7b53      	ldrb	r3, [r2, #13]
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	7353      	strb	r3, [r2, #13]
 8002818:	4640      	mov	r0, r8
 800281a:	f7fe fb07 	bl	8000e2c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800281e:	f000 ffa8 	bl	8003772 <sys_clock_tick_get_32>
 8002822:	1a20      	subs	r0, r4, r0
 8002824:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8002828:	2801      	cmp	r0, #1
 800282a:	f173 0300 	sbcs.w	r3, r3, #0
 800282e:	dbd0      	blt.n	80027d2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8002830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8002834:	f06f 0401 	mvn.w	r4, #1
 8002838:	1a24      	subs	r4, r4, r0
 800283a:	e7d3      	b.n	80027e4 <z_tick_sleep+0x24>
 800283c:	2000047c 	.word	0x2000047c
 8002840:	200004a0 	.word	0x200004a0
 8002844:	080035f7 	.word	0x080035f7

08002848 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002848:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800284c:	bf08      	it	eq
 800284e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002852:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002854:	d106      	bne.n	8002864 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <z_impl_k_sleep+0x2c>)
 8002858:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800285a:	f7ff ff05 	bl	8002668 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800285e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8002862:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002864:	f7ff ffac 	bl	80027c0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002868:	220a      	movs	r2, #10
 800286a:	2300      	movs	r3, #0
 800286c:	17c1      	asrs	r1, r0, #31
 800286e:	f7fd fc93 	bl	8000198 <__aeabi_uldivmod>
	return ret;
 8002872:	e7f6      	b.n	8002862 <z_impl_k_sleep+0x1a>
 8002874:	2000047c 	.word	0x2000047c

08002878 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <z_impl_z_current_get+0x8>)
 800287a:	6898      	ldr	r0, [r3, #8]
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	2000047c 	.word	0x2000047c

08002884 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002888:	4604      	mov	r4, r0
 800288a:	f04f 0310 	mov.w	r3, #16
 800288e:	f3ef 8611 	mrs	r6, BASEPRI
 8002892:	f383 8812 	msr	BASEPRI_MAX, r3
 8002896:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800289a:	7b03      	ldrb	r3, [r0, #12]
 800289c:	07d9      	lsls	r1, r3, #31
 800289e:	d50b      	bpl.n	80028b8 <z_thread_abort+0x34>
	__asm__ volatile(
 80028a0:	f386 8811 	msr	BASEPRI, r6
 80028a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 80028a8:	4040      	eors	r0, r0
 80028aa:	f380 8811 	msr	BASEPRI, r0
 80028ae:	f04f 0004 	mov.w	r0, #4
 80028b2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80028b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80028b8:	7b43      	ldrb	r3, [r0, #13]
 80028ba:	071a      	lsls	r2, r3, #28
 80028bc:	d504      	bpl.n	80028c8 <z_thread_abort+0x44>
 80028be:	f386 8811 	msr	BASEPRI, r6
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	e7f5      	b.n	80028b4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80028c8:	f023 0220 	bic.w	r2, r3, #32
 80028cc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80028d0:	09d2      	lsrs	r2, r2, #7
 80028d2:	d120      	bne.n	8002916 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80028d4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80028d6:	68a3      	ldr	r3, [r4, #8]
 80028d8:	b113      	cbz	r3, 80028e0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80028da:	4620      	mov	r0, r4
 80028dc:	f000 fe81 	bl	80035e2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80028e0:	f104 0020 	add.w	r0, r4, #32
 80028e4:	f000 ff13 	bl	800370e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80028e8:	f104 0760 	add.w	r7, r4, #96	; 0x60
 80028ec:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80028f0:	6e25      	ldr	r5, [r4, #96]	; 0x60
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80028f2:	42bd      	cmp	r5, r7
 80028f4:	d000      	beq.n	80028f8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80028f6:	b9b5      	cbnz	r5, 8002926 <z_thread_abort+0xa2>
		update_cache(1);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f7ff fd39 	bl	8002370 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <z_thread_abort+0xbc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	42a3      	cmp	r3, r4
 8002904:	d1db      	bne.n	80028be <z_thread_abort+0x3a>
 8002906:	f3ef 8305 	mrs	r3, IPSR
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1d7      	bne.n	80028be <z_thread_abort+0x3a>
 800290e:	4630      	mov	r0, r6
 8002910:	f7fe fa8c 	bl	8000e2c <arch_swap>
	return ret;
 8002914:	e7d3      	b.n	80028be <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002916:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002920:	f000 fe57 	bl	80035d2 <sys_dlist_remove>
}
 8002924:	e7d7      	b.n	80028d6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002926:	4628      	mov	r0, r5
 8002928:	f000 fe5b 	bl	80035e2 <unpend_thread_no_timeout>
 800292c:	f105 0020 	add.w	r0, r5, #32
 8002930:	f000 feed 	bl	800370e <z_abort_timeout>
 8002934:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		ready_thread(thread);
 8002938:	4628      	mov	r0, r5
 800293a:	f7ff fd7b 	bl	8002434 <ready_thread>
 800293e:	e7d7      	b.n	80028f0 <z_thread_abort+0x6c>
 8002940:	2000047c 	.word	0x2000047c

08002944 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8002944:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002948:	4a06      	ldr	r2, [pc, #24]	; (8002964 <z_data_copy+0x20>)
 800294a:	4907      	ldr	r1, [pc, #28]	; (8002968 <z_data_copy+0x24>)
 800294c:	1a12      	subs	r2, r2, r0
 800294e:	f000 fe2e 	bl	80035ae <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <z_data_copy+0x28>)
 8002958:	4905      	ldr	r1, [pc, #20]	; (8002970 <z_data_copy+0x2c>)
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <z_data_copy+0x30>)
 800295c:	f000 be27 	b.w	80035ae <z_early_memcpy>
 8002960:	20000000 	.word	0x20000000
 8002964:	20000080 	.word	0x20000080
 8002968:	08004014 	.word	0x08004014
 800296c:	00000000 	.word	0x00000000
 8002970:	08004014 	.word	0x08004014
 8002974:	20000000 	.word	0x20000000

08002978 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <elapsed+0x10>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b90b      	cbnz	r3, 8002982 <elapsed+0xa>
 800297e:	f7ff b9b1 	b.w	8001ce4 <sys_clock_elapsed>
}
 8002982:	2000      	movs	r0, #0
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	200004ac 	.word	0x200004ac

0800298c <next_timeout>:

static int32_t next_timeout(void)
{
 800298c:	b510      	push	{r4, lr}
	return list->head == list;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <next_timeout+0x48>)
 8002990:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002992:	429c      	cmp	r4, r3
 8002994:	d10a      	bne.n	80029ac <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002996:	f7ff ffef 	bl	8002978 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 800299a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <next_timeout+0x4c>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	b113      	cbz	r3, 80029aa <next_timeout+0x1e>
 80029a4:	4298      	cmp	r0, r3
 80029a6:	bfa8      	it	ge
 80029a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80029aa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80029ac:	f7ff ffe4 	bl	8002978 <elapsed>
	if ((to == NULL) ||
 80029b0:	2c00      	cmp	r4, #0
 80029b2:	d0f2      	beq.n	800299a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80029b4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80029b8:	1a1b      	subs	r3, r3, r0
 80029ba:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80029be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c2:	f172 0100 	sbcs.w	r1, r2, #0
 80029c6:	dae8      	bge.n	800299a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	bfac      	ite	ge
 80029cc:	4618      	movge	r0, r3
 80029ce:	2000      	movlt	r0, #0
 80029d0:	e7e5      	b.n	800299e <next_timeout+0x12>
 80029d2:	bf00      	nop
 80029d4:	20000040 	.word	0x20000040
 80029d8:	2000047c 	.word	0x2000047c

080029dc <remove_timeout>:
{
 80029dc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80029de:	b170      	cbz	r0, 80029fe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <remove_timeout+0x34>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d00a      	beq.n	80029fe <remove_timeout+0x22>
 80029e8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80029ea:	b143      	cbz	r3, 80029fe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80029ec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80029f0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80029f4:	1912      	adds	r2, r2, r4
 80029f6:	eb41 0105 	adc.w	r1, r1, r5
 80029fa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80029fe:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8002a02:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002a04:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002a06:	2300      	movs	r3, #0
	node->prev = NULL;
 8002a08:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002a0c:	bd30      	pop	{r4, r5, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000040 	.word	0x20000040

08002a14 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a18:	bf08      	it	eq
 8002a1a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a20:	4604      	mov	r4, r0
 8002a22:	461d      	mov	r5, r3
 8002a24:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002a26:	d061      	beq.n	8002aec <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002a28:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8002a2a:	f04f 0310 	mov.w	r3, #16
 8002a2e:	f3ef 8711 	mrs	r7, BASEPRI
 8002a32:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a36:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8002a3a:	3201      	adds	r2, #1
 8002a3c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8002a40:	da24      	bge.n	8002a8c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002a42:	4930      	ldr	r1, [pc, #192]	; (8002b04 <z_add_timeout+0xf0>)
 8002a44:	e9d1 2000 	ldrd	r2, r0, [r1]
 8002a48:	f06f 0301 	mvn.w	r3, #1
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a52:	eb62 0000 	sbc.w	r0, r2, r0
 8002a56:	1b9e      	subs	r6, r3, r6
 8002a58:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8002a5c:	2e01      	cmp	r6, #1
 8002a5e:	f170 0300 	sbcs.w	r3, r0, #0
 8002a62:	da01      	bge.n	8002a68 <z_add_timeout+0x54>
 8002a64:	2601      	movs	r6, #1
 8002a66:	2000      	movs	r0, #0
 8002a68:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8002a6c:	4e26      	ldr	r6, [pc, #152]	; (8002b08 <z_add_timeout+0xf4>)
 8002a6e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8002a72:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002a74:	45b4      	cmp	ip, r6
 8002a76:	bf08      	it	eq
 8002a78:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8002a7c:	f1bc 0f00 	cmp.w	ip, #0
 8002a80:	d10d      	bne.n	8002a9e <z_add_timeout+0x8a>
	node->prev = tail;
 8002a82:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8002a86:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8002a88:	6074      	str	r4, [r6, #4]
}
 8002a8a:	e01c      	b.n	8002ac6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8002a8c:	f7ff ff74 	bl	8002978 <elapsed>
 8002a90:	3601      	adds	r6, #1
 8002a92:	f145 0500 	adc.w	r5, r5, #0
 8002a96:	1836      	adds	r6, r6, r0
 8002a98:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8002a9c:	e7e4      	b.n	8002a68 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8002a9e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8002aa2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	eb71 0e00 	sbcs.w	lr, r1, r0
 8002aac:	da1f      	bge.n	8002aee <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 8002aae:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8002ab0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002ab4:	eb60 0001 	sbc.w	r0, r0, r1
 8002ab8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8002abc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8002ac0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8002ac2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8002ac6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002ac8:	42b3      	cmp	r3, r6
 8002aca:	d00b      	beq.n	8002ae4 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002acc:	429c      	cmp	r4, r3
 8002ace:	d109      	bne.n	8002ae4 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8002ad0:	f7ff ff5c 	bl	800298c <next_timeout>

			if (next_time == 0 ||
 8002ad4:	b118      	cbz	r0, 8002ade <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	4283      	cmp	r3, r0
 8002adc:	d002      	beq.n	8002ae4 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f7ff f890 	bl	8001c04 <sys_clock_set_timeout>
	__asm__ volatile(
 8002ae4:	f387 8811 	msr	BASEPRI, r7
 8002ae8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8002aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8002af4:	45ac      	cmp	ip, r5
 8002af6:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8002afa:	d0c2      	beq.n	8002a82 <z_add_timeout+0x6e>
 8002afc:	f8dc c000 	ldr.w	ip, [ip]
 8002b00:	e7bc      	b.n	8002a7c <z_add_timeout+0x68>
 8002b02:	bf00      	nop
 8002b04:	20000320 	.word	0x20000320
 8002b08:	20000040 	.word	0x20000040
 8002b0c:	2000047c 	.word	0x2000047c

08002b10 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8002b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b14:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8002b16:	f7ff fd17 	bl	8002548 <z_time_slice>
	__asm__ volatile(
 8002b1a:	f04f 0310 	mov.w	r3, #16
 8002b1e:	f3ef 8611 	mrs	r6, BASEPRI
 8002b22:	f383 8812 	msr	BASEPRI_MAX, r3
 8002b26:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002b2a:	4f23      	ldr	r7, [pc, #140]	; (8002bb8 <sys_clock_announce+0xa8>)
	return list->head == list;
 8002b2c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002bbc <sys_clock_announce+0xac>
 8002b30:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8002b34:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
 8002b36:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b38:	4540      	cmp	r0, r8
		curr_tick += dt;
 8002b3a:	e9d2 3e00 	ldrd	r3, lr, [r2]
 8002b3e:	ea4f 71e4 	mov.w	r1, r4, asr #31
 8002b42:	d00b      	beq.n	8002b5c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8002b44:	b150      	cbz	r0, 8002b5c <sys_clock_announce+0x4c>
 8002b46:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 8002b4a:	42ac      	cmp	r4, r5
 8002b4c:	eb71 090c 	sbcs.w	r9, r1, ip
 8002b50:	da16      	bge.n	8002b80 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8002b52:	1b2d      	subs	r5, r5, r4
 8002b54:	eb6c 0c01 	sbc.w	ip, ip, r1
 8002b58:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8002b5c:	18e3      	adds	r3, r4, r3
 8002b5e:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 8002b62:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8002b64:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 8002b68:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8002b6a:	f7ff ff0f 	bl	800298c <next_timeout>
 8002b6e:	4621      	mov	r1, r4
 8002b70:	f7ff f848 	bl	8001c04 <sys_clock_set_timeout>
	__asm__ volatile(
 8002b74:	f386 8811 	msr	BASEPRI, r6
 8002b78:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8002b80:	18eb      	adds	r3, r5, r3
 8002b82:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 8002b86:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 8002b92:	f7ff ff23 	bl	80029dc <remove_timeout>
 8002b96:	f386 8811 	msr	BASEPRI, r6
 8002b9a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002b9e:	6883      	ldr	r3, [r0, #8]
 8002ba0:	4798      	blx	r3
	__asm__ volatile(
 8002ba2:	f04f 0310 	mov.w	r3, #16
 8002ba6:	f3ef 8611 	mrs	r6, BASEPRI
 8002baa:	f383 8812 	msr	BASEPRI_MAX, r3
 8002bae:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8002bb2:	683c      	ldr	r4, [r7, #0]
 8002bb4:	1b64      	subs	r4, r4, r5
 8002bb6:	e7bb      	b.n	8002b30 <sys_clock_announce+0x20>
 8002bb8:	200004ac 	.word	0x200004ac
 8002bbc:	20000040 	.word	0x20000040
 8002bc0:	20000320 	.word	0x20000320

08002bc4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	f04f 0310 	mov.w	r3, #16
 8002bca:	f3ef 8411 	mrs	r4, BASEPRI
 8002bce:	f383 8812 	msr	BASEPRI_MAX, r3
 8002bd2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8002bd6:	f7ff fecf 	bl	8002978 <elapsed>
 8002bda:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <sys_clock_tick_get+0x30>)
 8002bdc:	4603      	mov	r3, r0
 8002bde:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002be2:	1818      	adds	r0, r3, r0
 8002be4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8002be8:	f384 8811 	msr	BASEPRI, r4
 8002bec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000320 	.word	0x20000320

08002bf8 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	b178      	cbz	r0, 8002c1e <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8002bfe:	f7ff f88f 	bl	8001d20 <sys_clock_cycle_get_32>
 8002c02:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8002c04:	4806      	ldr	r0, [pc, #24]	; (8002c20 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <z_impl_k_busy_wait+0x2c>)
 8002c08:	fba4 0100 	umull	r0, r1, r4, r0
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f7fd fac3 	bl	8000198 <__aeabi_uldivmod>
 8002c12:	4604      	mov	r4, r0
 8002c14:	f7ff f884 	bl	8001d20 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8002c18:	1b43      	subs	r3, r0, r5
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d3fa      	bcc.n	8002c14 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	05b8d800 	.word	0x05b8d800
 8002c24:	000f4240 	.word	0x000f4240

08002c28 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8002c28:	4801      	ldr	r0, [pc, #4]	; (8002c30 <boot_banner+0x8>)
 8002c2a:	f000 b806 	b.w	8002c3a <printk>
 8002c2e:	bf00      	nop
 8002c30:	08003fd2 	.word	0x08003fd2

08002c34 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002c34:	4770      	bx	lr

08002c36 <arch_printk_char_out>:
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	4770      	bx	lr

08002c3a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8002c3a:	b40f      	push	{r0, r1, r2, r3}
 8002c3c:	b507      	push	{r0, r1, r2, lr}
 8002c3e:	a904      	add	r1, sp, #16
 8002c40:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002c44:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8002c46:	f7fd fcaf 	bl	80005a8 <vprintk>

	va_end(ap);
}
 8002c4a:	b003      	add	sp, #12
 8002c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c50:	b004      	add	sp, #16
 8002c52:	4770      	bx	lr

08002c54 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002c54:	4604      	mov	r4, r0
 8002c56:	b508      	push	{r3, lr}
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	47a0      	blx	r4
	return z_impl_z_current_get();
 8002c60:	f7ff fe0a 	bl	8002878 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8002c64:	f7fe face 	bl	8001204 <z_impl_k_thread_abort>

08002c68 <encode_uint>:
{
 8002c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002c6e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8002c70:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002c72:	4680      	mov	r8, r0
 8002c74:	460f      	mov	r7, r1
 8002c76:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002c78:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002c7c:	d029      	beq.n	8002cd2 <encode_uint+0x6a>
 8002c7e:	d824      	bhi.n	8002cca <encode_uint+0x62>
		return 10;
 8002c80:	2b58      	cmp	r3, #88	; 0x58
 8002c82:	bf0c      	ite	eq
 8002c84:	2610      	moveq	r6, #16
 8002c86:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8002c88:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002c8c:	4632      	mov	r2, r6
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4640      	mov	r0, r8
 8002c92:	4639      	mov	r1, r7
 8002c94:	f7fd fa80 	bl	8000198 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002c98:	2a09      	cmp	r2, #9
 8002c9a:	b2d4      	uxtb	r4, r2
 8002c9c:	d81e      	bhi.n	8002cdc <encode_uint+0x74>
 8002c9e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002ca0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002ca2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002ca4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002ca8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002cac:	d301      	bcc.n	8002cb2 <encode_uint+0x4a>
 8002cae:	45d1      	cmp	r9, sl
 8002cb0:	d811      	bhi.n	8002cd6 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002cb2:	782b      	ldrb	r3, [r5, #0]
 8002cb4:	069b      	lsls	r3, r3, #26
 8002cb6:	d505      	bpl.n	8002cc4 <encode_uint+0x5c>
		if (radix == 8) {
 8002cb8:	2e08      	cmp	r6, #8
 8002cba:	d115      	bne.n	8002ce8 <encode_uint+0x80>
			conv->altform_0 = true;
 8002cbc:	78ab      	ldrb	r3, [r5, #2]
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002cc2:	70ab      	strb	r3, [r5, #2]
}
 8002cc4:	4648      	mov	r0, r9
 8002cc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002cca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8002cce:	2b70      	cmp	r3, #112	; 0x70
 8002cd0:	e7d7      	b.n	8002c82 <encode_uint+0x1a>
	switch (specifier) {
 8002cd2:	2608      	movs	r6, #8
 8002cd4:	e7d8      	b.n	8002c88 <encode_uint+0x20>
		value /= radix;
 8002cd6:	4680      	mov	r8, r0
 8002cd8:	460f      	mov	r7, r1
 8002cda:	e7d7      	b.n	8002c8c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002cdc:	f1bb 0f19 	cmp.w	fp, #25
 8002ce0:	bf94      	ite	ls
 8002ce2:	3437      	addls	r4, #55	; 0x37
 8002ce4:	3457      	addhi	r4, #87	; 0x57
 8002ce6:	e7db      	b.n	8002ca0 <encode_uint+0x38>
		} else if (radix == 16) {
 8002ce8:	2e10      	cmp	r6, #16
 8002cea:	d1eb      	bne.n	8002cc4 <encode_uint+0x5c>
			conv->altform_0c = true;
 8002cec:	78ab      	ldrb	r3, [r5, #2]
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	e7e6      	b.n	8002cc2 <encode_uint+0x5a>

08002cf4 <outs>:
{
 8002cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	4688      	mov	r8, r1
 8002cfc:	4615      	mov	r5, r2
 8002cfe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002d00:	4614      	mov	r4, r2
 8002d02:	42b4      	cmp	r4, r6
 8002d04:	d305      	bcc.n	8002d12 <outs+0x1e>
 8002d06:	b10e      	cbz	r6, 8002d0c <outs+0x18>
	return (int)count;
 8002d08:	1b60      	subs	r0, r4, r5
 8002d0a:	e008      	b.n	8002d1e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002d0c:	7823      	ldrb	r3, [r4, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0fa      	beq.n	8002d08 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8002d12:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d16:	4641      	mov	r1, r8
 8002d18:	47b8      	blx	r7
		if (rc < 0) {
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	daf1      	bge.n	8002d02 <outs+0xe>
}
 8002d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d22 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002d22:	4770      	bx	lr

08002d24 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002d24:	2000      	movs	r0, #0
 8002d26:	4770      	bx	lr

08002d28 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002d28:	f000 bc24 	b.w	8003574 <z_fatal_error>

08002d2c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002d2c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002d2e:	6800      	ldr	r0, [r0, #0]
 8002d30:	f000 bc20 	b.w	8003574 <z_fatal_error>

08002d34 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002d34:	2100      	movs	r1, #0
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7ff bff6 	b.w	8002d28 <z_arm_fatal_error>

08002d3c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002d3c:	b508      	push	{r3, lr}
	handler();
 8002d3e:	f7fe f84d 	bl	8000ddc <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002d46:	f7fe b927 	b.w	8000f98 <z_arm_exc_exit>

08002d4a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b922      	cbnz	r2, 8002d5c <strncpy+0x12>
 8002d52:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 8002d54:	2100      	movs	r1, #0
	while (n > 0) {
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
 8002d5a:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
 8002d5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d0f6      	beq.n	8002d52 <strncpy+0x8>
		*d = *s;
 8002d64:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	e7f1      	b.n	8002d50 <strncpy+0x6>
		*d = '\0';
 8002d6c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002d70:	e7f1      	b.n	8002d56 <strncpy+0xc>

08002d72 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002d72:	4603      	mov	r3, r0
	size_t n = 0;
 8002d74:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002d76:	5c1a      	ldrb	r2, [r3, r0]
 8002d78:	b902      	cbnz	r2, 8002d7c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002d7a:	4770      	bx	lr
		n++;
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	e7fa      	b.n	8002d76 <strlen+0x4>

08002d80 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002d80:	4603      	mov	r3, r0
	size_t n = 0;
 8002d82:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002d84:	5c1a      	ldrb	r2, [r3, r0]
 8002d86:	b10a      	cbz	r2, 8002d8c <strnlen+0xc>
 8002d88:	4288      	cmp	r0, r1
 8002d8a:	d100      	bne.n	8002d8e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002d8c:	4770      	bx	lr
		n++;
 8002d8e:	3001      	adds	r0, #1
 8002d90:	e7f8      	b.n	8002d84 <strnlen+0x4>

08002d92 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002d92:	b510      	push	{r4, lr}
 8002d94:	1e43      	subs	r3, r0, #1
 8002d96:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002d98:	4291      	cmp	r1, r2
 8002d9a:	d100      	bne.n	8002d9e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002d9c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002da2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002da6:	e7f7      	b.n	8002d98 <memcpy+0x6>

08002da8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002da8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002daa:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002dac:	4603      	mov	r3, r0
	while (n > 0) {
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d100      	bne.n	8002db4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002db2:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002db4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002db8:	e7f9      	b.n	8002dae <memset+0x6>

08002dba <_stdout_hook_default>:
}
 8002dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dbe:	4770      	bx	lr

08002dc0 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002dc0:	2200      	movs	r2, #0
{
 8002dc2:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	2006      	movs	r0, #6
 8002dc8:	f7fd fff0 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2007      	movs	r0, #7
 8002dd2:	f7fd ffeb 	bl	8000dac <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4611      	mov	r1, r2
 8002dda:	2008      	movs	r0, #8
 8002ddc:	f7fd ffe6 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002de0:	2200      	movs	r2, #0
 8002de2:	4611      	mov	r1, r2
 8002de4:	2009      	movs	r0, #9
 8002de6:	f7fd ffe1 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002dea:	2200      	movs	r2, #0
 8002dec:	4611      	mov	r1, r2
 8002dee:	200a      	movs	r0, #10
 8002df0:	f7fd ffdc 	bl	8000dac <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002df4:	2200      	movs	r2, #0
 8002df6:	4611      	mov	r1, r2
 8002df8:	2017      	movs	r0, #23
 8002dfa:	f7fd ffd7 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4611      	mov	r1, r2
 8002e02:	2028      	movs	r0, #40	; 0x28
 8002e04:	f7fd ffd2 	bl	8000dac <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7fd ffcd 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002e12:	2200      	movs	r2, #0
 8002e14:	4611      	mov	r1, r2
 8002e16:	202a      	movs	r0, #42	; 0x2a
 8002e18:	f7fd ffc8 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4611      	mov	r1, r2
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7fd ffc3 	bl	8000dac <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002e26:	2200      	movs	r2, #0
 8002e28:	4611      	mov	r1, r2
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f7fd ffbe 	bl	8000dac <z_arm_irq_priority_set>
}
 8002e30:	2000      	movs	r0, #0
 8002e32:	bd08      	pop	{r3, pc}

08002e34 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, dev);
 8002e34:	6902      	ldr	r2, [r0, #16]
 8002e36:	2117      	movs	r1, #23
 8002e38:	2016      	movs	r0, #22
 8002e3a:	f7fe bac9 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e3e <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, dev);
 8002e3e:	6902      	ldr	r2, [r0, #16]
 8002e40:	2116      	movs	r1, #22
 8002e42:	2015      	movs	r0, #21
 8002e44:	f7fe bac4 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e48 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, dev);
 8002e48:	6902      	ldr	r2, [r0, #16]
 8002e4a:	2113      	movs	r1, #19
 8002e4c:	2012      	movs	r0, #18
 8002e4e:	f7fe babf 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e52 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, dev);
 8002e52:	6902      	ldr	r2, [r0, #16]
 8002e54:	2111      	movs	r1, #17
 8002e56:	2010      	movs	r0, #16
 8002e58:	f7fe baba 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e5c <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8002e5c:	6902      	ldr	r2, [r0, #16]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	200a      	movs	r0, #10
 8002e62:	f7fe bab5 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e66 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8002e66:	6902      	ldr	r2, [r0, #16]
 8002e68:	210a      	movs	r1, #10
 8002e6a:	2005      	movs	r0, #5
 8002e6c:	f7fe bab0 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e70 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8002e70:	6902      	ldr	r2, [r0, #16]
 8002e72:	2105      	movs	r1, #5
 8002e74:	2004      	movs	r0, #4
 8002e76:	f7fe baab 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e7a <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8002e7a:	6902      	ldr	r2, [r0, #16]
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	2003      	movs	r0, #3
 8002e80:	f7fe baa6 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e84 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8002e84:	6902      	ldr	r2, [r0, #16]
 8002e86:	2103      	movs	r1, #3
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f7fe baa1 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e8e <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8002e8e:	6902      	ldr	r2, [r0, #16]
 8002e90:	2102      	movs	r1, #2
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe ba9c 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002e98 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8002e98:	6902      	ldr	r2, [r0, #16]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe ba97 	b.w	80013d0 <__stm32_exti_isr.isra.0>

08002ea2 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002ea2:	680b      	ldr	r3, [r1, #0]
 8002ea4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ea8:	2a78      	cmp	r2, #120	; 0x78
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002eaa:	bf9f      	itttt	ls
 8002eac:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 8002eb4:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002eb6:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002eb8:	bf9d      	ittte	ls
 8002eba:	430a      	orrls	r2, r1
	return 0;
 8002ebc:	2000      	movls	r0, #0
 8002ebe:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002ec0:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002ec4:	4770      	bx	lr

08002ec6 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002ec6:	680b      	ldr	r3, [r1, #0]
 8002ec8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ecc:	2a78      	cmp	r2, #120	; 0x78
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002ece:	bf9f      	itttt	ls
 8002ed0:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002ed4:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 8002ed8:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002eda:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8002edc:	bf9d      	ittte	ls
 8002ede:	438a      	bicls	r2, r1
	return 0;
 8002ee0:	2000      	movls	r0, #0
 8002ee2:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002ee4:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002ee8:	4770      	bx	lr

08002eea <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8002eea:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d803      	bhi.n	8002ef8 <stm32_clock_control_configure+0xe>
 8002ef0:	b92b      	cbnz	r3, 8002efe <stm32_clock_control_configure+0x14>
 8002ef2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8002ef6:	4770      	bx	lr
	switch (src_clk) {
 8002ef8:	3b05      	subs	r3, #5
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d8f9      	bhi.n	8002ef2 <stm32_clock_control_configure+0x8>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002efe:	6849      	ldr	r1, [r1, #4]
 8002f00:	b2cb      	uxtb	r3, r1
 8002f02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f06:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002f0a:	f3c1 4202 	ubfx	r2, r1, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002f14:	408a      	lsls	r2, r1
	*(volatile uint32_t *)addr = temp | mask;
 8002f16:	4302      	orrs	r2, r0
 8002f18:	601a      	str	r2, [r3, #0]
	return 0;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	4770      	bx	lr

08002f1e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f1e:	6843      	ldr	r3, [r0, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002f22:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002f24:	600b      	str	r3, [r1, #0]
}
 8002f26:	2000      	movs	r0, #0
 8002f28:	4770      	bx	lr

08002f2a <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f2a:	6843      	ldr	r3, [r0, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002f2e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002f30:	4042      	eors	r2, r0
 8002f32:	400a      	ands	r2, r1
 8002f34:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002f36:	615a      	str	r2, [r3, #20]
}
 8002f38:	2000      	movs	r0, #0
 8002f3a:	4770      	bx	lr

08002f3c <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f3c:	6843      	ldr	r3, [r0, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
}
 8002f40:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002f42:	6199      	str	r1, [r3, #24]
}
 8002f44:	4770      	bx	lr

08002f46 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f46:	6843      	ldr	r3, [r0, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f4a:	0409      	lsls	r1, r1, #16
 8002f4c:	6199      	str	r1, [r3, #24]
}
 8002f4e:	2000      	movs	r0, #0
 8002f50:	4770      	bx	lr

08002f52 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f52:	6843      	ldr	r3, [r0, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002f56:	6953      	ldr	r3, [r2, #20]
 8002f58:	404b      	eors	r3, r1
 8002f5a:	6153      	str	r3, [r2, #20]
}
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	4770      	bx	lr

08002f60 <gpio_stm32_manage_callback>:
{
 8002f60:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8002f62:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002f64:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002f66:	b1f8      	cbz	r0, 8002fa8 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002f68:	4288      	cmp	r0, r1
 8002f6a:	d119      	bne.n	8002fa0 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8002f6c:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8002f6e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8002f70:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002f72:	42a1      	cmp	r1, r4
 8002f74:	d100      	bne.n	8002f78 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002f76:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8002f7c:	b12a      	cbz	r2, 8002f8a <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8002f7e:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002f80:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002f82:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8002f84:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002f86:	b902      	cbnz	r2, 8002f8a <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8002f88:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002f8a:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8002f8c:	e010      	b.n	8002fb0 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002f8e:	4281      	cmp	r1, r0
 8002f90:	d106      	bne.n	8002fa0 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8002f92:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8002f94:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002f96:	68d8      	ldr	r0, [r3, #12]
 8002f98:	4281      	cmp	r1, r0
 8002f9a:	d1ed      	bne.n	8002f78 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002f9c:	60dc      	str	r4, [r3, #12]
}
 8002f9e:	e7eb      	b.n	8002f78 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d1f2      	bne.n	8002f8e <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d1e8      	bne.n	8002f7e <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8002fac:	f06f 0015 	mvn.w	r0, #21
}
 8002fb0:	bd10      	pop	{r4, pc}

08002fb2 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002fb4:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002fb6:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002fb8:	6867      	ldr	r7, [r4, #4]
 8002fba:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002fbc:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002fbe:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002fc2:	ea27 0700 	bic.w	r7, r7, r0
 8002fc6:	408b      	lsls	r3, r1
 8002fc8:	433b      	orrs	r3, r7
 8002fca:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002fd0:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002fd4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002fd8:	f04f 0e03 	mov.w	lr, #3
 8002fdc:	007f      	lsls	r7, r7, #1
 8002fde:	fa0e f707 	lsl.w	r7, lr, r7
 8002fe2:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002fea:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002fee:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002ff2:	007f      	lsls	r7, r7, #1
 8002ff4:	40bb      	lsls	r3, r7
 8002ff6:	ea43 030c 	orr.w	r3, r3, ip
 8002ffa:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003000:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003004:	68e7      	ldr	r7, [r4, #12]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa0e f303 	lsl.w	r3, lr, r3
 800300c:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800301c:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800301e:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8003022:	409a      	lsls	r2, r3
 8003024:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8003026:	2d20      	cmp	r5, #32
 8003028:	60e2      	str	r2, [r4, #12]
 800302a:	d116      	bne.n	800305a <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 800302c:	2907      	cmp	r1, #7
 800302e:	dc2b      	bgt.n	8003088 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003034:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8003036:	b32b      	cbz	r3, 8003084 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	210f      	movs	r1, #15
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fa06 f303 	lsl.w	r3, r6, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800305e:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003062:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	fa90 f0a0 	rbit	r0, r0
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800306c:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003070:	092d      	lsrs	r5, r5, #4
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	0040      	lsls	r0, r0, #1
 8003078:	ea22 0303 	bic.w	r3, r2, r3
 800307c:	4085      	lsls	r5, r0
 800307e:	431d      	orrs	r5, r3
 8003080:	6025      	str	r5, [r4, #0]
}
 8003082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8003084:	462b      	mov	r3, r5
 8003086:	e7d9      	b.n	800303c <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003088:	0a03      	lsrs	r3, r0, #8
 800308a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003090:	b182      	cbz	r2, 80030b4 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	fa07 f202 	lsl.w	r2, r7, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	ea21 0202 	bic.w	r2, r1, r2
 80030ac:	409e      	lsls	r6, r3
 80030ae:	4316      	orrs	r6, r2
 80030b0:	6266      	str	r6, [r4, #36]	; 0x24
}
 80030b2:	e7d2      	b.n	800305a <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 80030b4:	462a      	mov	r2, r5
 80030b6:	e7ee      	b.n	8003096 <gpio_stm32_configure_raw.isra.0+0xe4>

080030b8 <gpio_stm32_config>:
{
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 80030bc:	0390      	lsls	r0, r2, #14
{
 80030be:	460d      	mov	r5, r1
 80030c0:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80030c2:	d517      	bpl.n	80030f4 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80030c4:	0791      	lsls	r1, r2, #30
 80030c6:	d50e      	bpl.n	80030e6 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80030c8:	075a      	lsls	r2, r3, #29
 80030ca:	d52e      	bpl.n	800312a <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80030cc:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80030ce:	06d8      	lsls	r0, r3, #27
 80030d0:	d50b      	bpl.n	80030ea <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80030d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80030d6:	0319      	lsls	r1, r3, #12
 80030d8:	d51a      	bpl.n	8003110 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030da:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80030dc:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030de:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80030e0:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 80030e2:	618b      	str	r3, [r1, #24]
	return 0;
 80030e4:	e00d      	b.n	8003102 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80030e6:	2210      	movs	r2, #16
 80030e8:	e7f1      	b.n	80030ce <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80030ea:	0699      	lsls	r1, r3, #26
 80030ec:	d5f3      	bpl.n	80030d6 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80030ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80030f2:	e7f0      	b.n	80030d6 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80030f4:	03da      	lsls	r2, r3, #15
 80030f6:	d513      	bpl.n	8003120 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 80030f8:	06d8      	lsls	r0, r3, #27
 80030fa:	d413      	bmi.n	8003124 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80030fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003100:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8003102:	6860      	ldr	r0, [r4, #4]
 8003104:	2300      	movs	r3, #0
 8003106:	4629      	mov	r1, r5
 8003108:	f7ff ff53 	bl	8002fb2 <gpio_stm32_configure_raw.isra.0>
	return 0;
 800310c:	2000      	movs	r0, #0
}
 800310e:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003110:	035b      	lsls	r3, r3, #13
 8003112:	d5f6      	bpl.n	8003102 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003114:	2101      	movs	r1, #1
 8003116:	40a9      	lsls	r1, r5
 8003118:	4620      	mov	r0, r4
 800311a:	f7ff ff14 	bl	8002f46 <gpio_stm32_port_clear_bits_raw>
 800311e:	e7f0      	b.n	8003102 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8003120:	2230      	movs	r2, #48	; 0x30
 8003122:	e7ee      	b.n	8003102 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003128:	e7eb      	b.n	8003102 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 800312a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800312e:	e7ee      	b.n	800310e <gpio_stm32_config+0x56>

08003130 <gpio_stm32_isr>:
{
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	460b      	mov	r3, r1
 8003134:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003136:	b121      	cbz	r1, 8003142 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003138:	2501      	movs	r5, #1
 800313a:	685e      	ldr	r6, [r3, #4]
	return node->next;
 800313c:	680c      	ldr	r4, [r1, #0]
 800313e:	4085      	lsls	r5, r0
 8003140:	b901      	cbnz	r1, 8003144 <gpio_stm32_isr+0x14>
}
 8003142:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8003144:	688a      	ldr	r2, [r1, #8]
 8003146:	402a      	ands	r2, r5
 8003148:	d002      	beq.n	8003150 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800314a:	684b      	ldr	r3, [r1, #4]
 800314c:	4630      	mov	r0, r6
 800314e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003150:	b11c      	cbz	r4, 800315a <gpio_stm32_isr+0x2a>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	4621      	mov	r1, r4
 8003156:	461c      	mov	r4, r3
 8003158:	e7f2      	b.n	8003140 <gpio_stm32_isr+0x10>
 800315a:	4623      	mov	r3, r4
 800315c:	e7fa      	b.n	8003154 <gpio_stm32_isr+0x24>

0800315e <gpio_stm32_configure>:
{
 800315e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003160:	461f      	mov	r7, r3
 8003162:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8003164:	6840      	ldr	r0, [r0, #4]
{
 8003166:	460e      	mov	r6, r1
 8003168:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800316a:	f7ff ff22 	bl	8002fb2 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800316e:	2f11      	cmp	r7, #17
 8003170:	d107      	bne.n	8003182 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003172:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8003174:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003176:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 800317a:	d504      	bpl.n	8003186 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8003180:	6199      	str	r1, [r3, #24]
}
 8003182:	2000      	movs	r0, #0
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003186:	4620      	mov	r0, r4
 8003188:	f7ff fedd 	bl	8002f46 <gpio_stm32_port_clear_bits_raw>
 800318c:	e7f9      	b.n	8003182 <gpio_stm32_configure+0x24>

0800318e <LL_USART_ClearFlag_FE>:
{
 800318e:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003194:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003196:	6843      	ldr	r3, [r0, #4]
 8003198:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800319a:	9b01      	ldr	r3, [sp, #4]
}
 800319c:	b002      	add	sp, #8
 800319e:	4770      	bx	lr

080031a0 <uart_stm32_poll_in>:
{
 80031a0:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80031a2:	6843      	ldr	r3, [r0, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80031a6:	6803      	ldr	r3, [r0, #0]
 80031a8:	071a      	lsls	r2, r3, #28
 80031aa:	d501      	bpl.n	80031b0 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 80031ac:	f7ff ffef 	bl	800318e <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80031b0:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 80031b2:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80031b4:	bf43      	ittte	mi
 80031b6:	6843      	ldrmi	r3, [r0, #4]
 80031b8:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80031ba:	2000      	movmi	r0, #0
		return -1;
 80031bc:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80031c0:	bd08      	pop	{r3, pc}

080031c2 <uart_stm32_poll_out>:
{
 80031c2:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80031c4:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80031c6:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	d5fc      	bpl.n	80031c8 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80031ce:	f04f 0210 	mov.w	r2, #16
 80031d2:	f3ef 8311 	mrs	r3, BASEPRI
 80031d6:	f382 8812 	msr	BASEPRI_MAX, r2
 80031da:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80031de:	6802      	ldr	r2, [r0, #0]
 80031e0:	6814      	ldr	r4, [r2, #0]
 80031e2:	0624      	lsls	r4, r4, #24
 80031e4:	d404      	bmi.n	80031f0 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80031ee:	e7ea      	b.n	80031c6 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80031f0:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
}
 80031fa:	bd10      	pop	{r4, pc}

080031fc <uart_stm32_err_check>:
{
 80031fc:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80031fe:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003200:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003202:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8003204:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8003206:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003208:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800320a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800320e:	bf48      	it	mi
 8003210:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 8003214:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003216:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 8003218:	bf48      	it	mi
 800321a:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_NE(config->usart)) {
 800321e:	0740      	lsls	r0, r0, #29
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8003220:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_NOISE;
 8003222:	bf48      	it	mi
 8003224:	f042 0220 	orrmi.w	r2, r2, #32
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 8003228:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 800322a:	bf42      	ittt	mi
 800322c:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 8003230:	f042 0208 	orrmi.w	r2, r2, #8
 8003234:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 8003236:	07d0      	lsls	r0, r2, #31
 8003238:	d502      	bpl.n	8003240 <uart_stm32_err_check+0x44>
		LL_USART_ClearFlag_ORE(config->usart);
 800323a:	6808      	ldr	r0, [r1, #0]
 800323c:	f7ff ffa7 	bl	800318e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8003240:	0793      	lsls	r3, r2, #30
 8003242:	d502      	bpl.n	800324a <uart_stm32_err_check+0x4e>
		LL_USART_ClearFlag_PE(config->usart);
 8003244:	6808      	ldr	r0, [r1, #0]
 8003246:	f7ff ffa2 	bl	800318e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800324a:	0750      	lsls	r0, r2, #29
 800324c:	d502      	bpl.n	8003254 <uart_stm32_err_check+0x58>
		LL_USART_ClearFlag_FE(config->usart);
 800324e:	6808      	ldr	r0, [r1, #0]
 8003250:	f7ff ff9d 	bl	800318e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_NOISE) {
 8003254:	0693      	lsls	r3, r2, #26
 8003256:	d502      	bpl.n	800325e <uart_stm32_err_check+0x62>
		LL_USART_ClearFlag_NE(config->usart);
 8003258:	6808      	ldr	r0, [r1, #0]
 800325a:	f7ff ff98 	bl	800318e <LL_USART_ClearFlag_FE>
}
 800325e:	4610      	mov	r0, r2
 8003260:	bd08      	pop	{r3, pc}

08003262 <uart_stm32_fifo_fill>:
{
 8003262:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 8003264:	6846      	ldr	r6, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 8003266:	6833      	ldr	r3, [r6, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800326e:	d010      	beq.n	8003292 <uart_stm32_fifo_fill+0x30>
	__asm__ volatile(
 8003270:	f04f 0310 	mov.w	r3, #16
 8003274:	f3ef 8711 	mrs	r7, BASEPRI
 8003278:	f383 8812 	msr	BASEPRI_MAX, r3
 800327c:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 8003280:	2300      	movs	r3, #0
 8003282:	b2dc      	uxtb	r4, r3
 8003284:	42a2      	cmp	r2, r4
 8003286:	4620      	mov	r0, r4
 8003288:	dc04      	bgt.n	8003294 <uart_stm32_fifo_fill+0x32>
	__asm__ volatile(
 800328a:	f387 8811 	msr	BASEPRI, r7
 800328e:	f3bf 8f6f 	isb	sy
}
 8003292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 8003294:	6835      	ldr	r5, [r6, #0]
 8003296:	f8d5 c000 	ldr.w	ip, [r5]
	while ((size - num_tx > 0) &&
 800329a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800329e:	f103 0301 	add.w	r3, r3, #1
 80032a2:	d0f2      	beq.n	800328a <uart_stm32_fifo_fill+0x28>
  USARTx->DR = Value;
 80032a4:	5d08      	ldrb	r0, [r1, r4]
 80032a6:	6068      	str	r0, [r5, #4]
}
 80032a8:	e7eb      	b.n	8003282 <uart_stm32_fifo_fill+0x20>

080032aa <uart_stm32_fifo_read>:
{
 80032aa:	b570      	push	{r4, r5, r6, lr}
	const struct uart_stm32_config *config = dev->config;
 80032ac:	6845      	ldr	r5, [r0, #4]
	while ((size - num_rx > 0) &&
 80032ae:	2400      	movs	r4, #0
 80032b0:	b2e0      	uxtb	r0, r4
 80032b2:	4282      	cmp	r2, r0
 80032b4:	dd03      	ble.n	80032be <uart_stm32_fifo_read+0x14>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 80032b6:	682b      	ldr	r3, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80032b8:	681e      	ldr	r6, [r3, #0]
	while ((size - num_rx > 0) &&
 80032ba:	06b6      	lsls	r6, r6, #26
 80032bc:	d400      	bmi.n	80032c0 <uart_stm32_fifo_read+0x16>
}
 80032be:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	540b      	strb	r3, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80032c4:	6828      	ldr	r0, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80032c6:	6803      	ldr	r3, [r0, #0]
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	d501      	bpl.n	80032d0 <uart_stm32_fifo_read+0x26>
			LL_USART_ClearFlag_ORE(config->usart);
 80032cc:	f7ff ff5f 	bl	800318e <LL_USART_ClearFlag_FE>
 80032d0:	3401      	adds	r4, #1
 80032d2:	e7ed      	b.n	80032b0 <uart_stm32_fifo_read+0x6>

080032d4 <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 80032d4:	6843      	ldr	r3, [r0, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	f102 030c 	add.w	r3, r2, #12
 80032dc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	f102 000c 	add.w	r0, r2, #12
 80032e8:	e840 3100 	strex	r1, r3, [r0]
 80032ec:	2900      	cmp	r1, #0
 80032ee:	d1f3      	bne.n	80032d8 <uart_stm32_irq_tx_enable+0x4>
}
 80032f0:	4770      	bx	lr

080032f2 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 80032f2:	6843      	ldr	r3, [r0, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	f102 030c 	add.w	r3, r2, #12
 80032fa:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	f102 000c 	add.w	r0, r2, #12
 8003306:	e840 3100 	strex	r1, r3, [r0]
 800330a:	2900      	cmp	r1, #0
 800330c:	d1f3      	bne.n	80032f6 <uart_stm32_irq_tx_disable+0x4>
}
 800330e:	4770      	bx	lr

08003310 <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 8003310:	6843      	ldr	r3, [r0, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800331a:	bf1c      	itt	ne
 800331c:	68d8      	ldrne	r0, [r3, #12]
 800331e:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8003322:	4770      	bx	lr

08003324 <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 8003324:	6843      	ldr	r3, [r0, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003328:	6818      	ldr	r0, [r3, #0]
}
 800332a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800332e:	4770      	bx	lr

08003330 <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 8003330:	6843      	ldr	r3, [r0, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f102 030c 	add.w	r3, r2, #12
 8003338:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800333c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	f102 000c 	add.w	r0, r2, #12
 8003344:	e840 3100 	strex	r1, r3, [r0]
 8003348:	2900      	cmp	r1, #0
 800334a:	d1f3      	bne.n	8003334 <uart_stm32_irq_rx_enable+0x4>
}
 800334c:	4770      	bx	lr

0800334e <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 800334e:	6843      	ldr	r3, [r0, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	f102 030c 	add.w	r3, r2, #12
 8003356:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800335a:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f102 000c 	add.w	r0, r2, #12
 8003362:	e840 3100 	strex	r1, r3, [r0]
 8003366:	2900      	cmp	r1, #0
 8003368:	d1f3      	bne.n	8003352 <uart_stm32_irq_rx_disable+0x4>
}
 800336a:	4770      	bx	lr

0800336c <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 800336c:	6843      	ldr	r3, [r0, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003370:	6818      	ldr	r0, [r3, #0]
}
 8003372:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8003376:	4770      	bx	lr

08003378 <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 8003378:	6843      	ldr	r3, [r0, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800337e:	0691      	lsls	r1, r2, #26
 8003380:	d502      	bpl.n	8003388 <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003382:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 8003384:	0692      	lsls	r2, r2, #26
 8003386:	d407      	bmi.n	8003398 <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003388:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800338a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800338e:	d004      	beq.n	800339a <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8003390:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(config->usart) &&
 8003392:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003396:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 8003398:	2001      	movs	r0, #1
}
 800339a:	4770      	bx	lr

0800339c <uart_stm32_irq_update>:
}
 800339c:	2001      	movs	r0, #1
 800339e:	4770      	bx	lr

080033a0 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 80033a0:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80033a2:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 80033a6:	4770      	bx	lr

080033a8 <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 80033a8:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 80033aa:	6913      	ldr	r3, [r2, #16]
 80033ac:	b10b      	cbz	r3, 80033b2 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 80033ae:	6951      	ldr	r1, [r2, #20]
 80033b0:	4718      	bx	r3
}
 80033b2:	4770      	bx	lr

080033b4 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 80033b4:	b508      	push	{r3, lr}
 80033b6:	2200      	movs	r2, #0
 80033b8:	2026      	movs	r0, #38	; 0x26
 80033ba:	4611      	mov	r1, r2
 80033bc:	f7fd fcf6 	bl	8000dac <z_arm_irq_priority_set>
 80033c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033c4:	2026      	movs	r0, #38	; 0x26
 80033c6:	f7fd bce3 	b.w	8000d90 <arch_irq_enable>

080033ca <uart_stm32_set_baudrate>:
{
 80033ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 80033cc:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 80033ce:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80033d0:	6858      	ldr	r0, [r3, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80033d2:	6883      	ldr	r3, [r0, #8]
 80033d4:	68db      	ldr	r3, [r3, #12]
{
 80033d6:	460d      	mov	r5, r1
					   (clock_control_subsys_t)&config->pclken[0],
 80033d8:	6861      	ldr	r1, [r4, #4]
 80033da:	b1f3      	cbz	r3, 800341a <uart_stm32_set_baudrate+0x50>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80033dc:	aa01      	add	r2, sp, #4
 80033de:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 80033e0:	2800      	cmp	r0, #0
 80033e2:	db1a      	blt.n	800341a <uart_stm32_set_baudrate+0x50>
		LL_USART_SetOverSampling(config->usart,
 80033e4:	6822      	ldr	r2, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033e6:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80033e8:	68d3      	ldr	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033ea:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80033ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f0:	60d3      	str	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033f2:	fba0 0101 	umull	r0, r1, r0, r1
 80033f6:	00aa      	lsls	r2, r5, #2
 80033f8:	0fab      	lsrs	r3, r5, #30
 80033fa:	f7fc fecd 	bl	8000198 <__aeabi_uldivmod>
 80033fe:	2264      	movs	r2, #100	; 0x64
 8003400:	fbb0 f1f2 	udiv	r1, r0, r2
 8003404:	fb02 0311 	mls	r3, r2, r1, r0
 8003408:	011b      	lsls	r3, r3, #4
		LL_USART_SetBaudRate(config->usart,
 800340a:	6824      	ldr	r4, [r4, #0]
 800340c:	3332      	adds	r3, #50	; 0x32
 800340e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003412:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003416:	b29b      	uxth	r3, r3
 8003418:	60a3      	str	r3, [r4, #8]
}
 800341a:	b003      	add	sp, #12
 800341c:	bd30      	pop	{r4, r5, pc}

0800341e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800341e:	6903      	ldr	r3, [r0, #16]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8003424:	6843      	ldr	r3, [r0, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d02f      	beq.n	8003494 <uart_stm32_config_get+0x76>
 8003434:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003438:	f1dc 0300 	rsbs	r3, ip, #0
 800343c:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8003440:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 8003442:	6843      	ldr	r3, [r0, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003450:	d022      	beq.n	8003498 <uart_stm32_config_get+0x7a>
 8003452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003456:	d021      	beq.n	800349c <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003460:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 8003462:	6843      	ldr	r3, [r0, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003466:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003468:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 800346a:	04d2      	lsls	r2, r2, #19
 800346c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003470:	d516      	bpl.n	80034a0 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 8003472:	2b00      	cmp	r3, #0
 8003474:	bf14      	ite	ne
 8003476:	2303      	movne	r3, #3
 8003478:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800347a:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 800347c:	6843      	ldr	r3, [r0, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8003486:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800348a:	4253      	negs	r3, r2
 800348c:	4153      	adcs	r3, r2
 800348e:	71cb      	strb	r3, [r1, #7]
}
 8003490:	2000      	movs	r0, #0
 8003492:	4770      	bx	lr
	switch (parity) {
 8003494:	2302      	movs	r3, #2
 8003496:	e7d3      	b.n	8003440 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8003498:	2300      	movs	r3, #0
 800349a:	e7e1      	b.n	8003460 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 800349c:	2302      	movs	r3, #2
 800349e:	e7df      	b.n	8003460 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2302      	movne	r3, #2
 80034a6:	2303      	moveq	r3, #3
 80034a8:	e7e7      	b.n	800347a <uart_stm32_config_get+0x5c>

080034aa <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 80034aa:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 80034ac:	6803      	ldr	r3, [r0, #0]
 80034ae:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 80034b0:	7905      	ldrb	r5, [r0, #4]
 80034b2:	6804      	ldr	r4, [r0, #0]
 80034b4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	d302      	bcc.n	80034c2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 80034bc:	f06f 0001 	mvn.w	r0, #1
}
 80034c0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 80034c2:	795c      	ldrb	r4, [r3, #5]
 80034c4:	428c      	cmp	r4, r1
 80034c6:	d001      	beq.n	80034cc <pinctrl_lookup_state+0x22>
		(*state)++;
 80034c8:	3308      	adds	r3, #8
 80034ca:	e7f0      	b.n	80034ae <pinctrl_lookup_state+0x4>
			return 0;
 80034cc:	2000      	movs	r0, #0
 80034ce:	e7f7      	b.n	80034c0 <pinctrl_lookup_state+0x16>

080034d0 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80034d0:	6843      	ldr	r3, [r0, #4]
 80034d2:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80034dc:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80034de:	2301      	movs	r3, #1
 80034e0:	408b      	lsls	r3, r1
 80034e2:	4203      	tst	r3, r0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	7013      	strb	r3, [r2, #0]
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80034ec:	2000      	movs	r0, #0
 80034ee:	4770      	bx	lr

080034f0 <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80034f0:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80034f2:	6843      	ldr	r3, [r0, #4]
 80034f4:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80034fe:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8003500:	2301      	movs	r3, #1
 8003502:	408b      	lsls	r3, r1
 8003504:	4323      	orrs	r3, r4
 8003506:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 8003508:	2000      	movs	r0, #0
 800350a:	bd10      	pop	{r4, pc}

0800350c <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 800350c:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800350e:	6843      	ldr	r3, [r0, #4]
 8003510:	f3c1 144b 	ubfx	r4, r1, #5, #12
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 800351a:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800351c:	2201      	movs	r2, #1
 800351e:	408a      	lsls	r2, r1
 8003520:	ea23 0302 	bic.w	r3, r3, r2
 8003524:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8003526:	2000      	movs	r0, #0
 8003528:	bd10      	pop	{r4, pc}

0800352a <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 800352a:	b538      	push	{r3, r4, r5, lr}
 800352c:	4604      	mov	r4, r0
 800352e:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 8003530:	f7ff ffde 	bl	80034f0 <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8003534:	4629      	mov	r1, r5
 8003536:	4620      	mov	r0, r4
 8003538:	f7ff ffe8 	bl	800350c <reset_stm32_line_deassert>

	return 0;
}
 800353c:	2000      	movs	r0, #0
 800353e:	bd38      	pop	{r3, r4, r5, pc}

08003540 <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 8003540:	2000      	movs	r0, #0
 8003542:	4770      	bx	lr

08003544 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8003544:	4770      	bx	lr

08003546 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8003546:	b140      	cbz	r0, 800355a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8003548:	68c3      	ldr	r3, [r0, #12]
 800354a:	7858      	ldrb	r0, [r3, #1]
 800354c:	f010 0001 	ands.w	r0, r0, #1
 8003550:	bf1e      	ittt	ne
 8003552:	7818      	ldrbne	r0, [r3, #0]
 8003554:	fab0 f080 	clzne	r0, r0
 8003558:	0940      	lsrne	r0, r0, #5
}
 800355a:	4770      	bx	lr

0800355c <arch_system_halt>:
	__asm__ volatile(
 800355c:	f04f 0210 	mov.w	r2, #16
 8003560:	f3ef 8311 	mrs	r3, BASEPRI
 8003564:	f382 8812 	msr	BASEPRI_MAX, r2
 8003568:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800356c:	e7fe      	b.n	800356c <arch_system_halt+0x10>

0800356e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800356e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003570:	f7ff fff4 	bl	800355c <arch_system_halt>

08003574 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	4605      	mov	r5, r0
 8003578:	460e      	mov	r6, r1
 800357a:	f04f 0310 	mov.w	r3, #16
 800357e:	f3ef 8711 	mrs	r7, BASEPRI
 8003582:	f383 8812 	msr	BASEPRI_MAX, r3
 8003586:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800358a:	f7ff f975 	bl	8002878 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 800358e:	4631      	mov	r1, r6
 8003590:	4604      	mov	r4, r0
 8003592:	4628      	mov	r0, r5
 8003594:	f7ff ffeb 	bl	800356e <k_sys_fatal_error_handler>
	__asm__ volatile(
 8003598:	f387 8811 	msr	BASEPRI, r7
 800359c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80035a0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80035a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035a6:	f7fd be2d 	b.w	8001204 <z_impl_k_thread_abort>

080035aa <z_early_memset>:
	(void) memset(dst, c, n);
 80035aa:	f7ff bbfd 	b.w	8002da8 <memset>

080035ae <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 80035ae:	f7ff bbf0 	b.w	8002d92 <memcpy>

080035b2 <k_thread_name_get>:
}
 80035b2:	3068      	adds	r0, #104	; 0x68
 80035b4:	4770      	bx	lr

080035b6 <z_impl_k_thread_start>:
	z_sched_start(thread);
 80035b6:	f7ff b839 	b.w	800262c <z_sched_start>

080035ba <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80035ba:	b508      	push	{r3, lr}
	__asm__ volatile(
 80035bc:	f04f 0210 	mov.w	r2, #16
 80035c0:	f3ef 8311 	mrs	r3, BASEPRI
 80035c4:	f382 8812 	msr	BASEPRI_MAX, r2
 80035c8:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80035cc:	f7fd fbd2 	bl	8000d74 <arch_cpu_idle>
 80035d0:	e7f4      	b.n	80035bc <idle+0x2>

080035d2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80035d2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80035d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80035d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80035da:	2300      	movs	r3, #0
	node->prev = NULL;
 80035dc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80035e0:	4770      	bx	lr

080035e2 <unpend_thread_no_timeout>:
{
 80035e2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80035e4:	f7ff fff5 	bl	80035d2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80035e8:	7b43      	ldrb	r3, [r0, #13]
 80035ea:	f023 0302 	bic.w	r3, r3, #2
 80035ee:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	6083      	str	r3, [r0, #8]
}
 80035f4:	bd08      	pop	{r3, pc}

080035f6 <z_thread_timeout>:
{
 80035f6:	b510      	push	{r4, lr}
 80035f8:	4601      	mov	r1, r0
 80035fa:	f04f 0310 	mov.w	r3, #16
 80035fe:	f3ef 8411 	mrs	r4, BASEPRI
 8003602:	f383 8812 	msr	BASEPRI_MAX, r3
 8003606:	f3bf 8f6f 	isb	sy
		if (!killed) {
 800360a:	f810 3c13 	ldrb.w	r3, [r0, #-19]
 800360e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003612:	d10d      	bne.n	8003630 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8003614:	f851 3c18 	ldr.w	r3, [r1, #-24]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003618:	3820      	subs	r0, #32
			if (thread->base.pended_on != NULL) {
 800361a:	b10b      	cbz	r3, 8003620 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 800361c:	f7ff ffe1 	bl	80035e2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003620:	f811 3c13 	ldrb.w	r3, [r1, #-19]
 8003624:	f023 0314 	bic.w	r3, r3, #20
 8003628:	f801 3c13 	strb.w	r3, [r1, #-19]
			ready_thread(thread);
 800362c:	f7fe ff02 	bl	8002434 <ready_thread>
	__asm__ volatile(
 8003630:	f384 8811 	msr	BASEPRI, r4
 8003634:	f3bf 8f6f 	isb	sy
}
 8003638:	bd10      	pop	{r4, pc}

0800363a <add_to_waitq_locked>:
{
 800363a:	b538      	push	{r3, r4, r5, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	460d      	mov	r5, r1
	unready_thread(thread);
 8003640:	f7fe ff2c 	bl	800249c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8003644:	7b63      	ldrb	r3, [r4, #13]
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 800364c:	b1e5      	cbz	r5, 8003688 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 800364e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 8003650:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003652:	429d      	cmp	r5, r3
 8003654:	d109      	bne.n	800366a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8003656:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8003658:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 800365c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800365e:	606c      	str	r4, [r5, #4]
}
 8003660:	e012      	b.n	8003688 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8003662:	686a      	ldr	r2, [r5, #4]
 8003664:	4293      	cmp	r3, r2
 8003666:	d0f6      	beq.n	8003656 <add_to_waitq_locked+0x1c>
 8003668:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f3      	beq.n	8003656 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 800366e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8003672:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8003676:	428a      	cmp	r2, r1
 8003678:	d0f3      	beq.n	8003662 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800367a:	4291      	cmp	r1, r2
 800367c:	ddf1      	ble.n	8003662 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 800367e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003680:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8003684:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8003686:	605c      	str	r4, [r3, #4]
}
 8003688:	bd38      	pop	{r3, r4, r5, pc}

0800368a <z_ready_thread>:
{
 800368a:	b510      	push	{r4, lr}
	__asm__ volatile(
 800368c:	f04f 0310 	mov.w	r3, #16
 8003690:	f3ef 8411 	mrs	r4, BASEPRI
 8003694:	f383 8812 	msr	BASEPRI_MAX, r3
 8003698:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800369c:	f7fe feca 	bl	8002434 <ready_thread>
	__asm__ volatile(
 80036a0:	f384 8811 	msr	BASEPRI, r4
 80036a4:	f3bf 8f6f 	isb	sy
}
 80036a8:	bd10      	pop	{r4, pc}

080036aa <z_unpend_first_thread>:
{
 80036aa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80036ac:	f04f 0310 	mov.w	r3, #16
 80036b0:	f3ef 8511 	mrs	r5, BASEPRI
 80036b4:	f383 8812 	msr	BASEPRI_MAX, r3
 80036b8:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80036bc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80036be:	42a0      	cmp	r0, r4
 80036c0:	d00d      	beq.n	80036de <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 80036c2:	b134      	cbz	r4, 80036d2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7ff ff8c 	bl	80035e2 <unpend_thread_no_timeout>
 80036ca:	f104 0020 	add.w	r0, r4, #32
 80036ce:	f000 f81e 	bl	800370e <z_abort_timeout>
	__asm__ volatile(
 80036d2:	f385 8811 	msr	BASEPRI, r5
 80036d6:	f3bf 8f6f 	isb	sy
}
 80036da:	4620      	mov	r0, r4
 80036dc:	bd38      	pop	{r3, r4, r5, pc}
 80036de:	2400      	movs	r4, #0
 80036e0:	e7f7      	b.n	80036d2 <z_unpend_first_thread+0x28>

080036e2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80036e2:	4603      	mov	r3, r0
 80036e4:	b920      	cbnz	r0, 80036f0 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e6:	f3ef 8205 	mrs	r2, IPSR
 80036ea:	b90a      	cbnz	r2, 80036f0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 80036ec:	f7fd bb9e 	b.w	8000e2c <arch_swap>
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
}
 80036f8:	4770      	bx	lr

080036fa <z_reschedule_unlocked>:
	__asm__ volatile(
 80036fa:	f04f 0310 	mov.w	r3, #16
 80036fe:	f3ef 8011 	mrs	r0, BASEPRI
 8003702:	f383 8812 	msr	BASEPRI_MAX, r3
 8003706:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800370a:	f7ff bfea 	b.w	80036e2 <z_reschedule_irqlock>

0800370e <z_abort_timeout>:
{
 800370e:	b510      	push	{r4, lr}
 8003710:	f04f 0210 	mov.w	r2, #16
 8003714:	f3ef 8411 	mrs	r4, BASEPRI
 8003718:	f382 8812 	msr	BASEPRI_MAX, r2
 800371c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	b13b      	cbz	r3, 8003734 <z_abort_timeout+0x26>
			remove_timeout(to);
 8003724:	f7ff f95a 	bl	80029dc <remove_timeout>
			ret = 0;
 8003728:	2000      	movs	r0, #0
	__asm__ volatile(
 800372a:	f384 8811 	msr	BASEPRI, r4
 800372e:	f3bf 8f6f 	isb	sy
}
 8003732:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003734:	f06f 0015 	mvn.w	r0, #21
 8003738:	e7f7      	b.n	800372a <z_abort_timeout+0x1c>

0800373a <z_set_timeout_expiry>:
{
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	4604      	mov	r4, r0
 800373e:	460d      	mov	r5, r1
	__asm__ volatile(
 8003740:	f04f 0310 	mov.w	r3, #16
 8003744:	f3ef 8611 	mrs	r6, BASEPRI
 8003748:	f383 8812 	msr	BASEPRI_MAX, r3
 800374c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8003750:	f7ff f91c 	bl	800298c <next_timeout>
			      || (ticks <= next_to);
 8003754:	2801      	cmp	r0, #1
 8003756:	dd07      	ble.n	8003768 <z_set_timeout_expiry+0x2e>
 8003758:	42a0      	cmp	r0, r4
 800375a:	db05      	blt.n	8003768 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800375c:	42a0      	cmp	r0, r4
 800375e:	4629      	mov	r1, r5
 8003760:	bfa8      	it	ge
 8003762:	4620      	movge	r0, r4
 8003764:	f7fe fa4e 	bl	8001c04 <sys_clock_set_timeout>
	__asm__ volatile(
 8003768:	f386 8811 	msr	BASEPRI, r6
 800376c:	f3bf 8f6f 	isb	sy
}
 8003770:	bd70      	pop	{r4, r5, r6, pc}

08003772 <sys_clock_tick_get_32>:
{
 8003772:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8003774:	f7ff fa26 	bl	8002bc4 <sys_clock_tick_get>
}
 8003778:	bd08      	pop	{r3, pc}
	...
